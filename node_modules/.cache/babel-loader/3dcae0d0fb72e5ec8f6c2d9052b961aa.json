{"ast":null,"code":"/*!\n * # Semantic UI - Shape\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.fn.shape = function (parameters) {\n    var $allModules = $(this),\n        $body = $('body'),\n        time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n      setTimeout(callback, 0);\n    },\n        returnedValue;\n\n    $allModules.each(function () {\n      var moduleSelector = $allModules.selector || '',\n          settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.shape.settings, parameters) : $.extend({}, $.fn.shape.settings),\n          // internal aliases\n      namespace = settings.namespace,\n          selector = settings.selector,\n          error = settings.error,\n          className = settings.className,\n          // define namespaces for modules\n      eventNamespace = '.' + namespace,\n          moduleNamespace = 'module-' + namespace,\n          // selector cache\n      $module = $(this),\n          $sides = $module.find(selector.sides),\n          $side = $module.find(selector.side),\n          // private variables\n      nextIndex = false,\n          $activeSide,\n          $nextSide,\n          // standard module\n      element = this,\n          instance = $module.data(moduleNamespace),\n          module;\n      module = {\n        initialize: function initialize() {\n          module.verbose('Initializing module for', element);\n          module.set.defaultSide();\n          module.instantiate();\n        },\n        instantiate: function instantiate() {\n          module.verbose('Storing instance of module', module);\n          instance = module;\n          $module.data(moduleNamespace, instance);\n        },\n        destroy: function destroy() {\n          module.verbose('Destroying previous module for', element);\n          $module.removeData(moduleNamespace).off(eventNamespace);\n        },\n        refresh: function refresh() {\n          module.verbose('Refreshing selector cache for', element);\n          $module = $(element);\n          $sides = $(this).find(selector.shape);\n          $side = $(this).find(selector.side);\n        },\n        repaint: function repaint() {\n          module.verbose('Forcing repaint event');\n          var shape = $sides[0] || document.createElement('div'),\n              fakeAssignment = shape.offsetWidth;\n        },\n        animate: function animate(propertyObject, callback) {\n          module.verbose('Animating box with properties', propertyObject);\n\n          callback = callback || function (event) {\n            module.verbose('Executing animation callback');\n\n            if (event !== undefined) {\n              event.stopPropagation();\n            }\n\n            module.reset();\n            module.set.active();\n          };\n\n          settings.beforeChange.call($nextSide[0]);\n\n          if (module.get.transitionEvent()) {\n            module.verbose('Starting CSS animation');\n            $module.addClass(className.animating);\n            $sides.css(propertyObject).one(module.get.transitionEvent(), callback);\n            module.set.duration(settings.duration);\n            requestAnimationFrame(function () {\n              $module.addClass(className.animating);\n              $activeSide.addClass(className.hidden);\n            });\n          } else {\n            callback();\n          }\n        },\n        queue: function queue(method) {\n          module.debug('Queueing animation of', method);\n          $sides.one(module.get.transitionEvent(), function () {\n            module.debug('Executing queued animation');\n            setTimeout(function () {\n              $module.shape(method);\n            }, 0);\n          });\n        },\n        reset: function reset() {\n          module.verbose('Animating states reset');\n          $module.removeClass(className.animating).attr('style', '').removeAttr('style'); // removeAttr style does not consistently work in safari\n\n          $sides.attr('style', '').removeAttr('style');\n          $side.attr('style', '').removeAttr('style').removeClass(className.hidden);\n          $nextSide.removeClass(className.animating).attr('style', '').removeAttr('style');\n        },\n        is: {\n          complete: function complete() {\n            return $side.filter('.' + className.active)[0] == $nextSide[0];\n          },\n          animating: function animating() {\n            return $module.hasClass(className.animating);\n          }\n        },\n        set: {\n          defaultSide: function defaultSide() {\n            $activeSide = $module.find('.' + settings.className.active);\n            $nextSide = $activeSide.next(selector.side).length > 0 ? $activeSide.next(selector.side) : $module.find(selector.side).first();\n            nextIndex = false;\n            module.verbose('Active side set to', $activeSide);\n            module.verbose('Next side set to', $nextSide);\n          },\n          duration: function duration(_duration) {\n            _duration = _duration || settings.duration;\n            _duration = typeof _duration == 'number' ? _duration + 'ms' : _duration;\n            module.verbose('Setting animation duration', _duration);\n\n            if (settings.duration || settings.duration === 0) {\n              $sides.add($side).css({\n                '-webkit-transition-duration': _duration,\n                '-moz-transition-duration': _duration,\n                '-ms-transition-duration': _duration,\n                '-o-transition-duration': _duration,\n                'transition-duration': _duration\n              });\n            }\n          },\n          currentStageSize: function currentStageSize() {\n            var $activeSide = $module.find('.' + settings.className.active),\n                width = $activeSide.outerWidth(true),\n                height = $activeSide.outerHeight(true);\n            $module.css({\n              width: width,\n              height: height\n            });\n          },\n          stageSize: function stageSize() {\n            var $clone = $module.clone().addClass(className.loading),\n                $activeSide = $clone.find('.' + settings.className.active),\n                $nextSide = nextIndex ? $clone.find(selector.side).eq(nextIndex) : $activeSide.next(selector.side).length > 0 ? $activeSide.next(selector.side) : $clone.find(selector.side).first(),\n                newWidth = settings.width == 'next' ? $nextSide.outerWidth(true) : settings.width == 'initial' ? $module.width() : settings.width,\n                newHeight = settings.height == 'next' ? $nextSide.outerHeight(true) : settings.height == 'initial' ? $module.height() : settings.height;\n            $activeSide.removeClass(className.active);\n            $nextSide.addClass(className.active);\n            $clone.insertAfter($module);\n            $clone.remove();\n\n            if (settings.width != 'auto') {\n              $module.css('width', newWidth + settings.jitter);\n              module.verbose('Specifying width during animation', newWidth);\n            }\n\n            if (settings.height != 'auto') {\n              $module.css('height', newHeight + settings.jitter);\n              module.verbose('Specifying height during animation', newHeight);\n            }\n          },\n          nextSide: function nextSide(selector) {\n            nextIndex = selector;\n            $nextSide = $side.filter(selector);\n            nextIndex = $side.index($nextSide);\n\n            if ($nextSide.length === 0) {\n              module.set.defaultSide();\n              module.error(error.side);\n            }\n\n            module.verbose('Next side manually set to', $nextSide);\n          },\n          active: function active() {\n            module.verbose('Setting new side to active', $nextSide);\n            $side.removeClass(className.active);\n            $nextSide.addClass(className.active);\n            settings.onChange.call($nextSide[0]);\n            module.set.defaultSide();\n          }\n        },\n        flip: {\n          up: function up() {\n            if (module.is.complete() && !module.is.animating() && !settings.allowRepeats) {\n              module.debug('Side already visible', $nextSide);\n              return;\n            }\n\n            if (!module.is.animating()) {\n              module.debug('Flipping up', $nextSide);\n              var transform = module.get.transform.up();\n              module.set.stageSize();\n              module.stage.above();\n              module.animate(transform);\n            } else {\n              module.queue('flip up');\n            }\n          },\n          down: function down() {\n            if (module.is.complete() && !module.is.animating() && !settings.allowRepeats) {\n              module.debug('Side already visible', $nextSide);\n              return;\n            }\n\n            if (!module.is.animating()) {\n              module.debug('Flipping down', $nextSide);\n              var transform = module.get.transform.down();\n              module.set.stageSize();\n              module.stage.below();\n              module.animate(transform);\n            } else {\n              module.queue('flip down');\n            }\n          },\n          left: function left() {\n            if (module.is.complete() && !module.is.animating() && !settings.allowRepeats) {\n              module.debug('Side already visible', $nextSide);\n              return;\n            }\n\n            if (!module.is.animating()) {\n              module.debug('Flipping left', $nextSide);\n              var transform = module.get.transform.left();\n              module.set.stageSize();\n              module.stage.left();\n              module.animate(transform);\n            } else {\n              module.queue('flip left');\n            }\n          },\n          right: function right() {\n            if (module.is.complete() && !module.is.animating() && !settings.allowRepeats) {\n              module.debug('Side already visible', $nextSide);\n              return;\n            }\n\n            if (!module.is.animating()) {\n              module.debug('Flipping right', $nextSide);\n              var transform = module.get.transform.right();\n              module.set.stageSize();\n              module.stage.right();\n              module.animate(transform);\n            } else {\n              module.queue('flip right');\n            }\n          },\n          over: function over() {\n            if (module.is.complete() && !module.is.animating() && !settings.allowRepeats) {\n              module.debug('Side already visible', $nextSide);\n              return;\n            }\n\n            if (!module.is.animating()) {\n              module.debug('Flipping over', $nextSide);\n              module.set.stageSize();\n              module.stage.behind();\n              module.animate(module.get.transform.over());\n            } else {\n              module.queue('flip over');\n            }\n          },\n          back: function back() {\n            if (module.is.complete() && !module.is.animating() && !settings.allowRepeats) {\n              module.debug('Side already visible', $nextSide);\n              return;\n            }\n\n            if (!module.is.animating()) {\n              module.debug('Flipping back', $nextSide);\n              module.set.stageSize();\n              module.stage.behind();\n              module.animate(module.get.transform.back());\n            } else {\n              module.queue('flip back');\n            }\n          }\n        },\n        get: {\n          transform: {\n            up: function up() {\n              var translate = {\n                y: -(($activeSide.outerHeight(true) - $nextSide.outerHeight(true)) / 2),\n                z: -($activeSide.outerHeight(true) / 2)\n              };\n              return {\n                transform: 'translateY(' + translate.y + 'px) translateZ(' + translate.z + 'px) rotateX(-90deg)'\n              };\n            },\n            down: function down() {\n              var translate = {\n                y: -(($activeSide.outerHeight(true) - $nextSide.outerHeight(true)) / 2),\n                z: -($activeSide.outerHeight(true) / 2)\n              };\n              return {\n                transform: 'translateY(' + translate.y + 'px) translateZ(' + translate.z + 'px) rotateX(90deg)'\n              };\n            },\n            left: function left() {\n              var translate = {\n                x: -(($activeSide.outerWidth(true) - $nextSide.outerWidth(true)) / 2),\n                z: -($activeSide.outerWidth(true) / 2)\n              };\n              return {\n                transform: 'translateX(' + translate.x + 'px) translateZ(' + translate.z + 'px) rotateY(90deg)'\n              };\n            },\n            right: function right() {\n              var translate = {\n                x: -(($activeSide.outerWidth(true) - $nextSide.outerWidth(true)) / 2),\n                z: -($activeSide.outerWidth(true) / 2)\n              };\n              return {\n                transform: 'translateX(' + translate.x + 'px) translateZ(' + translate.z + 'px) rotateY(-90deg)'\n              };\n            },\n            over: function over() {\n              var translate = {\n                x: -(($activeSide.outerWidth(true) - $nextSide.outerWidth(true)) / 2)\n              };\n              return {\n                transform: 'translateX(' + translate.x + 'px) rotateY(180deg)'\n              };\n            },\n            back: function back() {\n              var translate = {\n                x: -(($activeSide.outerWidth(true) - $nextSide.outerWidth(true)) / 2)\n              };\n              return {\n                transform: 'translateX(' + translate.x + 'px) rotateY(-180deg)'\n              };\n            }\n          },\n          transitionEvent: function transitionEvent() {\n            var element = document.createElement('element'),\n                transitions = {\n              'transition': 'transitionend',\n              'OTransition': 'oTransitionEnd',\n              'MozTransition': 'transitionend',\n              'WebkitTransition': 'webkitTransitionEnd'\n            },\n                transition;\n\n            for (transition in transitions) {\n              if (element.style[transition] !== undefined) {\n                return transitions[transition];\n              }\n            }\n          },\n          nextSide: function nextSide() {\n            return $activeSide.next(selector.side).length > 0 ? $activeSide.next(selector.side) : $module.find(selector.side).first();\n          }\n        },\n        stage: {\n          above: function above() {\n            var box = {\n              origin: ($activeSide.outerHeight(true) - $nextSide.outerHeight(true)) / 2,\n              depth: {\n                active: $nextSide.outerHeight(true) / 2,\n                next: $activeSide.outerHeight(true) / 2\n              }\n            };\n            module.verbose('Setting the initial animation position as above', $nextSide, box);\n            $sides.css({\n              'transform': 'translateZ(-' + box.depth.active + 'px)'\n            });\n            $activeSide.css({\n              'transform': 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'\n            });\n            $nextSide.addClass(className.animating).css({\n              'top': box.origin + 'px',\n              'transform': 'rotateX(90deg) translateZ(' + box.depth.next + 'px)'\n            });\n          },\n          below: function below() {\n            var box = {\n              origin: ($activeSide.outerHeight(true) - $nextSide.outerHeight(true)) / 2,\n              depth: {\n                active: $nextSide.outerHeight(true) / 2,\n                next: $activeSide.outerHeight(true) / 2\n              }\n            };\n            module.verbose('Setting the initial animation position as below', $nextSide, box);\n            $sides.css({\n              'transform': 'translateZ(-' + box.depth.active + 'px)'\n            });\n            $activeSide.css({\n              'transform': 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'\n            });\n            $nextSide.addClass(className.animating).css({\n              'top': box.origin + 'px',\n              'transform': 'rotateX(-90deg) translateZ(' + box.depth.next + 'px)'\n            });\n          },\n          left: function left() {\n            var height = {\n              active: $activeSide.outerWidth(true),\n              next: $nextSide.outerWidth(true)\n            },\n                box = {\n              origin: (height.active - height.next) / 2,\n              depth: {\n                active: height.next / 2,\n                next: height.active / 2\n              }\n            };\n            module.verbose('Setting the initial animation position as left', $nextSide, box);\n            $sides.css({\n              'transform': 'translateZ(-' + box.depth.active + 'px)'\n            });\n            $activeSide.css({\n              'transform': 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'\n            });\n            $nextSide.addClass(className.animating).css({\n              'left': box.origin + 'px',\n              'transform': 'rotateY(-90deg) translateZ(' + box.depth.next + 'px)'\n            });\n          },\n          right: function right() {\n            var height = {\n              active: $activeSide.outerWidth(true),\n              next: $nextSide.outerWidth(true)\n            },\n                box = {\n              origin: (height.active - height.next) / 2,\n              depth: {\n                active: height.next / 2,\n                next: height.active / 2\n              }\n            };\n            module.verbose('Setting the initial animation position as left', $nextSide, box);\n            $sides.css({\n              'transform': 'translateZ(-' + box.depth.active + 'px)'\n            });\n            $activeSide.css({\n              'transform': 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'\n            });\n            $nextSide.addClass(className.animating).css({\n              'left': box.origin + 'px',\n              'transform': 'rotateY(90deg) translateZ(' + box.depth.next + 'px)'\n            });\n          },\n          behind: function behind() {\n            var height = {\n              active: $activeSide.outerWidth(true),\n              next: $nextSide.outerWidth(true)\n            },\n                box = {\n              origin: (height.active - height.next) / 2,\n              depth: {\n                active: height.next / 2,\n                next: height.active / 2\n              }\n            };\n            module.verbose('Setting the initial animation position as behind', $nextSide, box);\n            $activeSide.css({\n              'transform': 'rotateY(0deg)'\n            });\n            $nextSide.addClass(className.animating).css({\n              'left': box.origin + 'px',\n              'transform': 'rotateY(-180deg)'\n            });\n          }\n        },\n        setting: function setting(name, value) {\n          module.debug('Changing setting', name, value);\n\n          if ($.isPlainObject(name)) {\n            $.extend(true, settings, name);\n          } else if (value !== undefined) {\n            if ($.isPlainObject(settings[name])) {\n              $.extend(true, settings[name], value);\n            } else {\n              settings[name] = value;\n            }\n          } else {\n            return settings[name];\n          }\n        },\n        internal: function internal(name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, module, name);\n          } else if (value !== undefined) {\n            module[name] = value;\n          } else {\n            return module[name];\n          }\n        },\n        debug: function debug() {\n          if (!settings.silent && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function verbose() {\n          if (!settings.silent && settings.verbose && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function error() {\n          if (!settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function log(message) {\n            var currentTime, executionTime, previousTime;\n\n            if (settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                'Element': element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 500);\n          },\n          display: function display() {\n            var title = settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ($allModules.length > 1) {\n              title += ' ' + '(' + $allModules.length + ')';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        invoke: function invoke(query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found;\n        }\n      };\n\n      if (methodInvoked) {\n        if (instance === undefined) {\n          module.initialize();\n        }\n\n        module.invoke(query);\n      } else {\n        if (instance !== undefined) {\n          instance.invoke('destroy');\n        }\n\n        module.initialize();\n      }\n    });\n    return returnedValue !== undefined ? returnedValue : this;\n  };\n\n  $.fn.shape.settings = {\n    // module info\n    name: 'Shape',\n    // hide all debug content\n    silent: false,\n    // debug content outputted to console\n    debug: false,\n    // verbose debug output\n    verbose: false,\n    // fudge factor in pixels when swapping from 2d to 3d (can be useful to correct rounding errors)\n    jitter: 0,\n    // performance data output\n    performance: true,\n    // event namespace\n    namespace: 'shape',\n    // width during animation, can be set to 'auto', initial', 'next' or pixel amount\n    width: 'initial',\n    // height during animation, can be set to 'auto', 'initial', 'next' or pixel amount\n    height: 'initial',\n    // callback occurs on side change\n    beforeChange: function beforeChange() {},\n    onChange: function onChange() {},\n    // allow animation to same side\n    allowRepeats: false,\n    // animation duration\n    duration: false,\n    // possible errors\n    error: {\n      side: 'You tried to switch to a side that does not exist.',\n      method: 'The method you called is not defined'\n    },\n    // classnames used\n    className: {\n      animating: 'animating',\n      hidden: 'hidden',\n      loading: 'loading',\n      active: 'active'\n    },\n    // selectors used\n    selector: {\n      sides: '.sides',\n      side: '.side'\n    }\n  };\n})(jQuery, window, document);","map":null,"metadata":{},"sourceType":"module"}