{"ast":null,"code":"/*!\n * # Semantic UI - Rating\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.fn.rating = function (parameters) {\n    var $allModules = $(this),\n        moduleSelector = $allModules.selector || '',\n        time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        returnedValue;\n    $allModules.each(function () {\n      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.rating.settings, parameters) : $.extend({}, $.fn.rating.settings),\n          namespace = settings.namespace,\n          className = settings.className,\n          metadata = settings.metadata,\n          selector = settings.selector,\n          error = settings.error,\n          eventNamespace = '.' + namespace,\n          moduleNamespace = 'module-' + namespace,\n          element = this,\n          instance = $(this).data(moduleNamespace),\n          $module = $(this),\n          $icon = $module.find(selector.icon),\n          _initialLoad,\n          module;\n\n      module = {\n        initialize: function initialize() {\n          module.verbose('Initializing rating module', settings);\n\n          if ($icon.length === 0) {\n            module.setup.layout();\n          }\n\n          if (settings.interactive) {\n            module.enable();\n          } else {\n            module.disable();\n          }\n\n          module.set.initialLoad();\n          module.set.rating(module.get.initialRating());\n          module.remove.initialLoad();\n          module.instantiate();\n        },\n        instantiate: function instantiate() {\n          module.verbose('Instantiating module', settings);\n          instance = module;\n          $module.data(moduleNamespace, module);\n        },\n        destroy: function destroy() {\n          module.verbose('Destroying previous instance', instance);\n          module.remove.events();\n          $module.removeData(moduleNamespace);\n        },\n        refresh: function refresh() {\n          $icon = $module.find(selector.icon);\n        },\n        setup: {\n          layout: function layout() {\n            var maxRating = module.get.maxRating(),\n                html = $.fn.rating.settings.templates.icon(maxRating);\n            module.debug('Generating icon html dynamically');\n            $module.html(html);\n            module.refresh();\n          }\n        },\n        event: {\n          mouseenter: function mouseenter() {\n            var $activeIcon = $(this);\n            $activeIcon.nextAll().removeClass(className.selected);\n            $module.addClass(className.selected);\n            $activeIcon.addClass(className.selected).prevAll().addClass(className.selected);\n          },\n          mouseleave: function mouseleave() {\n            $module.removeClass(className.selected);\n            $icon.removeClass(className.selected);\n          },\n          click: function click() {\n            var $activeIcon = $(this),\n                currentRating = module.get.rating(),\n                rating = $icon.index($activeIcon) + 1,\n                canClear = settings.clearable == 'auto' ? $icon.length === 1 : settings.clearable;\n\n            if (canClear && currentRating == rating) {\n              module.clearRating();\n            } else {\n              module.set.rating(rating);\n            }\n          }\n        },\n        clearRating: function clearRating() {\n          module.debug('Clearing current rating');\n          module.set.rating(0);\n        },\n        bind: {\n          events: function events() {\n            module.verbose('Binding events');\n            $module.on('mouseenter' + eventNamespace, selector.icon, module.event.mouseenter).on('mouseleave' + eventNamespace, selector.icon, module.event.mouseleave).on('click' + eventNamespace, selector.icon, module.event.click);\n          }\n        },\n        remove: {\n          events: function events() {\n            module.verbose('Removing events');\n            $module.off(eventNamespace);\n          },\n          initialLoad: function initialLoad() {\n            _initialLoad = false;\n          }\n        },\n        enable: function enable() {\n          module.debug('Setting rating to interactive mode');\n          module.bind.events();\n          $module.removeClass(className.disabled);\n        },\n        disable: function disable() {\n          module.debug('Setting rating to read-only mode');\n          module.remove.events();\n          $module.addClass(className.disabled);\n        },\n        is: {\n          initialLoad: function initialLoad() {\n            return _initialLoad;\n          }\n        },\n        get: {\n          initialRating: function initialRating() {\n            if ($module.data(metadata.rating) !== undefined) {\n              $module.removeData(metadata.rating);\n              return $module.data(metadata.rating);\n            }\n\n            return settings.initialRating;\n          },\n          maxRating: function maxRating() {\n            if ($module.data(metadata.maxRating) !== undefined) {\n              $module.removeData(metadata.maxRating);\n              return $module.data(metadata.maxRating);\n            }\n\n            return settings.maxRating;\n          },\n          rating: function rating() {\n            var currentRating = $icon.filter('.' + className.active).length;\n            module.verbose('Current rating retrieved', currentRating);\n            return currentRating;\n          }\n        },\n        set: {\n          rating: function rating(_rating) {\n            var ratingIndex = _rating - 1 >= 0 ? _rating - 1 : 0,\n                $activeIcon = $icon.eq(ratingIndex);\n            $module.removeClass(className.selected);\n            $icon.removeClass(className.selected).removeClass(className.active);\n\n            if (_rating > 0) {\n              module.verbose('Setting current rating to', _rating);\n              $activeIcon.prevAll().addBack().addClass(className.active);\n            }\n\n            if (!module.is.initialLoad()) {\n              settings.onRate.call(element, _rating);\n            }\n          },\n          initialLoad: function initialLoad() {\n            _initialLoad = true;\n          }\n        },\n        setting: function setting(name, value) {\n          module.debug('Changing setting', name, value);\n\n          if ($.isPlainObject(name)) {\n            $.extend(true, settings, name);\n          } else if (value !== undefined) {\n            if ($.isPlainObject(settings[name])) {\n              $.extend(true, settings[name], value);\n            } else {\n              settings[name] = value;\n            }\n          } else {\n            return settings[name];\n          }\n        },\n        internal: function internal(name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, module, name);\n          } else if (value !== undefined) {\n            module[name] = value;\n          } else {\n            return module[name];\n          }\n        },\n        debug: function debug() {\n          if (!settings.silent && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function verbose() {\n          if (!settings.silent && settings.verbose && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function error() {\n          if (!settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function log(message) {\n            var currentTime, executionTime, previousTime;\n\n            if (settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                'Element': element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 500);\n          },\n          display: function display() {\n            var title = settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ($allModules.length > 1) {\n              title += ' ' + '(' + $allModules.length + ')';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        invoke: function invoke(query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found;\n        }\n      };\n\n      if (methodInvoked) {\n        if (instance === undefined) {\n          module.initialize();\n        }\n\n        module.invoke(query);\n      } else {\n        if (instance !== undefined) {\n          instance.invoke('destroy');\n        }\n\n        module.initialize();\n      }\n    });\n    return returnedValue !== undefined ? returnedValue : this;\n  };\n\n  $.fn.rating.settings = {\n    name: 'Rating',\n    namespace: 'rating',\n    slent: false,\n    debug: false,\n    verbose: false,\n    performance: true,\n    initialRating: 0,\n    interactive: true,\n    maxRating: 4,\n    clearable: 'auto',\n    fireOnInit: false,\n    onRate: function onRate(rating) {},\n    error: {\n      method: 'The method you called is not defined',\n      noMaximum: 'No maximum rating specified. Cannot generate HTML automatically'\n    },\n    metadata: {\n      rating: 'rating',\n      maxRating: 'maxRating'\n    },\n    className: {\n      active: 'active',\n      disabled: 'disabled',\n      selected: 'selected',\n      loading: 'loading'\n    },\n    selector: {\n      icon: '.icon'\n    },\n    templates: {\n      icon: function icon(maxRating) {\n        var icon = 1,\n            html = '';\n\n        while (icon <= maxRating) {\n          html += '<i class=\"icon\"></i>';\n          icon++;\n        }\n\n        return html;\n      }\n    }\n  };\n})(jQuery, window, document);","map":null,"metadata":{},"sourceType":"module"}