{"ast":null,"code":"/*!\n * # Semantic UI - Form Validation\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.fn.form = function (parameters) {\n    var $allModules = $(this),\n        moduleSelector = $allModules.selector || '',\n        time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        legacyParameters = arguments[1],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        returnedValue;\n    $allModules.each(function () {\n      var $module = $(this),\n          element = this,\n          formErrors = [],\n          keyHeldDown = false,\n          // set at run-time\n      $field,\n          $group,\n          $message,\n          $prompt,\n          $submit,\n          $clear,\n          $reset,\n          _settings,\n          _validation,\n          metadata,\n          selector,\n          className,\n          regExp,\n          error,\n          namespace,\n          moduleNamespace,\n          eventNamespace,\n          instance,\n          module;\n\n      module = {\n        initialize: function initialize() {\n          // settings grabbed at run time\n          module.get.settings();\n\n          if (methodInvoked) {\n            if (instance === undefined) {\n              module.instantiate();\n            }\n\n            module.invoke(query);\n          } else {\n            if (instance !== undefined) {\n              instance.invoke('destroy');\n            }\n\n            module.verbose('Initializing form validation', $module, _settings);\n            module.bindEvents();\n            module.set.defaults();\n            module.instantiate();\n          }\n        },\n        instantiate: function instantiate() {\n          module.verbose('Storing instance of module', module);\n          instance = module;\n          $module.data(moduleNamespace, module);\n        },\n        destroy: function destroy() {\n          module.verbose('Destroying previous module', instance);\n          module.removeEvents();\n          $module.removeData(moduleNamespace);\n        },\n        refresh: function refresh() {\n          module.verbose('Refreshing selector cache');\n          $field = $module.find(selector.field);\n          $group = $module.find(selector.group);\n          $message = $module.find(selector.message);\n          $prompt = $module.find(selector.prompt);\n          $submit = $module.find(selector.submit);\n          $clear = $module.find(selector.clear);\n          $reset = $module.find(selector.reset);\n        },\n        submit: function submit() {\n          module.verbose('Submitting form', $module);\n          $module.submit();\n        },\n        attachEvents: function attachEvents(selector, action) {\n          action = action || 'submit';\n          $(selector).on('click' + eventNamespace, function (event) {\n            module[action]();\n            event.preventDefault();\n          });\n        },\n        bindEvents: function bindEvents() {\n          module.verbose('Attaching form events');\n          $module.on('submit' + eventNamespace, module.validate.form).on('blur' + eventNamespace, selector.field, module.event.field.blur).on('click' + eventNamespace, selector.submit, module.submit).on('click' + eventNamespace, selector.reset, module.reset).on('click' + eventNamespace, selector.clear, module.clear);\n\n          if (_settings.keyboardShortcuts) {\n            $module.on('keydown' + eventNamespace, selector.field, module.event.field.keydown);\n          }\n\n          $field.each(function () {\n            var $input = $(this),\n                type = $input.prop('type'),\n                inputEvent = module.get.changeEvent(type, $input);\n            $(this).on(inputEvent + eventNamespace, module.event.field.change);\n          });\n        },\n        clear: function clear() {\n          $field.each(function () {\n            var $field = $(this),\n                $element = $field.parent(),\n                $fieldGroup = $field.closest($group),\n                $prompt = $fieldGroup.find(selector.prompt),\n                defaultValue = $field.data(metadata.defaultValue) || '',\n                isCheckbox = $element.is(selector.uiCheckbox),\n                isDropdown = $element.is(selector.uiDropdown),\n                isErrored = $fieldGroup.hasClass(className.error);\n\n            if (isErrored) {\n              module.verbose('Resetting error on field', $fieldGroup);\n              $fieldGroup.removeClass(className.error);\n              $prompt.remove();\n            }\n\n            if (isDropdown) {\n              module.verbose('Resetting dropdown value', $element, defaultValue);\n              $element.dropdown('clear');\n            } else if (isCheckbox) {\n              $field.prop('checked', false);\n            } else {\n              module.verbose('Resetting field value', $field, defaultValue);\n              $field.val('');\n            }\n          });\n        },\n        reset: function reset() {\n          $field.each(function () {\n            var $field = $(this),\n                $element = $field.parent(),\n                $fieldGroup = $field.closest($group),\n                $prompt = $fieldGroup.find(selector.prompt),\n                defaultValue = $field.data(metadata.defaultValue),\n                isCheckbox = $element.is(selector.uiCheckbox),\n                isDropdown = $element.is(selector.uiDropdown),\n                isErrored = $fieldGroup.hasClass(className.error);\n\n            if (defaultValue === undefined) {\n              return;\n            }\n\n            if (isErrored) {\n              module.verbose('Resetting error on field', $fieldGroup);\n              $fieldGroup.removeClass(className.error);\n              $prompt.remove();\n            }\n\n            if (isDropdown) {\n              module.verbose('Resetting dropdown value', $element, defaultValue);\n              $element.dropdown('restore defaults');\n            } else if (isCheckbox) {\n              module.verbose('Resetting checkbox value', $element, defaultValue);\n              $field.prop('checked', defaultValue);\n            } else {\n              module.verbose('Resetting field value', $field, defaultValue);\n              $field.val(defaultValue);\n            }\n          });\n        },\n        determine: {\n          isValid: function isValid() {\n            var allValid = true;\n            $.each(_validation, function (fieldName, field) {\n              if (!module.validate.field(field, fieldName, true)) {\n                allValid = false;\n              }\n            });\n            return allValid;\n          }\n        },\n        is: {\n          bracketedRule: function bracketedRule(rule) {\n            return rule.type && rule.type.match(_settings.regExp.bracket);\n          },\n          shorthandFields: function shorthandFields(fields) {\n            var fieldKeys = Object.keys(fields),\n                firstRule = fields[fieldKeys[0]];\n            return module.is.shorthandRules(firstRule);\n          },\n          // duck type rule test\n          shorthandRules: function shorthandRules(rules) {\n            return typeof rules == 'string' || $.isArray(rules);\n          },\n          empty: function empty($field) {\n            if (!$field || $field.length === 0) {\n              return true;\n            } else if ($field.is('input[type=\"checkbox\"]')) {\n              return !$field.is(':checked');\n            } else {\n              return module.is.blank($field);\n            }\n          },\n          blank: function blank($field) {\n            return $.trim($field.val()) === '';\n          },\n          valid: function valid(field) {\n            var allValid = true;\n\n            if (field) {\n              module.verbose('Checking if field is valid', field);\n              return module.validate.field(_validation[field], field, false);\n            } else {\n              module.verbose('Checking if form is valid');\n              $.each(_validation, function (fieldName, field) {\n                if (!module.is.valid(fieldName)) {\n                  allValid = false;\n                }\n              });\n              return allValid;\n            }\n          }\n        },\n        removeEvents: function removeEvents() {\n          $module.off(eventNamespace);\n          $field.off(eventNamespace);\n          $submit.off(eventNamespace);\n          $field.off(eventNamespace);\n        },\n        event: {\n          field: {\n            keydown: function keydown(event) {\n              var $field = $(this),\n                  key = event.which,\n                  isInput = $field.is(selector.input),\n                  isCheckbox = $field.is(selector.checkbox),\n                  isInDropdown = $field.closest(selector.uiDropdown).length > 0,\n                  keyCode = {\n                enter: 13,\n                escape: 27\n              };\n\n              if (key == keyCode.escape) {\n                module.verbose('Escape key pressed blurring field');\n                $field.blur();\n              }\n\n              if (!event.ctrlKey && key == keyCode.enter && isInput && !isInDropdown && !isCheckbox) {\n                if (!keyHeldDown) {\n                  $field.one('keyup' + eventNamespace, module.event.field.keyup);\n                  module.submit();\n                  module.debug('Enter pressed on input submitting form');\n                }\n\n                keyHeldDown = true;\n              }\n            },\n            keyup: function keyup() {\n              keyHeldDown = false;\n            },\n            blur: function blur(event) {\n              var $field = $(this),\n                  $fieldGroup = $field.closest($group),\n                  validationRules = module.get.validation($field);\n\n              if ($fieldGroup.hasClass(className.error)) {\n                module.debug('Revalidating field', $field, validationRules);\n\n                if (validationRules) {\n                  module.validate.field(validationRules);\n                }\n              } else if (_settings.on == 'blur') {\n                if (validationRules) {\n                  module.validate.field(validationRules);\n                }\n              }\n            },\n            change: function change(event) {\n              var $field = $(this),\n                  $fieldGroup = $field.closest($group),\n                  validationRules = module.get.validation($field);\n\n              if (validationRules && (_settings.on == 'change' || $fieldGroup.hasClass(className.error) && _settings.revalidate)) {\n                clearTimeout(module.timer);\n                module.timer = setTimeout(function () {\n                  module.debug('Revalidating field', $field, module.get.validation($field));\n                  module.validate.field(validationRules);\n                }, _settings.delay);\n              }\n            }\n          }\n        },\n        get: {\n          ancillaryValue: function ancillaryValue(rule) {\n            if (!rule.type || !rule.value && !module.is.bracketedRule(rule)) {\n              return false;\n            }\n\n            return rule.value !== undefined ? rule.value : rule.type.match(_settings.regExp.bracket)[1] + '';\n          },\n          ruleName: function ruleName(rule) {\n            if (module.is.bracketedRule(rule)) {\n              return rule.type.replace(rule.type.match(_settings.regExp.bracket)[0], '');\n            }\n\n            return rule.type;\n          },\n          changeEvent: function changeEvent(type, $input) {\n            if (type == 'checkbox' || type == 'radio' || type == 'hidden' || $input.is('select')) {\n              return 'change';\n            } else {\n              return module.get.inputEvent();\n            }\n          },\n          inputEvent: function inputEvent() {\n            return document.createElement('input').oninput !== undefined ? 'input' : document.createElement('input').onpropertychange !== undefined ? 'propertychange' : 'keyup';\n          },\n          fieldsFromShorthand: function fieldsFromShorthand(fields) {\n            var fullFields = {};\n            $.each(fields, function (name, rules) {\n              if (typeof rules == 'string') {\n                rules = [rules];\n              }\n\n              fullFields[name] = {\n                rules: []\n              };\n              $.each(rules, function (index, rule) {\n                fullFields[name].rules.push({\n                  type: rule\n                });\n              });\n            });\n            return fullFields;\n          },\n          prompt: function prompt(rule, field) {\n            var ruleName = module.get.ruleName(rule),\n                ancillary = module.get.ancillaryValue(rule),\n                $field = module.get.field(field.identifier),\n                value = $field.val(),\n                prompt = $.isFunction(rule.prompt) ? rule.prompt(value) : rule.prompt || _settings.prompt[ruleName] || _settings.text.unspecifiedRule,\n                requiresValue = prompt.search('{value}') !== -1,\n                requiresName = prompt.search('{name}') !== -1,\n                $label,\n                name;\n\n            if (requiresValue) {\n              prompt = prompt.replace('{value}', $field.val());\n            }\n\n            if (requiresName) {\n              $label = $field.closest(selector.group).find('label').eq(0);\n              name = $label.length == 1 ? $label.text() : $field.prop('placeholder') || _settings.text.unspecifiedField;\n              prompt = prompt.replace('{name}', name);\n            }\n\n            prompt = prompt.replace('{identifier}', field.identifier);\n            prompt = prompt.replace('{ruleValue}', ancillary);\n\n            if (!rule.prompt) {\n              module.verbose('Using default validation prompt for type', prompt, ruleName);\n            }\n\n            return prompt;\n          },\n          settings: function settings() {\n            if ($.isPlainObject(parameters)) {\n              var keys = Object.keys(parameters),\n                  isLegacySettings = keys.length > 0 ? parameters[keys[0]].identifier !== undefined && parameters[keys[0]].rules !== undefined : false,\n                  ruleKeys;\n\n              if (isLegacySettings) {\n                // 1.x (ducktyped)\n                _settings = $.extend(true, {}, $.fn.form.settings, legacyParameters);\n                _validation = $.extend({}, $.fn.form.settings.defaults, parameters);\n                module.error(_settings.error.oldSyntax, element);\n                module.verbose('Extending settings from legacy parameters', _validation, _settings);\n              } else {\n                // 2.x\n                if (parameters.fields && module.is.shorthandFields(parameters.fields)) {\n                  parameters.fields = module.get.fieldsFromShorthand(parameters.fields);\n                }\n\n                _settings = $.extend(true, {}, $.fn.form.settings, parameters);\n                _validation = $.extend({}, $.fn.form.settings.defaults, _settings.fields);\n                module.verbose('Extending settings', _validation, _settings);\n              }\n            } else {\n              _settings = $.fn.form.settings;\n              _validation = $.fn.form.settings.defaults;\n              module.verbose('Using default form validation', _validation, _settings);\n            } // shorthand\n\n\n            namespace = _settings.namespace;\n            metadata = _settings.metadata;\n            selector = _settings.selector;\n            className = _settings.className;\n            regExp = _settings.regExp;\n            error = _settings.error;\n            moduleNamespace = 'module-' + namespace;\n            eventNamespace = '.' + namespace; // grab instance\n\n            instance = $module.data(moduleNamespace); // refresh selector cache\n\n            module.refresh();\n          },\n          field: function field(identifier) {\n            module.verbose('Finding field with identifier', identifier);\n            identifier = module.escape.string(identifier);\n\n            if ($field.filter('#' + identifier).length > 0) {\n              return $field.filter('#' + identifier);\n            } else if ($field.filter('[name=\"' + identifier + '\"]').length > 0) {\n              return $field.filter('[name=\"' + identifier + '\"]');\n            } else if ($field.filter('[name=\"' + identifier + '[]\"]').length > 0) {\n              return $field.filter('[name=\"' + identifier + '[]\"]');\n            } else if ($field.filter('[data-' + metadata.validate + '=\"' + identifier + '\"]').length > 0) {\n              return $field.filter('[data-' + metadata.validate + '=\"' + identifier + '\"]');\n            }\n\n            return $('<input/>');\n          },\n          fields: function (_fields) {\n            function fields(_x) {\n              return _fields.apply(this, arguments);\n            }\n\n            fields.toString = function () {\n              return _fields.toString();\n            };\n\n            return fields;\n          }(function (fields) {\n            var $fields = $();\n            $.each(fields, function (index, name) {\n              $fields = $fields.add(module.get.field(name));\n            });\n            return $fields;\n          }),\n          validation: function validation($field) {\n            var fieldValidation, identifier;\n\n            if (!_validation) {\n              return false;\n            }\n\n            $.each(_validation, function (fieldName, field) {\n              identifier = field.identifier || fieldName;\n\n              if (module.get.field(identifier)[0] == $field[0]) {\n                field.identifier = identifier;\n                fieldValidation = field;\n              }\n            });\n            return fieldValidation || false;\n          },\n          value: function value(field) {\n            var fields = [],\n                results;\n            fields.push(field);\n            results = module.get.values.call(element, fields);\n            return results[field];\n          },\n          values: function values(fields) {\n            var $fields = $.isArray(fields) ? module.get.fields(fields) : $field,\n                values = {};\n            $fields.each(function (index, field) {\n              var $field = $(field),\n                  type = $field.prop('type'),\n                  name = $field.prop('name'),\n                  value = $field.val(),\n                  isCheckbox = $field.is(selector.checkbox),\n                  isRadio = $field.is(selector.radio),\n                  isMultiple = name.indexOf('[]') !== -1,\n                  isChecked = isCheckbox ? $field.is(':checked') : false;\n\n              if (name) {\n                if (isMultiple) {\n                  name = name.replace('[]', '');\n\n                  if (!values[name]) {\n                    values[name] = [];\n                  }\n\n                  if (isCheckbox) {\n                    if (isChecked) {\n                      values[name].push(value || true);\n                    } else {\n                      values[name].push(false);\n                    }\n                  } else {\n                    values[name].push(value);\n                  }\n                } else {\n                  if (isRadio) {\n                    if (values[name] === undefined || values[name] == false) {\n                      values[name] = isChecked ? value || true : false;\n                    }\n                  } else if (isCheckbox) {\n                    if (isChecked) {\n                      values[name] = value || true;\n                    } else {\n                      values[name] = false;\n                    }\n                  } else {\n                    values[name] = value;\n                  }\n                }\n              }\n            });\n            return values;\n          }\n        },\n        has: {\n          field: function field(identifier) {\n            module.verbose('Checking for existence of a field with identifier', identifier);\n            identifier = module.escape.string(identifier);\n\n            if (typeof identifier !== 'string') {\n              module.error(error.identifier, identifier);\n            }\n\n            if ($field.filter('#' + identifier).length > 0) {\n              return true;\n            } else if ($field.filter('[name=\"' + identifier + '\"]').length > 0) {\n              return true;\n            } else if ($field.filter('[data-' + metadata.validate + '=\"' + identifier + '\"]').length > 0) {\n              return true;\n            }\n\n            return false;\n          }\n        },\n        escape: {\n          string: function string(text) {\n            text = String(text);\n            return text.replace(regExp.escape, '\\\\$&');\n          }\n        },\n        add: {\n          // alias\n          rule: function rule(name, rules) {\n            module.add.field(name, rules);\n          },\n          field: function field(name, rules) {\n            var newValidation = {};\n\n            if (module.is.shorthandRules(rules)) {\n              rules = $.isArray(rules) ? rules : [rules];\n              newValidation[name] = {\n                rules: []\n              };\n              $.each(rules, function (index, rule) {\n                newValidation[name].rules.push({\n                  type: rule\n                });\n              });\n            } else {\n              newValidation[name] = rules;\n            }\n\n            _validation = $.extend({}, _validation, newValidation);\n            module.debug('Adding rules', newValidation, _validation);\n          },\n          fields: function (_fields2) {\n            function fields(_x2) {\n              return _fields2.apply(this, arguments);\n            }\n\n            fields.toString = function () {\n              return _fields2.toString();\n            };\n\n            return fields;\n          }(function (fields) {\n            var newValidation;\n\n            if (fields && module.is.shorthandFields(fields)) {\n              newValidation = module.get.fieldsFromShorthand(fields);\n            } else {\n              newValidation = fields;\n            }\n\n            _validation = $.extend({}, _validation, newValidation);\n          }),\n          prompt: function prompt(identifier, errors) {\n            var $field = module.get.field(identifier),\n                $fieldGroup = $field.closest($group),\n                $prompt = $fieldGroup.children(selector.prompt),\n                promptExists = $prompt.length !== 0;\n            errors = typeof errors == 'string' ? [errors] : errors;\n            module.verbose('Adding field error state', identifier);\n            $fieldGroup.addClass(className.error);\n\n            if (_settings.inline) {\n              if (!promptExists) {\n                $prompt = _settings.templates.prompt(errors);\n                $prompt.appendTo($fieldGroup);\n              }\n\n              $prompt.html(errors[0]);\n\n              if (!promptExists) {\n                if (_settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {\n                  module.verbose('Displaying error with css transition', _settings.transition);\n                  $prompt.transition(_settings.transition + ' in', _settings.duration);\n                } else {\n                  module.verbose('Displaying error with fallback javascript animation');\n                  $prompt.fadeIn(_settings.duration);\n                }\n              } else {\n                module.verbose('Inline errors are disabled, no inline error added', identifier);\n              }\n            }\n          },\n          errors: function errors(_errors) {\n            module.debug('Adding form error messages', _errors);\n            module.set.error();\n            $message.html(_settings.templates.error(_errors));\n          }\n        },\n        remove: {\n          rule: function rule(field, _rule) {\n            var rules = $.isArray(_rule) ? _rule : [_rule];\n\n            if (_rule == undefined) {\n              module.debug('Removed all rules');\n              _validation[field].rules = [];\n              return;\n            }\n\n            if (_validation[field] == undefined || !$.isArray(_validation[field].rules)) {\n              return;\n            }\n\n            $.each(_validation[field].rules, function (index, rule) {\n              if (rules.indexOf(rule.type) !== -1) {\n                module.debug('Removed rule', rule.type);\n\n                _validation[field].rules.splice(index, 1);\n              }\n            });\n          },\n          field: function field(_field) {\n            var fields = $.isArray(_field) ? _field : [_field];\n            $.each(fields, function (index, field) {\n              module.remove.rule(field);\n            });\n          },\n          // alias\n          rules: function rules(field, _rules) {\n            if ($.isArray(field)) {\n              $.each(fields, function (index, field) {\n                module.remove.rule(field, _rules);\n              });\n            } else {\n              module.remove.rule(field, _rules);\n            }\n          },\n          fields: function (_fields3) {\n            function fields(_x3) {\n              return _fields3.apply(this, arguments);\n            }\n\n            fields.toString = function () {\n              return _fields3.toString();\n            };\n\n            return fields;\n          }(function (fields) {\n            module.remove.field(fields);\n          }),\n          prompt: function prompt(identifier) {\n            var $field = module.get.field(identifier),\n                $fieldGroup = $field.closest($group),\n                $prompt = $fieldGroup.children(selector.prompt);\n            $fieldGroup.removeClass(className.error);\n\n            if (_settings.inline && $prompt.is(':visible')) {\n              module.verbose('Removing prompt for field', identifier);\n\n              if (_settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {\n                $prompt.transition(_settings.transition + ' out', _settings.duration, function () {\n                  $prompt.remove();\n                });\n              } else {\n                $prompt.fadeOut(_settings.duration, function () {\n                  $prompt.remove();\n                });\n              }\n            }\n          }\n        },\n        set: {\n          success: function success() {\n            $module.removeClass(className.error).addClass(className.success);\n          },\n          defaults: function defaults() {\n            $field.each(function () {\n              var $field = $(this),\n                  isCheckbox = $field.filter(selector.checkbox).length > 0,\n                  value = isCheckbox ? $field.is(':checked') : $field.val();\n              $field.data(metadata.defaultValue, value);\n            });\n          },\n          error: function error() {\n            $module.removeClass(className.success).addClass(className.error);\n          },\n          value: function value(field, _value) {\n            var fields = {};\n            fields[field] = _value;\n            return module.set.values.call(element, fields);\n          },\n          values: function values(fields) {\n            if ($.isEmptyObject(fields)) {\n              return;\n            }\n\n            $.each(fields, function (key, value) {\n              var $field = module.get.field(key),\n                  $element = $field.parent(),\n                  isMultiple = $.isArray(value),\n                  isCheckbox = $element.is(selector.uiCheckbox),\n                  isDropdown = $element.is(selector.uiDropdown),\n                  isRadio = $field.is(selector.radio) && isCheckbox,\n                  fieldExists = $field.length > 0,\n                  $multipleField;\n\n              if (fieldExists) {\n                if (isMultiple && isCheckbox) {\n                  module.verbose('Selecting multiple', value, $field);\n                  $element.checkbox('uncheck');\n                  $.each(value, function (index, value) {\n                    $multipleField = $field.filter('[value=\"' + value + '\"]');\n                    $element = $multipleField.parent();\n\n                    if ($multipleField.length > 0) {\n                      $element.checkbox('check');\n                    }\n                  });\n                } else if (isRadio) {\n                  module.verbose('Selecting radio value', value, $field);\n                  $field.filter('[value=\"' + value + '\"]').parent(selector.uiCheckbox).checkbox('check');\n                } else if (isCheckbox) {\n                  module.verbose('Setting checkbox value', value, $element);\n\n                  if (value === true) {\n                    $element.checkbox('check');\n                  } else {\n                    $element.checkbox('uncheck');\n                  }\n                } else if (isDropdown) {\n                  module.verbose('Setting dropdown value', value, $element);\n                  $element.dropdown('set selected', value);\n                } else {\n                  module.verbose('Setting field value', value, $field);\n                  $field.val(value);\n                }\n              }\n            });\n          }\n        },\n        validate: {\n          form: function form(event, ignoreCallbacks) {\n            var values = module.get.values(),\n                apiRequest; // input keydown event will fire submit repeatedly by browser default\n\n            if (keyHeldDown) {\n              return false;\n            } // reset errors\n\n\n            formErrors = [];\n\n            if (module.determine.isValid()) {\n              module.debug('Form has no validation errors, submitting');\n              module.set.success();\n\n              if (ignoreCallbacks !== true) {\n                return _settings.onSuccess.call(element, event, values);\n              }\n            } else {\n              module.debug('Form has errors');\n              module.set.error();\n\n              if (!_settings.inline) {\n                module.add.errors(formErrors);\n              } // prevent ajax submit\n\n\n              if ($module.data('moduleApi') !== undefined) {\n                event.stopImmediatePropagation();\n              }\n\n              if (ignoreCallbacks !== true) {\n                return _settings.onFailure.call(element, formErrors, values);\n              }\n            }\n          },\n          // takes a validation object and returns whether field passes validation\n          field: function field(_field2, fieldName, showErrors) {\n            showErrors = showErrors !== undefined ? showErrors : true;\n\n            if (typeof _field2 == 'string') {\n              module.verbose('Validating field', _field2);\n              fieldName = _field2;\n              _field2 = _validation[_field2];\n            }\n\n            var identifier = _field2.identifier || fieldName,\n                $field = module.get.field(identifier),\n                $dependsField = _field2.depends ? module.get.field(_field2.depends) : false,\n                fieldValid = true,\n                fieldErrors = [];\n\n            if (!_field2.identifier) {\n              module.debug('Using field name as identifier', identifier);\n              _field2.identifier = identifier;\n            }\n\n            if ($field.prop('disabled')) {\n              module.debug('Field is disabled. Skipping', identifier);\n              fieldValid = true;\n            } else if (_field2.optional && module.is.blank($field)) {\n              module.debug('Field is optional and blank. Skipping', identifier);\n              fieldValid = true;\n            } else if (_field2.depends && module.is.empty($dependsField)) {\n              module.debug('Field depends on another value that is not present or empty. Skipping', $dependsField);\n              fieldValid = true;\n            } else if (_field2.rules !== undefined) {\n              $.each(_field2.rules, function (index, rule) {\n                if (module.has.field(identifier) && !module.validate.rule(_field2, rule)) {\n                  module.debug('Field is invalid', identifier, rule.type);\n                  fieldErrors.push(module.get.prompt(rule, _field2));\n                  fieldValid = false;\n                }\n              });\n            }\n\n            if (fieldValid) {\n              if (showErrors) {\n                module.remove.prompt(identifier, fieldErrors);\n\n                _settings.onValid.call($field);\n              }\n            } else {\n              if (showErrors) {\n                formErrors = formErrors.concat(fieldErrors);\n                module.add.prompt(identifier, fieldErrors);\n\n                _settings.onInvalid.call($field, fieldErrors);\n              }\n\n              return false;\n            }\n\n            return true;\n          },\n          // takes validation rule and returns whether field passes rule\n          rule: function rule(field, _rule2) {\n            var $field = module.get.field(field.identifier),\n                type = _rule2.type,\n                value = $field.val(),\n                isValid = true,\n                ancillary = module.get.ancillaryValue(_rule2),\n                ruleName = module.get.ruleName(_rule2),\n                ruleFunction = _settings.rules[ruleName];\n\n            if (!$.isFunction(ruleFunction)) {\n              module.error(error.noRule, ruleName);\n              return;\n            } // cast to string avoiding encoding special values\n\n\n            value = value === undefined || value === '' || value === null ? '' : $.trim(value + '');\n            return ruleFunction.call($field, value, ancillary);\n          }\n        },\n        setting: function setting(name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, _settings, name);\n          } else if (value !== undefined) {\n            _settings[name] = value;\n          } else {\n            return _settings[name];\n          }\n        },\n        internal: function internal(name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, module, name);\n          } else if (value !== undefined) {\n            module[name] = value;\n          } else {\n            return module[name];\n          }\n        },\n        debug: function debug() {\n          if (!_settings.silent && _settings.debug) {\n            if (_settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, _settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function verbose() {\n          if (!_settings.silent && _settings.verbose && _settings.debug) {\n            if (_settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, _settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function error() {\n          if (!_settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, _settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function log(message) {\n            var currentTime, executionTime, previousTime;\n\n            if (_settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                'Element': element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 500);\n          },\n          display: function display() {\n            var title = _settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ($allModules.length > 1) {\n              title += ' ' + '(' + $allModules.length + ')';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        invoke: function invoke(query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found;\n        }\n      };\n      module.initialize();\n    });\n    return returnedValue !== undefined ? returnedValue : this;\n  };\n\n  $.fn.form.settings = {\n    name: 'Form',\n    namespace: 'form',\n    debug: false,\n    verbose: false,\n    performance: true,\n    fields: false,\n    keyboardShortcuts: true,\n    on: 'submit',\n    inline: false,\n    delay: 200,\n    revalidate: true,\n    transition: 'scale',\n    duration: 200,\n    onValid: function onValid() {},\n    onInvalid: function onInvalid() {},\n    onSuccess: function onSuccess() {\n      return true;\n    },\n    onFailure: function onFailure() {\n      return false;\n    },\n    metadata: {\n      defaultValue: 'default',\n      validate: 'validate'\n    },\n    regExp: {\n      htmlID: /^[a-zA-Z][\\w:.-]*$/g,\n      bracket: /\\[(.*)\\]/i,\n      decimal: /^\\d+\\.?\\d*$/,\n      email: /^[a-z0-9!#$%&'*+\\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i,\n      escape: /[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g,\n      flags: /^\\/(.*)\\/(.*)?/,\n      integer: /^\\-?\\d+$/,\n      number: /^\\-?\\d*(\\.\\d+)?$/,\n      url: /(https?:\\/\\/(?:www\\.|(?!www))[^\\s\\.]+\\.[^\\s]{2,}|www\\.[^\\s]+\\.[^\\s]{2,})/i\n    },\n    text: {\n      unspecifiedRule: 'Please enter a valid value',\n      unspecifiedField: 'This field'\n    },\n    prompt: {\n      empty: '{name} must have a value',\n      checked: '{name} must be checked',\n      email: '{name} must be a valid e-mail',\n      url: '{name} must be a valid url',\n      regExp: '{name} is not formatted correctly',\n      integer: '{name} must be an integer',\n      decimal: '{name} must be a decimal number',\n      number: '{name} must be set to a number',\n      is: '{name} must be \"{ruleValue}\"',\n      isExactly: '{name} must be exactly \"{ruleValue}\"',\n      not: '{name} cannot be set to \"{ruleValue}\"',\n      notExactly: '{name} cannot be set to exactly \"{ruleValue}\"',\n      contain: '{name} must contain \"{ruleValue}\"',\n      containExactly: '{name} must contain exactly \"{ruleValue}\"',\n      doesntContain: '{name} cannot contain  \"{ruleValue}\"',\n      doesntContainExactly: '{name} cannot contain exactly \"{ruleValue}\"',\n      minLength: '{name} must be at least {ruleValue} characters',\n      length: '{name} must be at least {ruleValue} characters',\n      exactLength: '{name} must be exactly {ruleValue} characters',\n      maxLength: '{name} cannot be longer than {ruleValue} characters',\n      match: '{name} must match {ruleValue} field',\n      different: '{name} must have a different value than {ruleValue} field',\n      creditCard: '{name} must be a valid credit card number',\n      minCount: '{name} must have at least {ruleValue} choices',\n      exactCount: '{name} must have exactly {ruleValue} choices',\n      maxCount: '{name} must have {ruleValue} or less choices'\n    },\n    selector: {\n      checkbox: 'input[type=\"checkbox\"], input[type=\"radio\"]',\n      clear: '.clear',\n      field: 'input, textarea, select',\n      group: '.field',\n      input: 'input',\n      message: '.error.message',\n      prompt: '.prompt.label',\n      radio: 'input[type=\"radio\"]',\n      reset: '.reset:not([type=\"reset\"])',\n      submit: '.submit:not([type=\"submit\"])',\n      uiCheckbox: '.ui.checkbox',\n      uiDropdown: '.ui.dropdown'\n    },\n    className: {\n      error: 'error',\n      label: 'ui prompt label',\n      pressed: 'down',\n      success: 'success'\n    },\n    error: {\n      identifier: 'You must specify a string identifier for each field',\n      method: 'The method you called is not defined.',\n      noRule: 'There is no rule matching the one you specified',\n      oldSyntax: 'Starting in 2.0 forms now only take a single settings object. Validation settings converted to new syntax automatically.'\n    },\n    templates: {\n      // template that produces error message\n      error: function error(errors) {\n        var html = '<ul class=\"list\">';\n        $.each(errors, function (index, value) {\n          html += '<li>' + value + '</li>';\n        });\n        html += '</ul>';\n        return $(html);\n      },\n      // template that produces label\n      prompt: function prompt(errors) {\n        return $('<div/>').addClass('ui basic red pointing prompt label').html(errors[0]);\n      }\n    },\n    rules: {\n      // is not empty or blank string\n      empty: function empty(value) {\n        return !(value === undefined || '' === value || $.isArray(value) && value.length === 0);\n      },\n      // checkbox checked\n      checked: function checked() {\n        return $(this).filter(':checked').length > 0;\n      },\n      // is most likely an email\n      email: function email(value) {\n        return $.fn.form.settings.regExp.email.test(value);\n      },\n      // value is most likely url\n      url: function url(value) {\n        return $.fn.form.settings.regExp.url.test(value);\n      },\n      // matches specified regExp\n      regExp: function regExp(value, _regExp) {\n        if (_regExp instanceof RegExp) {\n          return value.match(_regExp);\n        }\n\n        var regExpParts = _regExp.match($.fn.form.settings.regExp.flags),\n            flags; // regular expression specified as /baz/gi (flags)\n\n\n        if (regExpParts) {\n          _regExp = regExpParts.length >= 2 ? regExpParts[1] : _regExp;\n          flags = regExpParts.length >= 3 ? regExpParts[2] : '';\n        }\n\n        return value.match(new RegExp(_regExp, flags));\n      },\n      // is valid integer or matches range\n      integer: function integer(value, range) {\n        var intRegExp = $.fn.form.settings.regExp.integer,\n            min,\n            max,\n            parts;\n\n        if (!range || ['', '..'].indexOf(range) !== -1) {// do nothing\n        } else if (range.indexOf('..') == -1) {\n          if (intRegExp.test(range)) {\n            min = max = range - 0;\n          }\n        } else {\n          parts = range.split('..', 2);\n\n          if (intRegExp.test(parts[0])) {\n            min = parts[0] - 0;\n          }\n\n          if (intRegExp.test(parts[1])) {\n            max = parts[1] - 0;\n          }\n        }\n\n        return intRegExp.test(value) && (min === undefined || value >= min) && (max === undefined || value <= max);\n      },\n      // is valid number (with decimal)\n      decimal: function decimal(value) {\n        return $.fn.form.settings.regExp.decimal.test(value);\n      },\n      // is valid number\n      number: function number(value) {\n        return $.fn.form.settings.regExp.number.test(value);\n      },\n      // is value (case insensitive)\n      is: function is(value, text) {\n        text = typeof text == 'string' ? text.toLowerCase() : text;\n        value = typeof value == 'string' ? value.toLowerCase() : value;\n        return value == text;\n      },\n      // is value\n      isExactly: function isExactly(value, text) {\n        return value == text;\n      },\n      // value is not another value (case insensitive)\n      not: function not(value, notValue) {\n        value = typeof value == 'string' ? value.toLowerCase() : value;\n        notValue = typeof notValue == 'string' ? notValue.toLowerCase() : notValue;\n        return value != notValue;\n      },\n      // value is not another value (case sensitive)\n      notExactly: function notExactly(value, notValue) {\n        return value != notValue;\n      },\n      // value contains text (insensitive)\n      contains: function contains(value, text) {\n        // escape regex characters\n        text = text.replace($.fn.form.settings.regExp.escape, \"\\\\$&\");\n        return value.search(new RegExp(text, 'i')) !== -1;\n      },\n      // value contains text (case sensitive)\n      containsExactly: function containsExactly(value, text) {\n        // escape regex characters\n        text = text.replace($.fn.form.settings.regExp.escape, \"\\\\$&\");\n        return value.search(new RegExp(text)) !== -1;\n      },\n      // value contains text (insensitive)\n      doesntContain: function doesntContain(value, text) {\n        // escape regex characters\n        text = text.replace($.fn.form.settings.regExp.escape, \"\\\\$&\");\n        return value.search(new RegExp(text, 'i')) === -1;\n      },\n      // value contains text (case sensitive)\n      doesntContainExactly: function doesntContainExactly(value, text) {\n        // escape regex characters\n        text = text.replace($.fn.form.settings.regExp.escape, \"\\\\$&\");\n        return value.search(new RegExp(text)) === -1;\n      },\n      // is at least string length\n      minLength: function minLength(value, requiredLength) {\n        return value !== undefined ? value.length >= requiredLength : false;\n      },\n      // see rls notes for 2.0.6 (this is a duplicate of minLength)\n      length: function length(value, requiredLength) {\n        return value !== undefined ? value.length >= requiredLength : false;\n      },\n      // is exactly length\n      exactLength: function exactLength(value, requiredLength) {\n        return value !== undefined ? value.length == requiredLength : false;\n      },\n      // is less than length\n      maxLength: function maxLength(value, _maxLength) {\n        return value !== undefined ? value.length <= _maxLength : false;\n      },\n      // matches another field\n      match: function match(value, identifier) {\n        var $form = $(this),\n            matchingValue;\n\n        if ($('[data-validate=\"' + identifier + '\"]').length > 0) {\n          matchingValue = $('[data-validate=\"' + identifier + '\"]').val();\n        } else if ($('#' + identifier).length > 0) {\n          matchingValue = $('#' + identifier).val();\n        } else if ($('[name=\"' + identifier + '\"]').length > 0) {\n          matchingValue = $('[name=\"' + identifier + '\"]').val();\n        } else if ($('[name=\"' + identifier + '[]\"]').length > 0) {\n          matchingValue = $('[name=\"' + identifier + '[]\"]');\n        }\n\n        return matchingValue !== undefined ? value.toString() == matchingValue.toString() : false;\n      },\n      // different than another field\n      different: function different(value, identifier) {\n        // use either id or name of field\n        var $form = $(this),\n            matchingValue;\n\n        if ($('[data-validate=\"' + identifier + '\"]').length > 0) {\n          matchingValue = $('[data-validate=\"' + identifier + '\"]').val();\n        } else if ($('#' + identifier).length > 0) {\n          matchingValue = $('#' + identifier).val();\n        } else if ($('[name=\"' + identifier + '\"]').length > 0) {\n          matchingValue = $('[name=\"' + identifier + '\"]').val();\n        } else if ($('[name=\"' + identifier + '[]\"]').length > 0) {\n          matchingValue = $('[name=\"' + identifier + '[]\"]');\n        }\n\n        return matchingValue !== undefined ? value.toString() !== matchingValue.toString() : false;\n      },\n      creditCard: function creditCard(cardNumber, cardTypes) {\n        var cards = {\n          visa: {\n            pattern: /^4/,\n            length: [16]\n          },\n          amex: {\n            pattern: /^3[47]/,\n            length: [15]\n          },\n          mastercard: {\n            pattern: /^5[1-5]/,\n            length: [16]\n          },\n          discover: {\n            pattern: /^(6011|622(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2}|9[0-1][0-9]|92[0-5]|64[4-9])|65)/,\n            length: [16]\n          },\n          unionPay: {\n            pattern: /^(62|88)/,\n            length: [16, 17, 18, 19]\n          },\n          jcb: {\n            pattern: /^35(2[89]|[3-8][0-9])/,\n            length: [16]\n          },\n          maestro: {\n            pattern: /^(5018|5020|5038|6304|6759|676[1-3])/,\n            length: [12, 13, 14, 15, 16, 17, 18, 19]\n          },\n          dinersClub: {\n            pattern: /^(30[0-5]|^36)/,\n            length: [14]\n          },\n          laser: {\n            pattern: /^(6304|670[69]|6771)/,\n            length: [16, 17, 18, 19]\n          },\n          visaElectron: {\n            pattern: /^(4026|417500|4508|4844|491(3|7))/,\n            length: [16]\n          }\n        },\n            valid = {},\n            validCard = false,\n            requiredTypes = typeof cardTypes == 'string' ? cardTypes.split(',') : false,\n            unionPay,\n            validation;\n\n        if (typeof cardNumber !== 'string' || cardNumber.length === 0) {\n          return;\n        } // allow dashes in card\n\n\n        cardNumber = cardNumber.replace(/[\\-]/g, ''); // verify card types\n\n        if (requiredTypes) {\n          $.each(requiredTypes, function (index, type) {\n            // verify each card type\n            validation = cards[type];\n\n            if (validation) {\n              valid = {\n                length: $.inArray(cardNumber.length, validation.length) !== -1,\n                pattern: cardNumber.search(validation.pattern) !== -1\n              };\n\n              if (valid.length && valid.pattern) {\n                validCard = true;\n              }\n            }\n          });\n\n          if (!validCard) {\n            return false;\n          }\n        } // skip luhn for UnionPay\n\n\n        unionPay = {\n          number: $.inArray(cardNumber.length, cards.unionPay.length) !== -1,\n          pattern: cardNumber.search(cards.unionPay.pattern) !== -1\n        };\n\n        if (unionPay.number && unionPay.pattern) {\n          return true;\n        } // verify luhn, adapted from  <https://gist.github.com/2134376>\n\n\n        var length = cardNumber.length,\n            multiple = 0,\n            producedValue = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 2, 4, 6, 8, 1, 3, 5, 7, 9]],\n            sum = 0;\n\n        while (length--) {\n          sum += producedValue[multiple][parseInt(cardNumber.charAt(length), 10)];\n          multiple ^= 1;\n        }\n\n        return sum % 10 === 0 && sum > 0;\n      },\n      minCount: function minCount(value, _minCount) {\n        if (_minCount == 0) {\n          return true;\n        }\n\n        if (_minCount == 1) {\n          return value !== '';\n        }\n\n        return value.split(',').length >= _minCount;\n      },\n      exactCount: function exactCount(value, _exactCount) {\n        if (_exactCount == 0) {\n          return value === '';\n        }\n\n        if (_exactCount == 1) {\n          return value !== '' && value.search(',') === -1;\n        }\n\n        return value.split(',').length == _exactCount;\n      },\n      maxCount: function maxCount(value, _maxCount) {\n        if (_maxCount == 0) {\n          return false;\n        }\n\n        if (_maxCount == 1) {\n          return value.search(',') === -1;\n        }\n\n        return value.split(',').length <= _maxCount;\n      }\n    }\n  };\n})(jQuery, window, document);","map":null,"metadata":{},"sourceType":"module"}