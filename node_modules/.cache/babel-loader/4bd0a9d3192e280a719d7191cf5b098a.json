{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\n * # Semantic UI - Dimmer\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.fn.dimmer = function (parameters) {\n    var $allModules = $(this),\n        time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        returnedValue;\n    $allModules.each(function () {\n      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.dimmer.settings, parameters) : $.extend({}, $.fn.dimmer.settings),\n          selector = settings.selector,\n          namespace = settings.namespace,\n          className = settings.className,\n          error = settings.error,\n          eventNamespace = '.' + namespace,\n          moduleNamespace = 'module-' + namespace,\n          moduleSelector = $allModules.selector || '',\n          clickEvent = 'ontouchstart' in document.documentElement ? 'touchstart' : 'click',\n          $module = $(this),\n          $dimmer,\n          $dimmable,\n          element = this,\n          instance = $module.data(moduleNamespace),\n          module;\n      module = {\n        preinitialize: function preinitialize() {\n          if (module.is.dimmer()) {\n            $dimmable = $module.parent();\n            $dimmer = $module;\n          } else {\n            $dimmable = $module;\n\n            if (module.has.dimmer()) {\n              if (settings.dimmerName) {\n                $dimmer = $dimmable.find(selector.dimmer).filter('.' + settings.dimmerName);\n              } else {\n                $dimmer = $dimmable.find(selector.dimmer);\n              }\n            } else {\n              $dimmer = module.create();\n            }\n          }\n        },\n        initialize: function initialize() {\n          module.debug('Initializing dimmer', settings);\n          module.bind.events();\n          module.set.dimmable();\n          module.instantiate();\n        },\n        instantiate: function instantiate() {\n          module.verbose('Storing instance of module', module);\n          instance = module;\n          $module.data(moduleNamespace, instance);\n        },\n        destroy: function destroy() {\n          module.verbose('Destroying previous module', $dimmer);\n          module.unbind.events();\n          module.remove.variation();\n          $dimmable.off(eventNamespace);\n        },\n        bind: {\n          events: function events() {\n            if (settings.on == 'hover') {\n              $dimmable.on('mouseenter' + eventNamespace, module.show).on('mouseleave' + eventNamespace, module.hide);\n            } else if (settings.on == 'click') {\n              $dimmable.on(clickEvent + eventNamespace, module.toggle);\n            }\n\n            if (module.is.page()) {\n              module.debug('Setting as a page dimmer', $dimmable);\n              module.set.pageDimmer();\n            }\n\n            if (module.is.closable()) {\n              module.verbose('Adding dimmer close event', $dimmer);\n              $dimmable.on(clickEvent + eventNamespace, selector.dimmer, module.event.click);\n            }\n          }\n        },\n        unbind: {\n          events: function events() {\n            $module.removeData(moduleNamespace);\n            $dimmable.off(eventNamespace);\n          }\n        },\n        event: {\n          click: function click(event) {\n            module.verbose('Determining if event occured on dimmer', event);\n\n            if ($dimmer.find(event.target).length === 0 || $(event.target).is(selector.content)) {\n              module.hide();\n              event.stopImmediatePropagation();\n            }\n          }\n        },\n        addContent: function addContent(element) {\n          var $content = $(element);\n          module.debug('Add content to dimmer', $content);\n\n          if ($content.parent()[0] !== $dimmer[0]) {\n            $content.detach().appendTo($dimmer);\n          }\n        },\n        create: function create() {\n          var $element = $(settings.template.dimmer());\n\n          if (settings.dimmerName) {\n            module.debug('Creating named dimmer', settings.dimmerName);\n            $element.addClass(settings.dimmerName);\n          }\n\n          $element.appendTo($dimmable);\n          return $element;\n        },\n        show: function show(callback) {\n          callback = $.isFunction(callback) ? callback : function () {};\n          module.debug('Showing dimmer', $dimmer, settings);\n          module.set.variation();\n\n          if ((!module.is.dimmed() || module.is.animating()) && module.is.enabled()) {\n            module.animate.show(callback);\n            settings.onShow.call(element);\n            settings.onChange.call(element);\n          } else {\n            module.debug('Dimmer is already shown or disabled');\n          }\n        },\n        hide: function hide(callback) {\n          callback = $.isFunction(callback) ? callback : function () {};\n\n          if (module.is.dimmed() || module.is.animating()) {\n            module.debug('Hiding dimmer', $dimmer);\n            module.animate.hide(callback);\n            settings.onHide.call(element);\n            settings.onChange.call(element);\n          } else {\n            module.debug('Dimmer is not visible');\n          }\n        },\n        toggle: function toggle() {\n          module.verbose('Toggling dimmer visibility', $dimmer);\n\n          if (!module.is.dimmed()) {\n            module.show();\n          } else {\n            module.hide();\n          }\n        },\n        animate: {\n          show: function show(callback) {\n            callback = $.isFunction(callback) ? callback : function () {};\n\n            if (settings.useCSS && $.fn.transition !== undefined && $dimmer.transition('is supported')) {\n              if (settings.useFlex) {\n                module.debug('Using flex dimmer');\n                module.remove.legacy();\n              } else {\n                module.debug('Using legacy non-flex dimmer');\n                module.set.legacy();\n              }\n\n              if (settings.opacity !== 'auto') {\n                module.set.opacity();\n              }\n\n              $dimmer.transition({\n                displayType: settings.useFlex ? 'flex' : 'block',\n                animation: settings.transition + ' in',\n                queue: false,\n                duration: module.get.duration(),\n                useFailSafe: true,\n                onStart: function onStart() {\n                  module.set.dimmed();\n                },\n                onComplete: function onComplete() {\n                  module.set.active();\n                  callback();\n                }\n              });\n            } else {\n              module.verbose('Showing dimmer animation with javascript');\n              module.set.dimmed();\n\n              if (settings.opacity == 'auto') {\n                settings.opacity = 0.8;\n              }\n\n              $dimmer.stop().css({\n                opacity: 0,\n                width: '100%',\n                height: '100%'\n              }).fadeTo(module.get.duration(), settings.opacity, function () {\n                $dimmer.removeAttr('style');\n                module.set.active();\n                callback();\n              });\n            }\n          },\n          hide: function hide(callback) {\n            callback = $.isFunction(callback) ? callback : function () {};\n\n            if (settings.useCSS && $.fn.transition !== undefined && $dimmer.transition('is supported')) {\n              module.verbose('Hiding dimmer with css');\n              $dimmer.transition({\n                displayType: settings.useFlex ? 'flex' : 'block',\n                animation: settings.transition + ' out',\n                queue: false,\n                duration: module.get.duration(),\n                useFailSafe: true,\n                onStart: function onStart() {\n                  module.remove.dimmed();\n                },\n                onComplete: function onComplete() {\n                  module.remove.variation();\n                  module.remove.active();\n                  callback();\n                }\n              });\n            } else {\n              module.verbose('Hiding dimmer with javascript');\n              module.remove.dimmed();\n              $dimmer.stop().fadeOut(module.get.duration(), function () {\n                module.remove.active();\n                $dimmer.removeAttr('style');\n                callback();\n              });\n            }\n          }\n        },\n        get: {\n          dimmer: function dimmer() {\n            return $dimmer;\n          },\n          duration: function duration() {\n            if (_typeof(settings.duration) == 'object') {\n              if (module.is.active()) {\n                return settings.duration.hide;\n              } else {\n                return settings.duration.show;\n              }\n            }\n\n            return settings.duration;\n          }\n        },\n        has: {\n          dimmer: function dimmer() {\n            if (settings.dimmerName) {\n              return $module.find(selector.dimmer).filter('.' + settings.dimmerName).length > 0;\n            } else {\n              return $module.find(selector.dimmer).length > 0;\n            }\n          }\n        },\n        is: {\n          active: function active() {\n            return $dimmer.hasClass(className.active);\n          },\n          animating: function animating() {\n            return $dimmer.is(':animated') || $dimmer.hasClass(className.animating);\n          },\n          closable: function closable() {\n            if (settings.closable == 'auto') {\n              if (settings.on == 'hover') {\n                return false;\n              }\n\n              return true;\n            }\n\n            return settings.closable;\n          },\n          dimmer: function dimmer() {\n            return $module.hasClass(className.dimmer);\n          },\n          dimmable: function dimmable() {\n            return $module.hasClass(className.dimmable);\n          },\n          dimmed: function dimmed() {\n            return $dimmable.hasClass(className.dimmed);\n          },\n          disabled: function disabled() {\n            return $dimmable.hasClass(className.disabled);\n          },\n          enabled: function enabled() {\n            return !module.is.disabled();\n          },\n          page: function page() {\n            return $dimmable.is('body');\n          },\n          pageDimmer: function pageDimmer() {\n            return $dimmer.hasClass(className.pageDimmer);\n          }\n        },\n        can: {\n          show: function show() {\n            return !$dimmer.hasClass(className.disabled);\n          }\n        },\n        set: {\n          opacity: function opacity(_opacity) {\n            var color = $dimmer.css('background-color'),\n                colorArray = color.split(','),\n                isRGB = colorArray && colorArray.length == 3,\n                isRGBA = colorArray && colorArray.length == 4;\n            _opacity = settings.opacity === 0 ? 0 : settings.opacity || _opacity;\n\n            if (isRGB || isRGBA) {\n              colorArray[3] = _opacity + ')';\n              color = colorArray.join(',');\n            } else {\n              color = 'rgba(0, 0, 0, ' + _opacity + ')';\n            }\n\n            module.debug('Setting opacity to', _opacity);\n            $dimmer.css('background-color', color);\n          },\n          legacy: function legacy() {\n            $dimmer.addClass(className.legacy);\n          },\n          active: function active() {\n            $dimmer.addClass(className.active);\n          },\n          dimmable: function dimmable() {\n            $dimmable.addClass(className.dimmable);\n          },\n          dimmed: function dimmed() {\n            $dimmable.addClass(className.dimmed);\n          },\n          pageDimmer: function pageDimmer() {\n            $dimmer.addClass(className.pageDimmer);\n          },\n          disabled: function disabled() {\n            $dimmer.addClass(className.disabled);\n          },\n          variation: function variation(_variation) {\n            _variation = _variation || settings.variation;\n\n            if (_variation) {\n              $dimmer.addClass(_variation);\n            }\n          }\n        },\n        remove: {\n          active: function active() {\n            $dimmer.removeClass(className.active);\n          },\n          legacy: function legacy() {\n            $dimmer.removeClass(className.legacy);\n          },\n          dimmed: function dimmed() {\n            $dimmable.removeClass(className.dimmed);\n          },\n          disabled: function disabled() {\n            $dimmer.removeClass(className.disabled);\n          },\n          variation: function variation(_variation2) {\n            _variation2 = _variation2 || settings.variation;\n\n            if (_variation2) {\n              $dimmer.removeClass(_variation2);\n            }\n          }\n        },\n        setting: function setting(name, value) {\n          module.debug('Changing setting', name, value);\n\n          if ($.isPlainObject(name)) {\n            $.extend(true, settings, name);\n          } else if (value !== undefined) {\n            if ($.isPlainObject(settings[name])) {\n              $.extend(true, settings[name], value);\n            } else {\n              settings[name] = value;\n            }\n          } else {\n            return settings[name];\n          }\n        },\n        internal: function internal(name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, module, name);\n          } else if (value !== undefined) {\n            module[name] = value;\n          } else {\n            return module[name];\n          }\n        },\n        debug: function debug() {\n          if (!settings.silent && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function verbose() {\n          if (!settings.silent && settings.verbose && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function error() {\n          if (!settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function log(message) {\n            var currentTime, executionTime, previousTime;\n\n            if (settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                'Element': element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 500);\n          },\n          display: function display() {\n            var title = settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ($allModules.length > 1) {\n              title += ' ' + '(' + $allModules.length + ')';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        invoke: function invoke(query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                module.error(error.method, query);\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found;\n        }\n      };\n      module.preinitialize();\n\n      if (methodInvoked) {\n        if (instance === undefined) {\n          module.initialize();\n        }\n\n        module.invoke(query);\n      } else {\n        if (instance !== undefined) {\n          instance.invoke('destroy');\n        }\n\n        module.initialize();\n      }\n    });\n    return returnedValue !== undefined ? returnedValue : this;\n  };\n\n  $.fn.dimmer.settings = {\n    name: 'Dimmer',\n    namespace: 'dimmer',\n    silent: false,\n    debug: false,\n    verbose: false,\n    performance: true,\n    // whether should use flex layout\n    useFlex: true,\n    // name to distinguish between multiple dimmers in context\n    dimmerName: false,\n    // whether to add a variation type\n    variation: false,\n    // whether to bind close events\n    closable: 'auto',\n    // whether to use css animations\n    useCSS: true,\n    // css animation to use\n    transition: 'fade',\n    // event to bind to\n    on: false,\n    // overriding opacity value\n    opacity: 'auto',\n    // transition durations\n    duration: {\n      show: 500,\n      hide: 500\n    },\n    onChange: function onChange() {},\n    onShow: function onShow() {},\n    onHide: function onHide() {},\n    error: {\n      method: 'The method you called is not defined.'\n    },\n    className: {\n      active: 'active',\n      animating: 'animating',\n      dimmable: 'dimmable',\n      dimmed: 'dimmed',\n      dimmer: 'dimmer',\n      disabled: 'disabled',\n      hide: 'hide',\n      legacy: 'legacy',\n      pageDimmer: 'page',\n      show: 'show'\n    },\n    selector: {\n      dimmer: '> .ui.dimmer',\n      content: '.ui.dimmer > .content, .ui.dimmer > .content > .center'\n    },\n    template: {\n      dimmer: function dimmer() {\n        return $('<div />').attr('class', 'ui dimmer');\n      }\n    }\n  };\n})(jQuery, window, document);","map":null,"metadata":{},"sourceType":"module"}