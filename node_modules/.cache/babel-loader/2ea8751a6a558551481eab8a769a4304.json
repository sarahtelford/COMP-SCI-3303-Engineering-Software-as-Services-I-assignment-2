{"ast":null,"code":"/*!\n * # Semantic UI - Colorize\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n;\n\n(function ($, window, document, undefined) {\n  \"use strict\";\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.fn.colorize = function (parameters) {\n    var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.colorize.settings, parameters) : $.extend({}, $.fn.colorize.settings),\n        // hoist arguments\n    moduleArguments = arguments || false;\n    $(this).each(function (instanceIndex) {\n      var $module = $(this),\n          mainCanvas = $('<canvas />')[0],\n          imageCanvas = $('<canvas />')[0],\n          overlayCanvas = $('<canvas />')[0],\n          backgroundImage = new Image(),\n          // defs\n      mainContext,\n          imageContext,\n          overlayContext,\n          _image,\n          imageName,\n          width,\n          height,\n          // shortcuts\n      _colors = settings.colors,\n          paths = settings.paths,\n          namespace = settings.namespace,\n          error = settings.error,\n          // boilerplate\n      instance = $module.data('module-' + namespace),\n          module;\n\n      module = {\n        checkPreconditions: function checkPreconditions() {\n          module.debug('Checking pre-conditions');\n\n          if (!$.isPlainObject(_colors) || $.isEmptyObject(_colors)) {\n            module.error(error.undefinedColors);\n            return false;\n          }\n\n          return true;\n        },\n        async: function async(callback) {\n          if (settings.async) {\n            setTimeout(callback, 0);\n          } else {\n            callback();\n          }\n        },\n        getMetadata: function getMetadata() {\n          module.debug('Grabbing metadata');\n          _image = $module.data('image') || settings.image || undefined;\n          imageName = $module.data('name') || settings.name || instanceIndex;\n          width = settings.width || $module.width();\n          height = settings.height || $module.height();\n\n          if (width === 0 || height === 0) {\n            module.error(error.undefinedSize);\n          }\n        },\n        initialize: function initialize() {\n          module.debug('Initializing with colors', _colors);\n\n          if (module.checkPreconditions()) {\n            module.async(function () {\n              module.getMetadata();\n              module.canvas.create();\n              module.draw.image(function () {\n                module.draw.colors();\n                module.canvas.merge();\n              });\n              $module.data('module-' + namespace, module);\n            });\n          }\n        },\n        redraw: function redraw() {\n          module.debug('Redrawing image');\n          module.async(function () {\n            module.canvas.clear();\n            module.draw.colors();\n            module.canvas.merge();\n          });\n        },\n        change: {\n          color: function color(colorName, _color) {\n            module.debug('Changing color', colorName);\n\n            if (_colors[colorName] === undefined) {\n              module.error(error.missingColor);\n              return false;\n            }\n\n            _colors[colorName] = _color;\n            module.redraw();\n          }\n        },\n        canvas: {\n          create: function create() {\n            module.debug('Creating canvases');\n            mainCanvas.width = width;\n            mainCanvas.height = height;\n            imageCanvas.width = width;\n            imageCanvas.height = height;\n            overlayCanvas.width = width;\n            overlayCanvas.height = height;\n            mainContext = mainCanvas.getContext('2d');\n            imageContext = imageCanvas.getContext('2d');\n            overlayContext = overlayCanvas.getContext('2d');\n            $module.append(mainCanvas);\n            mainContext = $module.children('canvas')[0].getContext('2d');\n          },\n          clear: function clear(context) {\n            module.debug('Clearing canvas');\n            overlayContext.fillStyle = '#FFFFFF';\n            overlayContext.fillRect(0, 0, width, height);\n          },\n          merge: function merge() {\n            if (!$.isFunction(mainContext.blendOnto)) {\n              module.error(error.missingPlugin);\n              return;\n            }\n\n            mainContext.putImageData(imageContext.getImageData(0, 0, width, height), 0, 0);\n            overlayContext.blendOnto(mainContext, 'multiply');\n          }\n        },\n        draw: {\n          image: function image(callback) {\n            module.debug('Drawing image');\n\n            callback = callback || function () {};\n\n            if (_image) {\n              backgroundImage.src = _image;\n\n              backgroundImage.onload = function () {\n                imageContext.drawImage(backgroundImage, 0, 0);\n                callback();\n              };\n            } else {\n              module.error(error.noImage);\n              callback();\n            }\n          },\n          colors: function colors() {\n            module.debug('Drawing color overlays', _colors);\n            $.each(_colors, function (colorName, color) {\n              settings.onDraw(overlayContext, imageName, colorName, color);\n            });\n          }\n        },\n        debug: function debug(message, variableName) {\n          if (settings.debug) {\n            if (variableName !== undefined) {\n              console.info(settings.name + ': ' + message, variableName);\n            } else {\n              console.info(settings.name + ': ' + message);\n            }\n          }\n        },\n        error: function error(errorMessage) {\n          console.warn(settings.name + ': ' + errorMessage);\n        },\n        invoke: function invoke(methodName, context, methodArguments) {\n          var method;\n          methodArguments = methodArguments || Array.prototype.slice.call(arguments, 2);\n\n          if (typeof methodName == 'string' && instance !== undefined) {\n            methodName = methodName.split('.');\n            $.each(methodName, function (index, name) {\n              if ($.isPlainObject(instance[name])) {\n                instance = instance[name];\n                return true;\n              } else if ($.isFunction(instance[name])) {\n                method = instance[name];\n                return true;\n              }\n\n              module.error(settings.error.method);\n              return false;\n            });\n          }\n\n          return $.isFunction(method) ? method.apply(context, methodArguments) : false;\n        }\n      };\n\n      if (instance !== undefined && moduleArguments) {\n        // simpler than invoke realizing to invoke itself (and losing scope due prototype.call()\n        if (moduleArguments[0] == 'invoke') {\n          moduleArguments = Array.prototype.slice.call(moduleArguments, 1);\n        }\n\n        return module.invoke(moduleArguments[0], this, Array.prototype.slice.call(moduleArguments, 1));\n      } // initializing\n\n\n      module.initialize();\n    });\n    return this;\n  };\n\n  $.fn.colorize.settings = {\n    name: 'Image Colorizer',\n    debug: true,\n    namespace: 'colorize',\n    onDraw: function onDraw(overlayContext, imageName, colorName, color) {},\n    // whether to block execution while updating canvas\n    async: true,\n    // object containing names and default values of color regions\n    colors: {},\n    metadata: {\n      image: 'image',\n      name: 'name'\n    },\n    error: {\n      noImage: 'No tracing image specified',\n      undefinedColors: 'No default colors specified.',\n      missingColor: 'Attempted to change color that does not exist',\n      missingPlugin: 'Blend onto plug-in must be included',\n      undefinedHeight: 'The width or height of image canvas could not be automatically determined. Please specify a height.'\n    }\n  };\n})(jQuery, window, document);","map":null,"metadata":{},"sourceType":"module"}