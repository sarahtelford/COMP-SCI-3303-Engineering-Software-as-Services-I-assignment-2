{"ast":null,"code":"/*!\n * # Semantic UI - Checkbox\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.fn.checkbox = function (parameters) {\n    var $allModules = $(this),\n        moduleSelector = $allModules.selector || '',\n        time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        returnedValue;\n    $allModules.each(function () {\n      var settings = $.extend(true, {}, $.fn.checkbox.settings, parameters),\n          className = settings.className,\n          namespace = settings.namespace,\n          selector = settings.selector,\n          error = settings.error,\n          eventNamespace = '.' + namespace,\n          moduleNamespace = 'module-' + namespace,\n          $module = $(this),\n          $label = $(this).children(selector.label),\n          $input = $(this).children(selector.input),\n          input = $input[0],\n          _initialLoad = false,\n          shortcutPressed = false,\n          instance = $module.data(moduleNamespace),\n          observer,\n          element = this,\n          module;\n      module = {\n        initialize: function initialize() {\n          module.verbose('Initializing checkbox', settings);\n          module.create.label();\n          module.bind.events();\n          module.set.tabbable();\n          module.hide.input();\n          module.observeChanges();\n          module.instantiate();\n          module.setup();\n        },\n        instantiate: function instantiate() {\n          module.verbose('Storing instance of module', module);\n          instance = module;\n          $module.data(moduleNamespace, module);\n        },\n        destroy: function destroy() {\n          module.verbose('Destroying module');\n          module.unbind.events();\n          module.show.input();\n          $module.removeData(moduleNamespace);\n        },\n        fix: {\n          reference: function reference() {\n            if ($module.is(selector.input)) {\n              module.debug('Behavior called on <input> adjusting invoked element');\n              $module = $module.closest(selector.checkbox);\n              module.refresh();\n            }\n          }\n        },\n        setup: function setup() {\n          module.set.initialLoad();\n\n          if (module.is.indeterminate()) {\n            module.debug('Initial value is indeterminate');\n            module.indeterminate();\n          } else if (module.is.checked()) {\n            module.debug('Initial value is checked');\n            module.check();\n          } else {\n            module.debug('Initial value is unchecked');\n            module.uncheck();\n          }\n\n          module.remove.initialLoad();\n        },\n        refresh: function refresh() {\n          $label = $module.children(selector.label);\n          $input = $module.children(selector.input);\n          input = $input[0];\n        },\n        hide: {\n          input: function input() {\n            module.verbose('Modifying <input> z-index to be unselectable');\n            $input.addClass(className.hidden);\n          }\n        },\n        show: {\n          input: function input() {\n            module.verbose('Modifying <input> z-index to be selectable');\n            $input.removeClass(className.hidden);\n          }\n        },\n        observeChanges: function observeChanges() {\n          if ('MutationObserver' in window) {\n            observer = new MutationObserver(function (mutations) {\n              module.debug('DOM tree modified, updating selector cache');\n              module.refresh();\n            });\n            observer.observe(element, {\n              childList: true,\n              subtree: true\n            });\n            module.debug('Setting up mutation observer', observer);\n          }\n        },\n        attachEvents: function attachEvents(selector, event) {\n          var $element = $(selector);\n          event = $.isFunction(module[event]) ? module[event] : module.toggle;\n\n          if ($element.length > 0) {\n            module.debug('Attaching checkbox events to element', selector, event);\n            $element.on('click' + eventNamespace, event);\n          } else {\n            module.error(error.notFound);\n          }\n        },\n        event: {\n          click: function click(event) {\n            var $target = $(event.target);\n\n            if ($target.is(selector.input)) {\n              module.verbose('Using default check action on initialized checkbox');\n              return;\n            }\n\n            if ($target.is(selector.link)) {\n              module.debug('Clicking link inside checkbox, skipping toggle');\n              return;\n            }\n\n            module.toggle();\n            $input.focus();\n            event.preventDefault();\n          },\n          keydown: function keydown(event) {\n            var key = event.which,\n                keyCode = {\n              enter: 13,\n              space: 32,\n              escape: 27\n            };\n\n            if (key == keyCode.escape) {\n              module.verbose('Escape key pressed blurring field');\n              $input.blur();\n              shortcutPressed = true;\n            } else if (!event.ctrlKey && (key == keyCode.space || key == keyCode.enter)) {\n              module.verbose('Enter/space key pressed, toggling checkbox');\n              module.toggle();\n              shortcutPressed = true;\n            } else {\n              shortcutPressed = false;\n            }\n          },\n          keyup: function keyup(event) {\n            if (shortcutPressed) {\n              event.preventDefault();\n            }\n          }\n        },\n        check: function check() {\n          if (!module.should.allowCheck()) {\n            return;\n          }\n\n          module.debug('Checking checkbox', $input);\n          module.set.checked();\n\n          if (!module.should.ignoreCallbacks()) {\n            settings.onChecked.call(input);\n            settings.onChange.call(input);\n          }\n        },\n        uncheck: function uncheck() {\n          if (!module.should.allowUncheck()) {\n            return;\n          }\n\n          module.debug('Unchecking checkbox');\n          module.set.unchecked();\n\n          if (!module.should.ignoreCallbacks()) {\n            settings.onUnchecked.call(input);\n            settings.onChange.call(input);\n          }\n        },\n        indeterminate: function indeterminate() {\n          if (module.should.allowIndeterminate()) {\n            module.debug('Checkbox is already indeterminate');\n            return;\n          }\n\n          module.debug('Making checkbox indeterminate');\n          module.set.indeterminate();\n\n          if (!module.should.ignoreCallbacks()) {\n            settings.onIndeterminate.call(input);\n            settings.onChange.call(input);\n          }\n        },\n        determinate: function determinate() {\n          if (module.should.allowDeterminate()) {\n            module.debug('Checkbox is already determinate');\n            return;\n          }\n\n          module.debug('Making checkbox determinate');\n          module.set.determinate();\n\n          if (!module.should.ignoreCallbacks()) {\n            settings.onDeterminate.call(input);\n            settings.onChange.call(input);\n          }\n        },\n        enable: function enable() {\n          if (module.is.enabled()) {\n            module.debug('Checkbox is already enabled');\n            return;\n          }\n\n          module.debug('Enabling checkbox');\n          module.set.enabled();\n          settings.onEnable.call(input); // preserve legacy callbacks\n\n          settings.onEnabled.call(input);\n        },\n        disable: function disable() {\n          if (module.is.disabled()) {\n            module.debug('Checkbox is already disabled');\n            return;\n          }\n\n          module.debug('Disabling checkbox');\n          module.set.disabled();\n          settings.onDisable.call(input); // preserve legacy callbacks\n\n          settings.onDisabled.call(input);\n        },\n        get: {\n          radios: function radios() {\n            var name = module.get.name();\n            return $('input[name=\"' + name + '\"]').closest(selector.checkbox);\n          },\n          otherRadios: function otherRadios() {\n            return module.get.radios().not($module);\n          },\n          name: function name() {\n            return $input.attr('name');\n          }\n        },\n        is: {\n          initialLoad: function initialLoad() {\n            return _initialLoad;\n          },\n          radio: function radio() {\n            return $input.hasClass(className.radio) || $input.attr('type') == 'radio';\n          },\n          indeterminate: function indeterminate() {\n            return $input.prop('indeterminate') !== undefined && $input.prop('indeterminate');\n          },\n          checked: function checked() {\n            return $input.prop('checked') !== undefined && $input.prop('checked');\n          },\n          disabled: function disabled() {\n            return $input.prop('disabled') !== undefined && $input.prop('disabled');\n          },\n          enabled: function enabled() {\n            return !module.is.disabled();\n          },\n          determinate: function determinate() {\n            return !module.is.indeterminate();\n          },\n          unchecked: function unchecked() {\n            return !module.is.checked();\n          }\n        },\n        should: {\n          allowCheck: function allowCheck() {\n            if (module.is.determinate() && module.is.checked() && !module.should.forceCallbacks()) {\n              module.debug('Should not allow check, checkbox is already checked');\n              return false;\n            }\n\n            if (settings.beforeChecked.apply(input) === false) {\n              module.debug('Should not allow check, beforeChecked cancelled');\n              return false;\n            }\n\n            return true;\n          },\n          allowUncheck: function allowUncheck() {\n            if (module.is.determinate() && module.is.unchecked() && !module.should.forceCallbacks()) {\n              module.debug('Should not allow uncheck, checkbox is already unchecked');\n              return false;\n            }\n\n            if (settings.beforeUnchecked.apply(input) === false) {\n              module.debug('Should not allow uncheck, beforeUnchecked cancelled');\n              return false;\n            }\n\n            return true;\n          },\n          allowIndeterminate: function allowIndeterminate() {\n            if (module.is.indeterminate() && !module.should.forceCallbacks()) {\n              module.debug('Should not allow indeterminate, checkbox is already indeterminate');\n              return false;\n            }\n\n            if (settings.beforeIndeterminate.apply(input) === false) {\n              module.debug('Should not allow indeterminate, beforeIndeterminate cancelled');\n              return false;\n            }\n\n            return true;\n          },\n          allowDeterminate: function allowDeterminate() {\n            if (module.is.determinate() && !module.should.forceCallbacks()) {\n              module.debug('Should not allow determinate, checkbox is already determinate');\n              return false;\n            }\n\n            if (settings.beforeDeterminate.apply(input) === false) {\n              module.debug('Should not allow determinate, beforeDeterminate cancelled');\n              return false;\n            }\n\n            return true;\n          },\n          forceCallbacks: function forceCallbacks() {\n            return module.is.initialLoad() && settings.fireOnInit;\n          },\n          ignoreCallbacks: function ignoreCallbacks() {\n            return _initialLoad && !settings.fireOnInit;\n          }\n        },\n        can: {\n          change: function change() {\n            return !($module.hasClass(className.disabled) || $module.hasClass(className.readOnly) || $input.prop('disabled') || $input.prop('readonly'));\n          },\n          uncheck: function uncheck() {\n            return typeof settings.uncheckable === 'boolean' ? settings.uncheckable : !module.is.radio();\n          }\n        },\n        set: {\n          initialLoad: function initialLoad() {\n            _initialLoad = true;\n          },\n          checked: function checked() {\n            module.verbose('Setting class to checked');\n            $module.removeClass(className.indeterminate).addClass(className.checked);\n\n            if (module.is.radio()) {\n              module.uncheckOthers();\n            }\n\n            if (!module.is.indeterminate() && module.is.checked()) {\n              module.debug('Input is already checked, skipping input property change');\n              return;\n            }\n\n            module.verbose('Setting state to checked', input);\n            $input.prop('indeterminate', false).prop('checked', true);\n            module.trigger.change();\n          },\n          unchecked: function unchecked() {\n            module.verbose('Removing checked class');\n            $module.removeClass(className.indeterminate).removeClass(className.checked);\n\n            if (!module.is.indeterminate() && module.is.unchecked()) {\n              module.debug('Input is already unchecked');\n              return;\n            }\n\n            module.debug('Setting state to unchecked');\n            $input.prop('indeterminate', false).prop('checked', false);\n            module.trigger.change();\n          },\n          indeterminate: function indeterminate() {\n            module.verbose('Setting class to indeterminate');\n            $module.addClass(className.indeterminate);\n\n            if (module.is.indeterminate()) {\n              module.debug('Input is already indeterminate, skipping input property change');\n              return;\n            }\n\n            module.debug('Setting state to indeterminate');\n            $input.prop('indeterminate', true);\n            module.trigger.change();\n          },\n          determinate: function determinate() {\n            module.verbose('Removing indeterminate class');\n            $module.removeClass(className.indeterminate);\n\n            if (module.is.determinate()) {\n              module.debug('Input is already determinate, skipping input property change');\n              return;\n            }\n\n            module.debug('Setting state to determinate');\n            $input.prop('indeterminate', false);\n          },\n          disabled: function disabled() {\n            module.verbose('Setting class to disabled');\n            $module.addClass(className.disabled);\n\n            if (module.is.disabled()) {\n              module.debug('Input is already disabled, skipping input property change');\n              return;\n            }\n\n            module.debug('Setting state to disabled');\n            $input.prop('disabled', 'disabled');\n            module.trigger.change();\n          },\n          enabled: function enabled() {\n            module.verbose('Removing disabled class');\n            $module.removeClass(className.disabled);\n\n            if (module.is.enabled()) {\n              module.debug('Input is already enabled, skipping input property change');\n              return;\n            }\n\n            module.debug('Setting state to enabled');\n            $input.prop('disabled', false);\n            module.trigger.change();\n          },\n          tabbable: function tabbable() {\n            module.verbose('Adding tabindex to checkbox');\n\n            if ($input.attr('tabindex') === undefined) {\n              $input.attr('tabindex', 0);\n            }\n          }\n        },\n        remove: {\n          initialLoad: function initialLoad() {\n            _initialLoad = false;\n          }\n        },\n        trigger: {\n          change: function change() {\n            var events = document.createEvent('HTMLEvents'),\n                inputElement = $input[0];\n\n            if (inputElement) {\n              module.verbose('Triggering native change event');\n              events.initEvent('change', true, false);\n              inputElement.dispatchEvent(events);\n            }\n          }\n        },\n        create: {\n          label: function label() {\n            if ($input.prevAll(selector.label).length > 0) {\n              $input.prev(selector.label).detach().insertAfter($input);\n              module.debug('Moving existing label', $label);\n            } else if (!module.has.label()) {\n              $label = $('<label>').insertAfter($input);\n              module.debug('Creating label', $label);\n            }\n          }\n        },\n        has: {\n          label: function label() {\n            return $label.length > 0;\n          }\n        },\n        bind: {\n          events: function events() {\n            module.verbose('Attaching checkbox events');\n            $module.on('click' + eventNamespace, module.event.click).on('keydown' + eventNamespace, selector.input, module.event.keydown).on('keyup' + eventNamespace, selector.input, module.event.keyup);\n          }\n        },\n        unbind: {\n          events: function events() {\n            module.debug('Removing events');\n            $module.off(eventNamespace);\n          }\n        },\n        uncheckOthers: function uncheckOthers() {\n          var $radios = module.get.otherRadios();\n          module.debug('Unchecking other radios', $radios);\n          $radios.removeClass(className.checked);\n        },\n        toggle: function toggle() {\n          if (!module.can.change()) {\n            if (!module.is.radio()) {\n              module.debug('Checkbox is read-only or disabled, ignoring toggle');\n            }\n\n            return;\n          }\n\n          if (module.is.indeterminate() || module.is.unchecked()) {\n            module.debug('Currently unchecked');\n            module.check();\n          } else if (module.is.checked() && module.can.uncheck()) {\n            module.debug('Currently checked');\n            module.uncheck();\n          }\n        },\n        setting: function setting(name, value) {\n          module.debug('Changing setting', name, value);\n\n          if ($.isPlainObject(name)) {\n            $.extend(true, settings, name);\n          } else if (value !== undefined) {\n            if ($.isPlainObject(settings[name])) {\n              $.extend(true, settings[name], value);\n            } else {\n              settings[name] = value;\n            }\n          } else {\n            return settings[name];\n          }\n        },\n        internal: function internal(name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, module, name);\n          } else if (value !== undefined) {\n            module[name] = value;\n          } else {\n            return module[name];\n          }\n        },\n        debug: function debug() {\n          if (!settings.silent && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function verbose() {\n          if (!settings.silent && settings.verbose && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function error() {\n          if (!settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function log(message) {\n            var currentTime, executionTime, previousTime;\n\n            if (settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                'Element': element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 500);\n          },\n          display: function display() {\n            var title = settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        invoke: function invoke(query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                module.error(error.method, query);\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found;\n        }\n      };\n\n      if (methodInvoked) {\n        if (instance === undefined) {\n          module.initialize();\n        }\n\n        module.invoke(query);\n      } else {\n        if (instance !== undefined) {\n          instance.invoke('destroy');\n        }\n\n        module.initialize();\n      }\n    });\n    return returnedValue !== undefined ? returnedValue : this;\n  };\n\n  $.fn.checkbox.settings = {\n    name: 'Checkbox',\n    namespace: 'checkbox',\n    silent: false,\n    debug: false,\n    verbose: true,\n    performance: true,\n    // delegated event context\n    uncheckable: 'auto',\n    fireOnInit: false,\n    onChange: function onChange() {},\n    beforeChecked: function beforeChecked() {},\n    beforeUnchecked: function beforeUnchecked() {},\n    beforeDeterminate: function beforeDeterminate() {},\n    beforeIndeterminate: function beforeIndeterminate() {},\n    onChecked: function onChecked() {},\n    onUnchecked: function onUnchecked() {},\n    onDeterminate: function onDeterminate() {},\n    onIndeterminate: function onIndeterminate() {},\n    onEnable: function onEnable() {},\n    onDisable: function onDisable() {},\n    // preserve misspelled callbacks (will be removed in 3.0)\n    onEnabled: function onEnabled() {},\n    onDisabled: function onDisabled() {},\n    className: {\n      checked: 'checked',\n      indeterminate: 'indeterminate',\n      disabled: 'disabled',\n      hidden: 'hidden',\n      radio: 'radio',\n      readOnly: 'read-only'\n    },\n    error: {\n      method: 'The method you called is not defined'\n    },\n    selector: {\n      checkbox: '.ui.checkbox',\n      label: 'label, .box',\n      input: 'input[type=\"checkbox\"], input[type=\"radio\"]',\n      link: 'a[href]'\n    }\n  };\n})(jQuery, window, document);","map":null,"metadata":{},"sourceType":"module"}