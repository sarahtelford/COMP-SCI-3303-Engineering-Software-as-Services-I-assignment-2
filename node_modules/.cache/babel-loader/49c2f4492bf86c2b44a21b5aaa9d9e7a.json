{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\n * # Semantic UI - Search\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.fn.search = function (parameters) {\n    var $allModules = $(this),\n        moduleSelector = $allModules.selector || '',\n        time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        returnedValue;\n    $(this).each(function () {\n      var _settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.search.settings, parameters) : $.extend({}, $.fn.search.settings),\n          className = _settings.className,\n          metadata = _settings.metadata,\n          regExp = _settings.regExp,\n          fields = _settings.fields,\n          selector = _settings.selector,\n          error = _settings.error,\n          namespace = _settings.namespace,\n          eventNamespace = '.' + namespace,\n          moduleNamespace = namespace + '-module',\n          $module = $(this),\n          $prompt = $module.find(selector.prompt),\n          $searchButton = $module.find(selector.searchButton),\n          $results = $module.find(selector.results),\n          $result = $module.find(selector.result),\n          $category = $module.find(selector.category),\n          element = this,\n          instance = $module.data(moduleNamespace),\n          disabledBubbled = false,\n          resultsDismissed = false,\n          module;\n\n      module = {\n        initialize: function initialize() {\n          module.verbose('Initializing module');\n          module.get.settings();\n          module.determine.searchFields();\n          module.bind.events();\n          module.set.type();\n          module.create.results();\n          module.instantiate();\n        },\n        instantiate: function instantiate() {\n          module.verbose('Storing instance of module', module);\n          instance = module;\n          $module.data(moduleNamespace, module);\n        },\n        destroy: function destroy() {\n          module.verbose('Destroying instance');\n          $module.off(eventNamespace).removeData(moduleNamespace);\n        },\n        refresh: function refresh() {\n          module.debug('Refreshing selector cache');\n          $prompt = $module.find(selector.prompt);\n          $searchButton = $module.find(selector.searchButton);\n          $category = $module.find(selector.category);\n          $results = $module.find(selector.results);\n          $result = $module.find(selector.result);\n        },\n        refreshResults: function refreshResults() {\n          $results = $module.find(selector.results);\n          $result = $module.find(selector.result);\n        },\n        bind: {\n          events: function events() {\n            module.verbose('Binding events to search');\n\n            if (_settings.automatic) {\n              $module.on(module.get.inputEvent() + eventNamespace, selector.prompt, module.event.input);\n              $prompt.attr('autocomplete', 'off');\n            }\n\n            $module // prompt\n            .on('focus' + eventNamespace, selector.prompt, module.event.focus).on('blur' + eventNamespace, selector.prompt, module.event.blur).on('keydown' + eventNamespace, selector.prompt, module.handleKeyboard) // search button\n            .on('click' + eventNamespace, selector.searchButton, module.query) // results\n            .on('mousedown' + eventNamespace, selector.results, module.event.result.mousedown).on('mouseup' + eventNamespace, selector.results, module.event.result.mouseup).on('click' + eventNamespace, selector.result, module.event.result.click);\n          }\n        },\n        determine: {\n          searchFields: function searchFields() {\n            // this makes sure $.extend does not add specified search fields to default fields\n            // this is the only setting which should not extend defaults\n            if (parameters && parameters.searchFields !== undefined) {\n              _settings.searchFields = parameters.searchFields;\n            }\n          }\n        },\n        event: {\n          input: function input() {\n            if (_settings.searchDelay) {\n              clearTimeout(module.timer);\n              module.timer = setTimeout(function () {\n                if (module.is.focused()) {\n                  module.query();\n                }\n              }, _settings.searchDelay);\n            } else {\n              module.query();\n            }\n          },\n          focus: function focus() {\n            module.set.focus();\n\n            if (_settings.searchOnFocus && module.has.minimumCharacters()) {\n              module.query(function () {\n                if (module.can.show()) {\n                  module.showResults();\n                }\n              });\n            }\n          },\n          blur: function blur(event) {\n            var pageLostFocus = document.activeElement === this,\n                callback = function callback() {\n              module.cancel.query();\n              module.remove.focus();\n              module.timer = setTimeout(module.hideResults, _settings.hideDelay);\n            };\n\n            if (pageLostFocus) {\n              return;\n            }\n\n            resultsDismissed = false;\n\n            if (module.resultsClicked) {\n              module.debug('Determining if user action caused search to close');\n              $module.one('click.close' + eventNamespace, selector.results, function (event) {\n                if (module.is.inMessage(event) || disabledBubbled) {\n                  $prompt.focus();\n                  return;\n                }\n\n                disabledBubbled = false;\n\n                if (!module.is.animating() && !module.is.hidden()) {\n                  callback();\n                }\n              });\n            } else {\n              module.debug('Input blurred without user action, closing results');\n              callback();\n            }\n          },\n          result: {\n            mousedown: function mousedown() {\n              module.resultsClicked = true;\n            },\n            mouseup: function mouseup() {\n              module.resultsClicked = false;\n            },\n            click: function click(event) {\n              module.debug('Search result selected');\n              var $result = $(this),\n                  $title = $result.find(selector.title).eq(0),\n                  $link = $result.is('a[href]') ? $result : $result.find('a[href]').eq(0),\n                  href = $link.attr('href') || false,\n                  target = $link.attr('target') || false,\n                  title = $title.html(),\n                  // title is used for result lookup\n              value = $title.length > 0 ? $title.text() : false,\n                  results = module.get.results(),\n                  result = $result.data(metadata.result) || module.get.result(value, results),\n                  returnedValue;\n\n              if ($.isFunction(_settings.onSelect)) {\n                if (_settings.onSelect.call(element, result, results) === false) {\n                  module.debug('Custom onSelect callback cancelled default select action');\n                  disabledBubbled = true;\n                  return;\n                }\n              }\n\n              module.hideResults();\n\n              if (value) {\n                module.set.value(value);\n              }\n\n              if (href) {\n                module.verbose('Opening search link found in result', $link);\n\n                if (target == '_blank' || event.ctrlKey) {\n                  window.open(href);\n                } else {\n                  window.location.href = href;\n                }\n              }\n            }\n          }\n        },\n        handleKeyboard: function handleKeyboard(event) {\n          var // force selector refresh\n          $result = $module.find(selector.result),\n              $category = $module.find(selector.category),\n              $activeResult = $result.filter('.' + className.active),\n              currentIndex = $result.index($activeResult),\n              resultSize = $result.length,\n              hasActiveResult = $activeResult.length > 0,\n              keyCode = event.which,\n              keys = {\n            backspace: 8,\n            enter: 13,\n            escape: 27,\n            upArrow: 38,\n            downArrow: 40\n          },\n              newIndex; // search shortcuts\n\n          if (keyCode == keys.escape) {\n            module.verbose('Escape key pressed, blurring search field');\n            module.hideResults();\n            resultsDismissed = true;\n          }\n\n          if (module.is.visible()) {\n            if (keyCode == keys.enter) {\n              module.verbose('Enter key pressed, selecting active result');\n\n              if ($result.filter('.' + className.active).length > 0) {\n                module.event.result.click.call($result.filter('.' + className.active), event);\n                event.preventDefault();\n                return false;\n              }\n            } else if (keyCode == keys.upArrow && hasActiveResult) {\n              module.verbose('Up key pressed, changing active result');\n              newIndex = currentIndex - 1 < 0 ? currentIndex : currentIndex - 1;\n              $category.removeClass(className.active);\n              $result.removeClass(className.active).eq(newIndex).addClass(className.active).closest($category).addClass(className.active);\n              event.preventDefault();\n            } else if (keyCode == keys.downArrow) {\n              module.verbose('Down key pressed, changing active result');\n              newIndex = currentIndex + 1 >= resultSize ? currentIndex : currentIndex + 1;\n              $category.removeClass(className.active);\n              $result.removeClass(className.active).eq(newIndex).addClass(className.active).closest($category).addClass(className.active);\n              event.preventDefault();\n            }\n          } else {\n            // query shortcuts\n            if (keyCode == keys.enter) {\n              module.verbose('Enter key pressed, executing query');\n              module.query();\n              module.set.buttonPressed();\n              $prompt.one('keyup', module.remove.buttonFocus);\n            }\n          }\n        },\n        setup: {\n          api: function api(searchTerm, callback) {\n            var apiSettings = {\n              debug: _settings.debug,\n              on: false,\n              cache: _settings.cache,\n              action: 'search',\n              urlData: {\n                query: searchTerm\n              },\n              onSuccess: function onSuccess(response) {\n                module.parse.response.call(element, response, searchTerm);\n                callback();\n              },\n              onFailure: function onFailure() {\n                module.displayMessage(error.serverError);\n                callback();\n              },\n              onAbort: function onAbort(response) {},\n              onError: module.error\n            },\n                searchHTML;\n            $.extend(true, apiSettings, _settings.apiSettings);\n            module.verbose('Setting up API request', apiSettings);\n            $module.api(apiSettings);\n          }\n        },\n        can: {\n          useAPI: function useAPI() {\n            return $.fn.api !== undefined;\n          },\n          show: function show() {\n            return module.is.focused() && !module.is.visible() && !module.is.empty();\n          },\n          transition: function transition() {\n            return _settings.transition && $.fn.transition !== undefined && $module.transition('is supported');\n          }\n        },\n        is: {\n          animating: function animating() {\n            return $results.hasClass(className.animating);\n          },\n          hidden: function hidden() {\n            return $results.hasClass(className.hidden);\n          },\n          inMessage: function inMessage(event) {\n            if (!event.target) {\n              return;\n            }\n\n            var $target = $(event.target),\n                isInDOM = $.contains(document.documentElement, event.target);\n            return isInDOM && $target.closest(selector.message).length > 0;\n          },\n          empty: function empty() {\n            return $results.html() === '';\n          },\n          visible: function visible() {\n            return $results.filter(':visible').length > 0;\n          },\n          focused: function focused() {\n            return $prompt.filter(':focus').length > 0;\n          }\n        },\n        get: {\n          settings: function settings() {\n            if ($.isPlainObject(parameters) && parameters.searchFullText) {\n              _settings.fullTextSearch = parameters.searchFullText;\n              module.error(_settings.error.oldSearchSyntax, element);\n            }\n          },\n          inputEvent: function inputEvent() {\n            var prompt = $prompt[0],\n                inputEvent = prompt !== undefined && prompt.oninput !== undefined ? 'input' : prompt !== undefined && prompt.onpropertychange !== undefined ? 'propertychange' : 'keyup';\n            return inputEvent;\n          },\n          value: function value() {\n            return $prompt.val();\n          },\n          results: function results() {\n            var results = $module.data(metadata.results);\n            return results;\n          },\n          result: function result(value, results) {\n            var lookupFields = ['title', 'id'],\n                result = false;\n            value = value !== undefined ? value : module.get.value();\n            results = results !== undefined ? results : module.get.results();\n\n            if (_settings.type === 'category') {\n              module.debug('Finding result that matches', value);\n              $.each(results, function (index, category) {\n                if ($.isArray(category.results)) {\n                  result = module.search.object(value, category.results, lookupFields)[0]; // don't continue searching if a result is found\n\n                  if (result) {\n                    return false;\n                  }\n                }\n              });\n            } else {\n              module.debug('Finding result in results object', value);\n              result = module.search.object(value, results, lookupFields)[0];\n            }\n\n            return result || false;\n          }\n        },\n        select: {\n          firstResult: function firstResult() {\n            module.verbose('Selecting first result');\n            $result.first().addClass(className.active);\n          }\n        },\n        set: {\n          focus: function focus() {\n            $module.addClass(className.focus);\n          },\n          loading: function loading() {\n            $module.addClass(className.loading);\n          },\n          value: function value(_value) {\n            module.verbose('Setting search input value', _value);\n            $prompt.val(_value);\n          },\n          type: function type(_type) {\n            _type = _type || _settings.type;\n\n            if (_settings.type == 'category') {\n              $module.addClass(_settings.type);\n            }\n          },\n          buttonPressed: function buttonPressed() {\n            $searchButton.addClass(className.pressed);\n          }\n        },\n        remove: {\n          loading: function loading() {\n            $module.removeClass(className.loading);\n          },\n          focus: function focus() {\n            $module.removeClass(className.focus);\n          },\n          buttonPressed: function buttonPressed() {\n            $searchButton.removeClass(className.pressed);\n          }\n        },\n        query: function query(callback) {\n          callback = $.isFunction(callback) ? callback : function () {};\n          var searchTerm = module.get.value(),\n              cache = module.read.cache(searchTerm);\n\n          callback = callback || function () {};\n\n          if (module.has.minimumCharacters()) {\n            if (cache) {\n              module.debug('Reading result from cache', searchTerm);\n              module.save.results(cache.results);\n              module.addResults(cache.html);\n              module.inject.id(cache.results);\n              callback();\n            } else {\n              module.debug('Querying for', searchTerm);\n\n              if ($.isPlainObject(_settings.source) || $.isArray(_settings.source)) {\n                module.search.local(searchTerm);\n                callback();\n              } else if (module.can.useAPI()) {\n                module.search.remote(searchTerm, callback);\n              } else {\n                module.error(error.source);\n                callback();\n              }\n            }\n\n            _settings.onSearchQuery.call(element, searchTerm);\n          } else {\n            module.hideResults();\n          }\n        },\n        search: {\n          local: function local(searchTerm) {\n            var results = module.search.object(searchTerm, _settings.content),\n                searchHTML;\n            module.set.loading();\n            module.save.results(results);\n            module.debug('Returned full local search results', results);\n\n            if (_settings.maxResults > 0) {\n              module.debug('Using specified max results', results);\n              results = results.slice(0, _settings.maxResults);\n            }\n\n            if (_settings.type == 'category') {\n              results = module.create.categoryResults(results);\n            }\n\n            searchHTML = module.generateResults({\n              results: results\n            });\n            module.remove.loading();\n            module.addResults(searchHTML);\n            module.inject.id(results);\n            module.write.cache(searchTerm, {\n              html: searchHTML,\n              results: results\n            });\n          },\n          remote: function remote(searchTerm, callback) {\n            callback = $.isFunction(callback) ? callback : function () {};\n\n            if ($module.api('is loading')) {\n              $module.api('abort');\n            }\n\n            module.setup.api(searchTerm, callback);\n            $module.api('query');\n          },\n          object: function object(searchTerm, source, searchFields) {\n            var results = [],\n                exactResults = [],\n                fuzzyResults = [],\n                searchExp = searchTerm.toString().replace(regExp.escape, '\\\\$&'),\n                matchRegExp = new RegExp(regExp.beginsWith + searchExp, 'i'),\n                // avoid duplicates when pushing results\n            addResult = function addResult(array, result) {\n              var notResult = $.inArray(result, results) == -1,\n                  notFuzzyResult = $.inArray(result, fuzzyResults) == -1,\n                  notExactResults = $.inArray(result, exactResults) == -1;\n\n              if (notResult && notFuzzyResult && notExactResults) {\n                array.push(result);\n              }\n            };\n\n            source = source || _settings.source;\n            searchFields = searchFields !== undefined ? searchFields : _settings.searchFields; // search fields should be array to loop correctly\n\n            if (!$.isArray(searchFields)) {\n              searchFields = [searchFields];\n            } // exit conditions if no source\n\n\n            if (source === undefined || source === false) {\n              module.error(error.source);\n              return [];\n            } // iterate through search fields looking for matches\n\n\n            $.each(searchFields, function (index, field) {\n              $.each(source, function (label, content) {\n                var fieldExists = typeof content[field] == 'string';\n\n                if (fieldExists) {\n                  if (content[field].search(matchRegExp) !== -1) {\n                    // content starts with value (first in results)\n                    addResult(results, content);\n                  } else if (_settings.fullTextSearch === 'exact' && module.exactSearch(searchTerm, content[field])) {\n                    // content fuzzy matches (last in results)\n                    addResult(exactResults, content);\n                  } else if (_settings.fullTextSearch == true && module.fuzzySearch(searchTerm, content[field])) {\n                    // content fuzzy matches (last in results)\n                    addResult(fuzzyResults, content);\n                  }\n                }\n              });\n            });\n            $.merge(exactResults, fuzzyResults);\n            $.merge(results, exactResults);\n            return results;\n          }\n        },\n        exactSearch: function exactSearch(query, term) {\n          query = query.toLowerCase();\n          term = term.toLowerCase();\n\n          if (term.indexOf(query) > -1) {\n            return true;\n          }\n\n          return false;\n        },\n        fuzzySearch: function fuzzySearch(query, term) {\n          var termLength = term.length,\n              queryLength = query.length;\n\n          if (typeof query !== 'string') {\n            return false;\n          }\n\n          query = query.toLowerCase();\n          term = term.toLowerCase();\n\n          if (queryLength > termLength) {\n            return false;\n          }\n\n          if (queryLength === termLength) {\n            return query === term;\n          }\n\n          search: for (var characterIndex = 0, nextCharacterIndex = 0; characterIndex < queryLength; characterIndex++) {\n            var queryCharacter = query.charCodeAt(characterIndex);\n\n            while (nextCharacterIndex < termLength) {\n              if (term.charCodeAt(nextCharacterIndex++) === queryCharacter) {\n                continue search;\n              }\n            }\n\n            return false;\n          }\n\n          return true;\n        },\n        parse: {\n          response: function response(_response, searchTerm) {\n            var searchHTML = module.generateResults(_response);\n            module.verbose('Parsing server response', _response);\n\n            if (_response !== undefined) {\n              if (searchTerm !== undefined && _response[fields.results] !== undefined) {\n                module.addResults(searchHTML);\n                module.inject.id(_response[fields.results]);\n                module.write.cache(searchTerm, {\n                  html: searchHTML,\n                  results: _response[fields.results]\n                });\n                module.save.results(_response[fields.results]);\n              }\n            }\n          }\n        },\n        cancel: {\n          query: function query() {\n            if (module.can.useAPI()) {\n              $module.api('abort');\n            }\n          }\n        },\n        has: {\n          minimumCharacters: function minimumCharacters() {\n            var searchTerm = module.get.value(),\n                numCharacters = searchTerm.length;\n            return numCharacters >= _settings.minCharacters;\n          },\n          results: function results() {\n            if ($results.length === 0) {\n              return false;\n            }\n\n            var html = $results.html();\n            return html != '';\n          }\n        },\n        clear: {\n          cache: function cache(value) {\n            var cache = $module.data(metadata.cache);\n\n            if (!value) {\n              module.debug('Clearing cache', value);\n              $module.removeData(metadata.cache);\n            } else if (value && cache && cache[value]) {\n              module.debug('Removing value from cache', value);\n              delete cache[value];\n              $module.data(metadata.cache, cache);\n            }\n          }\n        },\n        read: {\n          cache: function cache(name) {\n            var cache = $module.data(metadata.cache);\n\n            if (_settings.cache) {\n              module.verbose('Checking cache for generated html for query', name);\n              return _typeof(cache) == 'object' && cache[name] !== undefined ? cache[name] : false;\n            }\n\n            return false;\n          }\n        },\n        create: {\n          categoryResults: function categoryResults(results) {\n            var categoryResults = {};\n            $.each(results, function (index, result) {\n              if (!result.category) {\n                return;\n              }\n\n              if (categoryResults[result.category] === undefined) {\n                module.verbose('Creating new category of results', result.category);\n                categoryResults[result.category] = {\n                  name: result.category,\n                  results: [result]\n                };\n              } else {\n                categoryResults[result.category].results.push(result);\n              }\n            });\n            return categoryResults;\n          },\n          id: function id(resultIndex, categoryIndex) {\n            var resultID = resultIndex + 1,\n                // not zero indexed\n            categoryID = categoryIndex + 1,\n                firstCharCode,\n                letterID,\n                id;\n\n            if (categoryIndex !== undefined) {\n              // start char code for \"A\"\n              letterID = String.fromCharCode(97 + categoryIndex);\n              id = letterID + resultID;\n              module.verbose('Creating category result id', id);\n            } else {\n              id = resultID;\n              module.verbose('Creating result id', id);\n            }\n\n            return id;\n          },\n          results: function results() {\n            if ($results.length === 0) {\n              $results = $('<div />').addClass(className.results).appendTo($module);\n            }\n          }\n        },\n        inject: {\n          result: function result(_result, resultIndex, categoryIndex) {\n            module.verbose('Injecting result into results');\n            var $selectedResult = categoryIndex !== undefined ? $results.children().eq(categoryIndex).children(selector.results).first().children(selector.result).eq(resultIndex) : $results.children(selector.result).eq(resultIndex);\n            module.verbose('Injecting results metadata', $selectedResult);\n            $selectedResult.data(metadata.result, _result);\n          },\n          id: function id(results) {\n            module.debug('Injecting unique ids into results');\n            var // since results may be object, we must use counters\n            categoryIndex = 0,\n                resultIndex = 0;\n\n            if (_settings.type === 'category') {\n              // iterate through each category result\n              $.each(results, function (index, category) {\n                resultIndex = 0;\n                $.each(category.results, function (index, value) {\n                  var result = category.results[index];\n\n                  if (result.id === undefined) {\n                    result.id = module.create.id(resultIndex, categoryIndex);\n                  }\n\n                  module.inject.result(result, resultIndex, categoryIndex);\n                  resultIndex++;\n                });\n                categoryIndex++;\n              });\n            } else {\n              // top level\n              $.each(results, function (index, value) {\n                var result = results[index];\n\n                if (result.id === undefined) {\n                  result.id = module.create.id(resultIndex);\n                }\n\n                module.inject.result(result, resultIndex);\n                resultIndex++;\n              });\n            }\n\n            return results;\n          }\n        },\n        save: {\n          results: function results(_results) {\n            module.verbose('Saving current search results to metadata', _results);\n            $module.data(metadata.results, _results);\n          }\n        },\n        write: {\n          cache: function cache(name, value) {\n            var cache = $module.data(metadata.cache) !== undefined ? $module.data(metadata.cache) : {};\n\n            if (_settings.cache) {\n              module.verbose('Writing generated html to cache', name, value);\n              cache[name] = value;\n              $module.data(metadata.cache, cache);\n            }\n          }\n        },\n        addResults: function addResults(html) {\n          if ($.isFunction(_settings.onResultsAdd)) {\n            if (_settings.onResultsAdd.call($results, html) === false) {\n              module.debug('onResultsAdd callback cancelled default action');\n              return false;\n            }\n          }\n\n          if (html) {\n            $results.html(html);\n            module.refreshResults();\n\n            if (_settings.selectFirstResult) {\n              module.select.firstResult();\n            }\n\n            module.showResults();\n          } else {\n            module.hideResults(function () {\n              $results.empty();\n            });\n          }\n        },\n        showResults: function showResults(callback) {\n          callback = $.isFunction(callback) ? callback : function () {};\n\n          if (resultsDismissed) {\n            return;\n          }\n\n          if (!module.is.visible() && module.has.results()) {\n            if (module.can.transition()) {\n              module.debug('Showing results with css animations');\n              $results.transition({\n                animation: _settings.transition + ' in',\n                debug: _settings.debug,\n                verbose: _settings.verbose,\n                duration: _settings.duration,\n                onComplete: function onComplete() {\n                  callback();\n                },\n                queue: true\n              });\n            } else {\n              module.debug('Showing results with javascript');\n              $results.stop().fadeIn(_settings.duration, _settings.easing);\n            }\n\n            _settings.onResultsOpen.call($results);\n          }\n        },\n        hideResults: function hideResults(callback) {\n          callback = $.isFunction(callback) ? callback : function () {};\n\n          if (module.is.visible()) {\n            if (module.can.transition()) {\n              module.debug('Hiding results with css animations');\n              $results.transition({\n                animation: _settings.transition + ' out',\n                debug: _settings.debug,\n                verbose: _settings.verbose,\n                duration: _settings.duration,\n                onComplete: function onComplete() {\n                  callback();\n                },\n                queue: true\n              });\n            } else {\n              module.debug('Hiding results with javascript');\n              $results.stop().fadeOut(_settings.duration, _settings.easing);\n            }\n\n            _settings.onResultsClose.call($results);\n          }\n        },\n        generateResults: function generateResults(response) {\n          module.debug('Generating html from response', response);\n          var template = _settings.templates[_settings.type],\n              isProperObject = $.isPlainObject(response[fields.results]) && !$.isEmptyObject(response[fields.results]),\n              isProperArray = $.isArray(response[fields.results]) && response[fields.results].length > 0,\n              html = '';\n\n          if (isProperObject || isProperArray) {\n            if (_settings.maxResults > 0) {\n              if (isProperObject) {\n                if (_settings.type == 'standard') {\n                  module.error(error.maxResults);\n                }\n              } else {\n                response[fields.results] = response[fields.results].slice(0, _settings.maxResults);\n              }\n            }\n\n            if ($.isFunction(template)) {\n              html = template(response, fields);\n            } else {\n              module.error(error.noTemplate, false);\n            }\n          } else if (_settings.showNoResults) {\n            html = module.displayMessage(error.noResults, 'empty');\n          }\n\n          _settings.onResults.call(element, response);\n\n          return html;\n        },\n        displayMessage: function displayMessage(text, type) {\n          type = type || 'standard';\n          module.debug('Displaying message', text, type);\n          module.addResults(_settings.templates.message(text, type));\n          return _settings.templates.message(text, type);\n        },\n        setting: function setting(name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, _settings, name);\n          } else if (value !== undefined) {\n            _settings[name] = value;\n          } else {\n            return _settings[name];\n          }\n        },\n        internal: function internal(name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, module, name);\n          } else if (value !== undefined) {\n            module[name] = value;\n          } else {\n            return module[name];\n          }\n        },\n        debug: function debug() {\n          if (!_settings.silent && _settings.debug) {\n            if (_settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, _settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function verbose() {\n          if (!_settings.silent && _settings.verbose && _settings.debug) {\n            if (_settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, _settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function error() {\n          if (!_settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, _settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function log(message) {\n            var currentTime, executionTime, previousTime;\n\n            if (_settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                'Element': element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 500);\n          },\n          display: function display() {\n            var title = _settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ($allModules.length > 1) {\n              title += ' ' + '(' + $allModules.length + ')';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        invoke: function invoke(query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found;\n        }\n      };\n\n      if (methodInvoked) {\n        if (instance === undefined) {\n          module.initialize();\n        }\n\n        module.invoke(query);\n      } else {\n        if (instance !== undefined) {\n          instance.invoke('destroy');\n        }\n\n        module.initialize();\n      }\n    });\n    return returnedValue !== undefined ? returnedValue : this;\n  };\n\n  $.fn.search.settings = {\n    name: 'Search',\n    namespace: 'search',\n    silent: false,\n    debug: false,\n    verbose: false,\n    performance: true,\n    // template to use (specified in settings.templates)\n    type: 'standard',\n    // minimum characters required to search\n    minCharacters: 1,\n    // whether to select first result after searching automatically\n    selectFirstResult: false,\n    // API config\n    apiSettings: false,\n    // object to search\n    source: false,\n    // Whether search should query current term on focus\n    searchOnFocus: true,\n    // fields to search\n    searchFields: ['title', 'description'],\n    // field to display in standard results template\n    displayField: '',\n    // search anywhere in value (set to 'exact' to require exact matches\n    fullTextSearch: 'exact',\n    // whether to add events to prompt automatically\n    automatic: true,\n    // delay before hiding menu after blur\n    hideDelay: 0,\n    // delay before searching\n    searchDelay: 200,\n    // maximum results returned from search\n    maxResults: 7,\n    // whether to store lookups in local cache\n    cache: true,\n    // whether no results errors should be shown\n    showNoResults: true,\n    // transition settings\n    transition: 'scale',\n    duration: 200,\n    easing: 'easeOutExpo',\n    // callbacks\n    onSelect: false,\n    onResultsAdd: false,\n    onSearchQuery: function onSearchQuery(query) {},\n    onResults: function onResults(response) {},\n    onResultsOpen: function onResultsOpen() {},\n    onResultsClose: function onResultsClose() {},\n    className: {\n      animating: 'animating',\n      active: 'active',\n      empty: 'empty',\n      focus: 'focus',\n      hidden: 'hidden',\n      loading: 'loading',\n      results: 'results',\n      pressed: 'down'\n    },\n    error: {\n      source: 'Cannot search. No source used, and Semantic API module was not included',\n      noResults: 'Your search returned no results',\n      logging: 'Error in debug logging, exiting.',\n      noEndpoint: 'No search endpoint was specified',\n      noTemplate: 'A valid template name was not specified.',\n      oldSearchSyntax: 'searchFullText setting has been renamed fullTextSearch for consistency, please adjust your settings.',\n      serverError: 'There was an issue querying the server.',\n      maxResults: 'Results must be an array to use maxResults setting',\n      method: 'The method you called is not defined.'\n    },\n    metadata: {\n      cache: 'cache',\n      results: 'results',\n      result: 'result'\n    },\n    regExp: {\n      escape: /[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g,\n      beginsWith: '(?:\\s|^)'\n    },\n    // maps api response attributes to internal representation\n    fields: {\n      categories: 'results',\n      // array of categories (category view)\n      categoryName: 'name',\n      // name of category (category view)\n      categoryResults: 'results',\n      // array of results (category view)\n      description: 'description',\n      // result description\n      image: 'image',\n      // result image\n      price: 'price',\n      // result price\n      results: 'results',\n      // array of results (standard)\n      title: 'title',\n      // result title\n      url: 'url',\n      // result url\n      action: 'action',\n      // \"view more\" object name\n      actionText: 'text',\n      // \"view more\" text\n      actionURL: 'url' // \"view more\" url\n\n    },\n    selector: {\n      prompt: '.prompt',\n      searchButton: '.search.button',\n      results: '.results',\n      message: '.results > .message',\n      category: '.category',\n      result: '.result',\n      title: '.title, .name'\n    },\n    templates: {\n      escape: function escape(string) {\n        var badChars = /[&<>\"'`]/g,\n            shouldEscape = /[&<>\"'`]/,\n            escape = {\n          \"&\": \"&amp;\",\n          \"<\": \"&lt;\",\n          \">\": \"&gt;\",\n          '\"': \"&quot;\",\n          \"'\": \"&#x27;\",\n          \"`\": \"&#x60;\"\n        },\n            escapedChar = function escapedChar(chr) {\n          return escape[chr];\n        };\n\n        if (shouldEscape.test(string)) {\n          return string.replace(badChars, escapedChar);\n        }\n\n        return string;\n      },\n      message: function message(_message, type) {\n        var html = '';\n\n        if (_message !== undefined && type !== undefined) {\n          html += '' + '<div class=\"message ' + type + '\">'; // message type\n\n          if (type == 'empty') {\n            html += '' + '<div class=\"header\">No Results</div class=\"header\">' + '<div class=\"description\">' + _message + '</div class=\"description\">';\n          } else {\n            html += ' <div class=\"description\">' + _message + '</div>';\n          }\n\n          html += '</div>';\n        }\n\n        return html;\n      },\n      category: function category(response, fields) {\n        var html = '',\n            escape = $.fn.search.settings.templates.escape;\n\n        if (response[fields.categoryResults] !== undefined) {\n          // each category\n          $.each(response[fields.categoryResults], function (index, category) {\n            if (category[fields.results] !== undefined && category.results.length > 0) {\n              html += '<div class=\"category\">';\n\n              if (category[fields.categoryName] !== undefined) {\n                html += '<div class=\"name\">' + category[fields.categoryName] + '</div>';\n              } // each item inside category\n\n\n              html += '<div class=\"results\">';\n              $.each(category.results, function (index, result) {\n                if (result[fields.url]) {\n                  html += '<a class=\"result\" href=\"' + result[fields.url] + '\">';\n                } else {\n                  html += '<a class=\"result\">';\n                }\n\n                if (result[fields.image] !== undefined) {\n                  html += '' + '<div class=\"image\">' + ' <img src=\"' + result[fields.image] + '\">' + '</div>';\n                }\n\n                html += '<div class=\"content\">';\n\n                if (result[fields.price] !== undefined) {\n                  html += '<div class=\"price\">' + result[fields.price] + '</div>';\n                }\n\n                if (result[fields.title] !== undefined) {\n                  html += '<div class=\"title\">' + result[fields.title] + '</div>';\n                }\n\n                if (result[fields.description] !== undefined) {\n                  html += '<div class=\"description\">' + result[fields.description] + '</div>';\n                }\n\n                html += '' + '</div>';\n                html += '</a>';\n              });\n              html += '</div>';\n              html += '' + '</div>';\n            }\n          });\n\n          if (response[fields.action]) {\n            html += '' + '<a href=\"' + response[fields.action][fields.actionURL] + '\" class=\"action\">' + response[fields.action][fields.actionText] + '</a>';\n          }\n\n          return html;\n        }\n\n        return false;\n      },\n      standard: function standard(response, fields) {\n        var html = '';\n\n        if (response[fields.results] !== undefined) {\n          // each result\n          $.each(response[fields.results], function (index, result) {\n            if (result[fields.url]) {\n              html += '<a class=\"result\" href=\"' + result[fields.url] + '\">';\n            } else {\n              html += '<a class=\"result\">';\n            }\n\n            if (result[fields.image] !== undefined) {\n              html += '' + '<div class=\"image\">' + ' <img src=\"' + result[fields.image] + '\">' + '</div>';\n            }\n\n            html += '<div class=\"content\">';\n\n            if (result[fields.price] !== undefined) {\n              html += '<div class=\"price\">' + result[fields.price] + '</div>';\n            }\n\n            if (result[fields.title] !== undefined) {\n              html += '<div class=\"title\">' + result[fields.title] + '</div>';\n            }\n\n            if (result[fields.description] !== undefined) {\n              html += '<div class=\"description\">' + result[fields.description] + '</div>';\n            }\n\n            html += '' + '</div>';\n            html += '</a>';\n          });\n\n          if (response[fields.action]) {\n            html += '' + '<a href=\"' + response[fields.action][fields.actionURL] + '\" class=\"action\">' + response[fields.action][fields.actionText] + '</a>';\n          }\n\n          return html;\n        }\n\n        return false;\n      }\n    }\n  };\n})(jQuery, window, document);","map":null,"metadata":{},"sourceType":"module"}