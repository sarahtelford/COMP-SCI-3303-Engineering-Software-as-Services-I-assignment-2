{"ast":null,"code":"/*!\n * # Semantic UI - Modal\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.fn.modal = function (parameters) {\n    var $allModules = $(this),\n        $window = $(window),\n        $document = $(document),\n        $body = $('body'),\n        moduleSelector = $allModules.selector || '',\n        time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n      setTimeout(callback, 0);\n    },\n        returnedValue;\n\n    $allModules.each(function () {\n      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.modal.settings, parameters) : $.extend({}, $.fn.modal.settings),\n          selector = settings.selector,\n          className = settings.className,\n          namespace = settings.namespace,\n          error = settings.error,\n          eventNamespace = '.' + namespace,\n          moduleNamespace = 'module-' + namespace,\n          $module = $(this),\n          $context = $(settings.context),\n          $close = $module.find(selector.close),\n          $allModals,\n          $otherModals,\n          $focusedElement,\n          $dimmable,\n          $dimmer,\n          element = this,\n          instance = $module.data(moduleNamespace),\n          ignoreRepeatedEvents = false,\n          elementEventNamespace,\n          _id,\n          observer,\n          module;\n\n      module = {\n        initialize: function initialize() {\n          module.verbose('Initializing dimmer', $context);\n          module.create.id();\n          module.create.dimmer();\n          module.refreshModals();\n          module.bind.events();\n\n          if (settings.observeChanges) {\n            module.observeChanges();\n          }\n\n          module.instantiate();\n        },\n        instantiate: function instantiate() {\n          module.verbose('Storing instance of modal');\n          instance = module;\n          $module.data(moduleNamespace, instance);\n        },\n        create: {\n          dimmer: function dimmer() {\n            var defaultSettings = {\n              debug: settings.debug,\n              variation: settings.centered ? false : 'top aligned',\n              dimmerName: 'modals'\n            },\n                dimmerSettings = $.extend(true, defaultSettings, settings.dimmerSettings);\n\n            if ($.fn.dimmer === undefined) {\n              module.error(error.dimmer);\n              return;\n            }\n\n            module.debug('Creating dimmer');\n            $dimmable = $context.dimmer(dimmerSettings);\n\n            if (settings.detachable) {\n              module.verbose('Modal is detachable, moving content into dimmer');\n              $dimmable.dimmer('add content', $module);\n            } else {\n              module.set.undetached();\n            }\n\n            $dimmer = $dimmable.dimmer('get dimmer');\n          },\n          id: function id() {\n            _id = (Math.random().toString(16) + '000000000').substr(2, 8);\n            elementEventNamespace = '.' + _id;\n            module.verbose('Creating unique id for element', _id);\n          }\n        },\n        destroy: function destroy() {\n          module.verbose('Destroying previous modal');\n          $module.removeData(moduleNamespace).off(eventNamespace);\n          $window.off(elementEventNamespace);\n          $dimmer.off(elementEventNamespace);\n          $close.off(eventNamespace);\n          $context.dimmer('destroy');\n        },\n        observeChanges: function observeChanges() {\n          if ('MutationObserver' in window) {\n            observer = new MutationObserver(function (mutations) {\n              module.debug('DOM tree modified, refreshing');\n              module.refresh();\n            });\n            observer.observe(element, {\n              childList: true,\n              subtree: true\n            });\n            module.debug('Setting up mutation observer', observer);\n          }\n        },\n        refresh: function refresh() {\n          module.remove.scrolling();\n          module.cacheSizes();\n\n          if (!module.can.useFlex()) {\n            module.set.modalOffset();\n          }\n\n          module.set.screenHeight();\n          module.set.type();\n        },\n        refreshModals: function refreshModals() {\n          $otherModals = $module.siblings(selector.modal);\n          $allModals = $otherModals.add($module);\n        },\n        attachEvents: function attachEvents(selector, event) {\n          var $toggle = $(selector);\n          event = $.isFunction(module[event]) ? module[event] : module.toggle;\n\n          if ($toggle.length > 0) {\n            module.debug('Attaching modal events to element', selector, event);\n            $toggle.off(eventNamespace).on('click' + eventNamespace, event);\n          } else {\n            module.error(error.notFound, selector);\n          }\n        },\n        bind: {\n          events: function events() {\n            module.verbose('Attaching events');\n            $module.on('click' + eventNamespace, selector.close, module.event.close).on('click' + eventNamespace, selector.approve, module.event.approve).on('click' + eventNamespace, selector.deny, module.event.deny);\n            $window.on('resize' + elementEventNamespace, module.event.resize);\n          },\n          scrollLock: function scrollLock() {\n            // touch events default to passive, due to changes in chrome to optimize mobile perf\n            $dimmable.get(0).addEventListener('touchmove', module.event.preventScroll, {\n              passive: false\n            });\n          }\n        },\n        unbind: {\n          scrollLock: function scrollLock() {\n            $dimmable.get(0).removeEventListener('touchmove', module.event.preventScroll, {\n              passive: false\n            });\n          }\n        },\n        get: {\n          id: function id() {\n            return (Math.random().toString(16) + '000000000').substr(2, 8);\n          }\n        },\n        event: {\n          approve: function approve() {\n            if (ignoreRepeatedEvents || settings.onApprove.call(element, $(this)) === false) {\n              module.verbose('Approve callback returned false cancelling hide');\n              return;\n            }\n\n            ignoreRepeatedEvents = true;\n            module.hide(function () {\n              ignoreRepeatedEvents = false;\n            });\n          },\n          preventScroll: function preventScroll(event) {\n            event.preventDefault();\n          },\n          deny: function deny() {\n            if (ignoreRepeatedEvents || settings.onDeny.call(element, $(this)) === false) {\n              module.verbose('Deny callback returned false cancelling hide');\n              return;\n            }\n\n            ignoreRepeatedEvents = true;\n            module.hide(function () {\n              ignoreRepeatedEvents = false;\n            });\n          },\n          close: function close() {\n            module.hide();\n          },\n          click: function click(event) {\n            if (!settings.closable) {\n              module.verbose('Dimmer clicked but closable setting is disabled');\n              return;\n            }\n\n            var $target = $(event.target),\n                isInModal = $target.closest(selector.modal).length > 0,\n                isInDOM = $.contains(document.documentElement, event.target);\n\n            if (!isInModal && isInDOM && module.is.active()) {\n              module.debug('Dimmer clicked, hiding all modals');\n              module.remove.clickaway();\n\n              if (settings.allowMultiple) {\n                module.hide();\n              } else {\n                module.hideAll();\n              }\n            }\n          },\n          debounce: function debounce(method, delay) {\n            clearTimeout(module.timer);\n            module.timer = setTimeout(method, delay);\n          },\n          keyboard: function keyboard(event) {\n            var keyCode = event.which,\n                escapeKey = 27;\n\n            if (keyCode == escapeKey) {\n              if (settings.closable) {\n                module.debug('Escape key pressed hiding modal');\n                module.hide();\n              } else {\n                module.debug('Escape key pressed, but closable is set to false');\n              }\n\n              event.preventDefault();\n            }\n          },\n          resize: function resize() {\n            if ($dimmable.dimmer('is active') && (module.is.animating() || module.is.active())) {\n              requestAnimationFrame(module.refresh);\n            }\n          }\n        },\n        toggle: function toggle() {\n          if (module.is.active() || module.is.animating()) {\n            module.hide();\n          } else {\n            module.show();\n          }\n        },\n        show: function show(callback) {\n          callback = $.isFunction(callback) ? callback : function () {};\n          module.refreshModals();\n          module.set.dimmerSettings();\n          module.set.dimmerStyles();\n          module.showModal(callback);\n        },\n        hide: function hide(callback) {\n          callback = $.isFunction(callback) ? callback : function () {};\n          module.refreshModals();\n          module.hideModal(callback);\n        },\n        showModal: function showModal(callback) {\n          callback = $.isFunction(callback) ? callback : function () {};\n\n          if (module.is.animating() || !module.is.active()) {\n            module.showDimmer();\n            module.cacheSizes();\n\n            if (module.can.useFlex()) {\n              module.remove.legacy();\n            } else {\n              module.set.legacy();\n              module.set.modalOffset();\n              module.debug('Using non-flex legacy modal positioning.');\n            }\n\n            module.set.screenHeight();\n            module.set.type();\n            module.set.clickaway();\n\n            if (!settings.allowMultiple && module.others.active()) {\n              module.hideOthers(module.showModal);\n            } else {\n              if (settings.allowMultiple && settings.detachable) {\n                $module.detach().appendTo($dimmer);\n              }\n\n              settings.onShow.call(element);\n\n              if (settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {\n                module.debug('Showing modal with css animations');\n                $module.transition({\n                  debug: settings.debug,\n                  animation: settings.transition + ' in',\n                  queue: settings.queue,\n                  duration: settings.duration,\n                  useFailSafe: true,\n                  onComplete: function onComplete() {\n                    settings.onVisible.apply(element);\n\n                    if (settings.keyboardShortcuts) {\n                      module.add.keyboardShortcuts();\n                    }\n\n                    module.save.focus();\n                    module.set.active();\n\n                    if (settings.autofocus) {\n                      module.set.autofocus();\n                    }\n\n                    callback();\n                  }\n                });\n              } else {\n                module.error(error.noTransition);\n              }\n            }\n          } else {\n            module.debug('Modal is already visible');\n          }\n        },\n        hideModal: function hideModal(callback, keepDimmed) {\n          callback = $.isFunction(callback) ? callback : function () {};\n          module.debug('Hiding modal');\n\n          if (settings.onHide.call(element, $(this)) === false) {\n            module.verbose('Hide callback returned false cancelling hide');\n            return;\n          }\n\n          if (module.is.animating() || module.is.active()) {\n            if (settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {\n              module.remove.active();\n              $module.transition({\n                debug: settings.debug,\n                animation: settings.transition + ' out',\n                queue: settings.queue,\n                duration: settings.duration,\n                useFailSafe: true,\n                onStart: function onStart() {\n                  if (!module.others.active() && !keepDimmed) {\n                    module.hideDimmer();\n                  }\n\n                  if (settings.keyboardShortcuts) {\n                    module.remove.keyboardShortcuts();\n                  }\n                },\n                onComplete: function onComplete() {\n                  settings.onHidden.call(element);\n                  module.remove.dimmerStyles();\n                  module.restore.focus();\n                  callback();\n                }\n              });\n            } else {\n              module.error(error.noTransition);\n            }\n          }\n        },\n        showDimmer: function showDimmer() {\n          if ($dimmable.dimmer('is animating') || !$dimmable.dimmer('is active')) {\n            module.debug('Showing dimmer');\n            $dimmable.dimmer('show');\n          } else {\n            module.debug('Dimmer already visible');\n          }\n        },\n        hideDimmer: function hideDimmer() {\n          if ($dimmable.dimmer('is animating') || $dimmable.dimmer('is active')) {\n            module.unbind.scrollLock();\n            $dimmable.dimmer('hide', function () {\n              module.remove.clickaway();\n              module.remove.screenHeight();\n            });\n          } else {\n            module.debug('Dimmer is not visible cannot hide');\n            return;\n          }\n        },\n        hideAll: function hideAll(callback) {\n          var $visibleModals = $allModals.filter('.' + className.active + ', .' + className.animating);\n          callback = $.isFunction(callback) ? callback : function () {};\n\n          if ($visibleModals.length > 0) {\n            module.debug('Hiding all visible modals');\n            module.hideDimmer();\n            $visibleModals.modal('hide modal', callback);\n          }\n        },\n        hideOthers: function hideOthers(callback) {\n          var $visibleModals = $otherModals.filter('.' + className.active + ', .' + className.animating);\n          callback = $.isFunction(callback) ? callback : function () {};\n\n          if ($visibleModals.length > 0) {\n            module.debug('Hiding other modals', $otherModals);\n            $visibleModals.modal('hide modal', callback, true);\n          }\n        },\n        others: {\n          active: function active() {\n            return $otherModals.filter('.' + className.active).length > 0;\n          },\n          animating: function animating() {\n            return $otherModals.filter('.' + className.animating).length > 0;\n          }\n        },\n        add: {\n          keyboardShortcuts: function keyboardShortcuts() {\n            module.verbose('Adding keyboard shortcuts');\n            $document.on('keyup' + eventNamespace, module.event.keyboard);\n          }\n        },\n        save: {\n          focus: function focus() {\n            var $activeElement = $(document.activeElement),\n                inCurrentModal = $activeElement.closest($module).length > 0;\n\n            if (!inCurrentModal) {\n              $focusedElement = $(document.activeElement).blur();\n            }\n          }\n        },\n        restore: {\n          focus: function focus() {\n            if ($focusedElement && $focusedElement.length > 0) {\n              $focusedElement.focus();\n            }\n          }\n        },\n        remove: {\n          active: function active() {\n            $module.removeClass(className.active);\n          },\n          legacy: function legacy() {\n            $module.removeClass(className.legacy);\n          },\n          clickaway: function clickaway() {\n            $dimmer.off('click' + elementEventNamespace);\n          },\n          dimmerStyles: function dimmerStyles() {\n            $dimmer.removeClass(className.inverted);\n            $dimmable.removeClass(className.blurring);\n          },\n          bodyStyle: function bodyStyle() {\n            if ($body.attr('style') === '') {\n              module.verbose('Removing style attribute');\n              $body.removeAttr('style');\n            }\n          },\n          screenHeight: function screenHeight() {\n            module.debug('Removing page height');\n            $body.css('height', '');\n          },\n          keyboardShortcuts: function keyboardShortcuts() {\n            module.verbose('Removing keyboard shortcuts');\n            $document.off('keyup' + eventNamespace);\n          },\n          scrolling: function scrolling() {\n            $dimmable.removeClass(className.scrolling);\n            $module.removeClass(className.scrolling);\n          }\n        },\n        cacheSizes: function cacheSizes() {\n          $module.addClass(className.loading);\n          var scrollHeight = $module.prop('scrollHeight'),\n              modalWidth = $module.outerWidth(),\n              modalHeight = $module.outerHeight();\n\n          if (module.cache === undefined || modalHeight !== 0) {\n            module.cache = {\n              pageHeight: $(document).outerHeight(),\n              width: modalWidth,\n              height: modalHeight + settings.offset,\n              scrollHeight: scrollHeight + settings.offset,\n              contextHeight: settings.context == 'body' ? $(window).height() : $dimmable.height()\n            };\n            module.cache.topOffset = -(module.cache.height / 2);\n          }\n\n          $module.removeClass(className.loading);\n          module.debug('Caching modal and container sizes', module.cache);\n        },\n        can: {\n          useFlex: function useFlex() {\n            return settings.useFlex == 'auto' ? settings.detachable && !module.is.ie() : settings.useFlex;\n          },\n          fit: function fit() {\n            var contextHeight = module.cache.contextHeight,\n                verticalCenter = module.cache.contextHeight / 2,\n                topOffset = module.cache.topOffset,\n                scrollHeight = module.cache.scrollHeight,\n                height = module.cache.height,\n                paddingHeight = settings.padding,\n                startPosition = verticalCenter + topOffset;\n            return scrollHeight > height ? startPosition + scrollHeight + paddingHeight < contextHeight : height + paddingHeight * 2 < contextHeight;\n          }\n        },\n        is: {\n          active: function active() {\n            return $module.hasClass(className.active);\n          },\n          ie: function ie() {\n            var isIE11 = !window.ActiveXObject && 'ActiveXObject' in window,\n                isIE = ('ActiveXObject' in window);\n            return isIE11 || isIE;\n          },\n          animating: function animating() {\n            return $module.transition('is supported') ? $module.transition('is animating') : $module.is(':visible');\n          },\n          scrolling: function scrolling() {\n            return $dimmable.hasClass(className.scrolling);\n          },\n          modernBrowser: function modernBrowser() {\n            // appName for IE11 reports 'Netscape' can no longer use\n            return !(window.ActiveXObject || 'ActiveXObject' in window);\n          }\n        },\n        set: {\n          autofocus: function autofocus() {\n            var $inputs = $module.find('[tabindex], :input').filter(':visible'),\n                $autofocus = $inputs.filter('[autofocus]'),\n                $input = $autofocus.length > 0 ? $autofocus.first() : $inputs.first();\n\n            if ($input.length > 0) {\n              $input.focus();\n            }\n          },\n          clickaway: function clickaway() {\n            $dimmer.on('click' + elementEventNamespace, module.event.click);\n          },\n          dimmerSettings: function dimmerSettings() {\n            if ($.fn.dimmer === undefined) {\n              module.error(error.dimmer);\n              return;\n            }\n\n            var defaultSettings = {\n              debug: settings.debug,\n              dimmerName: 'modals',\n              closable: 'auto',\n              useFlex: module.can.useFlex(),\n              variation: settings.centered ? false : 'top aligned',\n              duration: {\n                show: settings.duration,\n                hide: settings.duration\n              }\n            },\n                dimmerSettings = $.extend(true, defaultSettings, settings.dimmerSettings);\n\n            if (settings.inverted) {\n              dimmerSettings.variation = dimmerSettings.variation !== undefined ? dimmerSettings.variation + ' inverted' : 'inverted';\n            }\n\n            $context.dimmer('setting', dimmerSettings);\n          },\n          dimmerStyles: function dimmerStyles() {\n            if (settings.inverted) {\n              $dimmer.addClass(className.inverted);\n            } else {\n              $dimmer.removeClass(className.inverted);\n            }\n\n            if (settings.blurring) {\n              $dimmable.addClass(className.blurring);\n            } else {\n              $dimmable.removeClass(className.blurring);\n            }\n          },\n          modalOffset: function modalOffset() {\n            var width = module.cache.width,\n                height = module.cache.height;\n            $module.css({\n              marginTop: settings.centered && module.can.fit() ? -(height / 2) : 0,\n              marginLeft: -(width / 2)\n            });\n            module.verbose('Setting modal offset for legacy mode');\n          },\n          screenHeight: function screenHeight() {\n            if (module.can.fit()) {\n              $body.css('height', '');\n            } else {\n              module.debug('Modal is taller than page content, resizing page height');\n              $body.css('height', module.cache.height + settings.padding * 2);\n            }\n          },\n          active: function active() {\n            $module.addClass(className.active);\n          },\n          scrolling: function scrolling() {\n            $dimmable.addClass(className.scrolling);\n            $module.addClass(className.scrolling);\n            module.unbind.scrollLock();\n          },\n          legacy: function legacy() {\n            $module.addClass(className.legacy);\n          },\n          type: function type() {\n            if (module.can.fit()) {\n              module.verbose('Modal fits on screen');\n\n              if (!module.others.active() && !module.others.animating()) {\n                module.remove.scrolling();\n                module.bind.scrollLock();\n              }\n            } else {\n              module.verbose('Modal cannot fit on screen setting to scrolling');\n              module.set.scrolling();\n            }\n          },\n          undetached: function undetached() {\n            $dimmable.addClass(className.undetached);\n          }\n        },\n        setting: function setting(name, value) {\n          module.debug('Changing setting', name, value);\n\n          if ($.isPlainObject(name)) {\n            $.extend(true, settings, name);\n          } else if (value !== undefined) {\n            if ($.isPlainObject(settings[name])) {\n              $.extend(true, settings[name], value);\n            } else {\n              settings[name] = value;\n            }\n          } else {\n            return settings[name];\n          }\n        },\n        internal: function internal(name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, module, name);\n          } else if (value !== undefined) {\n            module[name] = value;\n          } else {\n            return module[name];\n          }\n        },\n        debug: function debug() {\n          if (!settings.silent && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function verbose() {\n          if (!settings.silent && settings.verbose && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function error() {\n          if (!settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function log(message) {\n            var currentTime, executionTime, previousTime;\n\n            if (settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                'Element': element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 500);\n          },\n          display: function display() {\n            var title = settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        invoke: function invoke(query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found;\n        }\n      };\n\n      if (methodInvoked) {\n        if (instance === undefined) {\n          module.initialize();\n        }\n\n        module.invoke(query);\n      } else {\n        if (instance !== undefined) {\n          instance.invoke('destroy');\n        }\n\n        module.initialize();\n      }\n    });\n    return returnedValue !== undefined ? returnedValue : this;\n  };\n\n  $.fn.modal.settings = {\n    name: 'Modal',\n    namespace: 'modal',\n    useFlex: 'auto',\n    offset: 0,\n    silent: false,\n    debug: false,\n    verbose: false,\n    performance: true,\n    observeChanges: false,\n    allowMultiple: false,\n    detachable: true,\n    closable: true,\n    autofocus: true,\n    inverted: false,\n    blurring: false,\n    centered: true,\n    dimmerSettings: {\n      closable: false,\n      useCSS: true\n    },\n    // whether to use keyboard shortcuts\n    keyboardShortcuts: true,\n    context: 'body',\n    queue: false,\n    duration: 500,\n    transition: 'scale',\n    // padding with edge of page\n    padding: 50,\n    // called before show animation\n    onShow: function onShow() {},\n    // called after show animation\n    onVisible: function onVisible() {},\n    // called before hide animation\n    onHide: function onHide() {\n      return true;\n    },\n    // called after hide animation\n    onHidden: function onHidden() {},\n    // called after approve selector match\n    onApprove: function onApprove() {\n      return true;\n    },\n    // called after deny selector match\n    onDeny: function onDeny() {\n      return true;\n    },\n    selector: {\n      close: '> .close',\n      approve: '.actions .positive, .actions .approve, .actions .ok',\n      deny: '.actions .negative, .actions .deny, .actions .cancel',\n      modal: '.ui.modal'\n    },\n    error: {\n      dimmer: 'UI Dimmer, a required component is not included in this page',\n      method: 'The method you called is not defined.',\n      notFound: 'The element you specified could not be found'\n    },\n    className: {\n      active: 'active',\n      animating: 'animating',\n      blurring: 'blurring',\n      inverted: 'inverted',\n      legacy: 'legacy',\n      loading: 'loading',\n      scrolling: 'scrolling',\n      undetached: 'undetached'\n    }\n  };\n})(jQuery, window, document);","map":null,"metadata":{},"sourceType":"module"}