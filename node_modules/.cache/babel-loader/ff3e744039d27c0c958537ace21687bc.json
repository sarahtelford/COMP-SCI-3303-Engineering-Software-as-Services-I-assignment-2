{"ast":null,"code":"/*!\n * # Semantic UI - Progress\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n  var global = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.fn.progress = function (parameters) {\n    var $allModules = $(this),\n        moduleSelector = $allModules.selector || '',\n        time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        returnedValue;\n    $allModules.each(function () {\n      var _settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.progress.settings, parameters) : $.extend({}, $.fn.progress.settings),\n          className = _settings.className,\n          _metadata = _settings.metadata,\n          namespace = _settings.namespace,\n          selector = _settings.selector,\n          error = _settings.error,\n          eventNamespace = '.' + namespace,\n          moduleNamespace = 'module-' + namespace,\n          $module = $(this),\n          $bar = $(this).find(selector.bar),\n          $progress = $(this).find(selector.progress),\n          $label = $(this).find(selector.label),\n          element = this,\n          instance = $module.data(moduleNamespace),\n          animating = false,\n          transitionEnd,\n          module;\n\n      module = {\n        initialize: function initialize() {\n          module.debug('Initializing progress bar', _settings);\n          module.set.duration();\n          module.set.transitionEvent();\n          module.read.metadata();\n          module.read.settings();\n          module.instantiate();\n        },\n        instantiate: function instantiate() {\n          module.verbose('Storing instance of progress', module);\n          instance = module;\n          $module.data(moduleNamespace, module);\n        },\n        destroy: function destroy() {\n          module.verbose('Destroying previous progress for', $module);\n          clearInterval(instance.interval);\n          module.remove.state();\n          $module.removeData(moduleNamespace);\n          instance = undefined;\n        },\n        reset: function reset() {\n          module.remove.nextValue();\n          module.update.progress(0);\n        },\n        complete: function complete() {\n          if (module.percent === undefined || module.percent < 100) {\n            module.remove.progressPoll();\n            module.set.percent(100);\n          }\n        },\n        read: {\n          metadata: function metadata() {\n            var data = {\n              percent: $module.data(_metadata.percent),\n              total: $module.data(_metadata.total),\n              value: $module.data(_metadata.value)\n            };\n\n            if (data.percent) {\n              module.debug('Current percent value set from metadata', data.percent);\n              module.set.percent(data.percent);\n            }\n\n            if (data.total) {\n              module.debug('Total value set from metadata', data.total);\n              module.set.total(data.total);\n            }\n\n            if (data.value) {\n              module.debug('Current value set from metadata', data.value);\n              module.set.value(data.value);\n              module.set.progress(data.value);\n            }\n          },\n          settings: function settings() {\n            if (_settings.total !== false) {\n              module.debug('Current total set in settings', _settings.total);\n              module.set.total(_settings.total);\n            }\n\n            if (_settings.value !== false) {\n              module.debug('Current value set in settings', _settings.value);\n              module.set.value(_settings.value);\n              module.set.progress(module.value);\n            }\n\n            if (_settings.percent !== false) {\n              module.debug('Current percent set in settings', _settings.percent);\n              module.set.percent(_settings.percent);\n            }\n          }\n        },\n        bind: {\n          transitionEnd: function transitionEnd(callback) {\n            var transitionEnd = module.get.transitionEnd();\n            $bar.one(transitionEnd + eventNamespace, function (event) {\n              clearTimeout(module.failSafeTimer);\n              callback.call(this, event);\n            });\n            module.failSafeTimer = setTimeout(function () {\n              $bar.triggerHandler(transitionEnd);\n            }, _settings.duration + _settings.failSafeDelay);\n            module.verbose('Adding fail safe timer', module.timer);\n          }\n        },\n        increment: function increment(incrementValue) {\n          var maxValue, startValue, newValue;\n\n          if (module.has.total()) {\n            startValue = module.get.value();\n            incrementValue = incrementValue || 1;\n            newValue = startValue + incrementValue;\n          } else {\n            startValue = module.get.percent();\n            incrementValue = incrementValue || module.get.randomValue();\n            newValue = startValue + incrementValue;\n            maxValue = 100;\n            module.debug('Incrementing percentage by', startValue, newValue);\n          }\n\n          newValue = module.get.normalizedValue(newValue);\n          module.set.progress(newValue);\n        },\n        decrement: function decrement(decrementValue) {\n          var total = module.get.total(),\n              startValue,\n              newValue;\n\n          if (total) {\n            startValue = module.get.value();\n            decrementValue = decrementValue || 1;\n            newValue = startValue - decrementValue;\n            module.debug('Decrementing value by', decrementValue, startValue);\n          } else {\n            startValue = module.get.percent();\n            decrementValue = decrementValue || module.get.randomValue();\n            newValue = startValue - decrementValue;\n            module.debug('Decrementing percentage by', decrementValue, startValue);\n          }\n\n          newValue = module.get.normalizedValue(newValue);\n          module.set.progress(newValue);\n        },\n        has: {\n          progressPoll: function progressPoll() {\n            return module.progressPoll;\n          },\n          total: function total() {\n            return module.get.total() !== false;\n          }\n        },\n        get: {\n          text: function text(templateText) {\n            var value = module.value || 0,\n                total = module.total || 0,\n                percent = animating ? module.get.displayPercent() : module.percent || 0,\n                left = module.total > 0 ? total - value : 100 - percent;\n            templateText = templateText || '';\n            templateText = templateText.replace('{value}', value).replace('{total}', total).replace('{left}', left).replace('{percent}', percent);\n            module.verbose('Adding variables to progress bar text', templateText);\n            return templateText;\n          },\n          normalizedValue: function normalizedValue(value) {\n            if (value < 0) {\n              module.debug('Value cannot decrement below 0');\n              return 0;\n            }\n\n            if (module.has.total()) {\n              if (value > module.total) {\n                module.debug('Value cannot increment above total', module.total);\n                return module.total;\n              }\n            } else if (value > 100) {\n              module.debug('Value cannot increment above 100 percent');\n              return 100;\n            }\n\n            return value;\n          },\n          updateInterval: function updateInterval() {\n            if (_settings.updateInterval == 'auto') {\n              return _settings.duration;\n            }\n\n            return _settings.updateInterval;\n          },\n          randomValue: function randomValue() {\n            module.debug('Generating random increment percentage');\n            return Math.floor(Math.random() * _settings.random.max + _settings.random.min);\n          },\n          numericValue: function numericValue(value) {\n            return typeof value === 'string' ? value.replace(/[^\\d.]/g, '') !== '' ? +value.replace(/[^\\d.]/g, '') : false : value;\n          },\n          transitionEnd: function transitionEnd() {\n            var element = document.createElement('element'),\n                transitions = {\n              'transition': 'transitionend',\n              'OTransition': 'oTransitionEnd',\n              'MozTransition': 'transitionend',\n              'WebkitTransition': 'webkitTransitionEnd'\n            },\n                transition;\n\n            for (transition in transitions) {\n              if (element.style[transition] !== undefined) {\n                return transitions[transition];\n              }\n            }\n          },\n          // gets current displayed percentage (if animating values this is the intermediary value)\n          displayPercent: function displayPercent() {\n            var barWidth = $bar.width(),\n                totalWidth = $module.width(),\n                minDisplay = parseInt($bar.css('min-width'), 10),\n                displayPercent = barWidth > minDisplay ? barWidth / totalWidth * 100 : module.percent;\n            return _settings.precision > 0 ? Math.round(displayPercent * (10 * _settings.precision)) / (10 * _settings.precision) : Math.round(displayPercent);\n          },\n          percent: function percent() {\n            return module.percent || 0;\n          },\n          value: function value() {\n            return module.nextValue || module.value || 0;\n          },\n          total: function total() {\n            return module.total || false;\n          }\n        },\n        create: {\n          progressPoll: function progressPoll() {\n            module.progressPoll = setTimeout(function () {\n              module.update.toNextValue();\n              module.remove.progressPoll();\n            }, module.get.updateInterval());\n          }\n        },\n        is: {\n          complete: function complete() {\n            return module.is.success() || module.is.warning() || module.is.error();\n          },\n          success: function success() {\n            return $module.hasClass(className.success);\n          },\n          warning: function warning() {\n            return $module.hasClass(className.warning);\n          },\n          error: function error() {\n            return $module.hasClass(className.error);\n          },\n          active: function active() {\n            return $module.hasClass(className.active);\n          },\n          visible: function visible() {\n            return $module.is(':visible');\n          }\n        },\n        remove: {\n          progressPoll: function progressPoll() {\n            module.verbose('Removing progress poll timer');\n\n            if (module.progressPoll) {\n              clearTimeout(module.progressPoll);\n              delete module.progressPoll;\n            }\n          },\n          nextValue: function nextValue() {\n            module.verbose('Removing progress value stored for next update');\n            delete module.nextValue;\n          },\n          state: function state() {\n            module.verbose('Removing stored state');\n            delete module.total;\n            delete module.percent;\n            delete module.value;\n          },\n          active: function active() {\n            module.verbose('Removing active state');\n            $module.removeClass(className.active);\n          },\n          success: function success() {\n            module.verbose('Removing success state');\n            $module.removeClass(className.success);\n          },\n          warning: function warning() {\n            module.verbose('Removing warning state');\n            $module.removeClass(className.warning);\n          },\n          error: function error() {\n            module.verbose('Removing error state');\n            $module.removeClass(className.error);\n          }\n        },\n        set: {\n          barWidth: function barWidth(value) {\n            if (value > 100) {\n              module.error(error.tooHigh, value);\n            } else if (value < 0) {\n              module.error(error.tooLow, value);\n            } else {\n              $bar.css('width', value + '%');\n              $module.attr('data-percent', parseInt(value, 10));\n            }\n          },\n          duration: function duration(_duration) {\n            _duration = _duration || _settings.duration;\n            _duration = typeof _duration == 'number' ? _duration + 'ms' : _duration;\n            module.verbose('Setting progress bar transition duration', _duration);\n            $bar.css({\n              'transition-duration': _duration\n            });\n          },\n          percent: function percent(_percent) {\n            _percent = typeof _percent == 'string' ? +_percent.replace('%', '') : _percent; // round display percentage\n\n            _percent = _settings.precision > 0 ? Math.round(_percent * (10 * _settings.precision)) / (10 * _settings.precision) : Math.round(_percent);\n            module.percent = _percent;\n\n            if (!module.has.total()) {\n              module.value = _settings.precision > 0 ? Math.round(_percent / 100 * module.total * (10 * _settings.precision)) / (10 * _settings.precision) : Math.round(_percent / 100 * module.total * 10) / 10;\n\n              if (_settings.limitValues) {\n                module.value = module.value > 100 ? 100 : module.value < 0 ? 0 : module.value;\n              }\n            }\n\n            module.set.barWidth(_percent);\n            module.set.labelInterval();\n            module.set.labels();\n\n            _settings.onChange.call(element, _percent, module.value, module.total);\n          },\n          labelInterval: function labelInterval() {\n            var animationCallback = function animationCallback() {\n              module.verbose('Bar finished animating, removing continuous label updates');\n              clearInterval(module.interval);\n              animating = false;\n              module.set.labels();\n            };\n\n            clearInterval(module.interval);\n            module.bind.transitionEnd(animationCallback);\n            animating = true;\n            module.interval = setInterval(function () {\n              var isInDOM = $.contains(document.documentElement, element);\n\n              if (!isInDOM) {\n                clearInterval(module.interval);\n                animating = false;\n              }\n\n              module.set.labels();\n            }, _settings.framerate);\n          },\n          labels: function labels() {\n            module.verbose('Setting both bar progress and outer label text');\n            module.set.barLabel();\n            module.set.state();\n          },\n          label: function label(text) {\n            text = text || '';\n\n            if (text) {\n              text = module.get.text(text);\n              module.verbose('Setting label to text', text);\n              $label.text(text);\n            }\n          },\n          state: function state(percent) {\n            percent = percent !== undefined ? percent : module.percent;\n\n            if (percent === 100) {\n              if (_settings.autoSuccess && !(module.is.warning() || module.is.error() || module.is.success())) {\n                module.set.success();\n                module.debug('Automatically triggering success at 100%');\n              } else {\n                module.verbose('Reached 100% removing active state');\n                module.remove.active();\n                module.remove.progressPoll();\n              }\n            } else if (percent > 0) {\n              module.verbose('Adjusting active progress bar label', percent);\n              module.set.active();\n            } else {\n              module.remove.active();\n              module.set.label(_settings.text.active);\n            }\n          },\n          barLabel: function barLabel(text) {\n            if (text !== undefined) {\n              $progress.text(module.get.text(text));\n            } else if (_settings.label == 'ratio' && module.total) {\n              module.verbose('Adding ratio to bar label');\n              $progress.text(module.get.text(_settings.text.ratio));\n            } else if (_settings.label == 'percent') {\n              module.verbose('Adding percentage to bar label');\n              $progress.text(module.get.text(_settings.text.percent));\n            }\n          },\n          active: function active(text) {\n            text = text || _settings.text.active;\n            module.debug('Setting active state');\n\n            if (_settings.showActivity && !module.is.active()) {\n              $module.addClass(className.active);\n            }\n\n            module.remove.warning();\n            module.remove.error();\n            module.remove.success();\n            text = _settings.onLabelUpdate('active', text, module.value, module.total);\n\n            if (text) {\n              module.set.label(text);\n            }\n\n            module.bind.transitionEnd(function () {\n              _settings.onActive.call(element, module.value, module.total);\n            });\n          },\n          success: function success(text) {\n            text = text || _settings.text.success || _settings.text.active;\n            module.debug('Setting success state');\n            $module.addClass(className.success);\n            module.remove.active();\n            module.remove.warning();\n            module.remove.error();\n            module.complete();\n\n            if (_settings.text.success) {\n              text = _settings.onLabelUpdate('success', text, module.value, module.total);\n              module.set.label(text);\n            } else {\n              text = _settings.onLabelUpdate('active', text, module.value, module.total);\n              module.set.label(text);\n            }\n\n            module.bind.transitionEnd(function () {\n              _settings.onSuccess.call(element, module.total);\n            });\n          },\n          warning: function warning(text) {\n            text = text || _settings.text.warning;\n            module.debug('Setting warning state');\n            $module.addClass(className.warning);\n            module.remove.active();\n            module.remove.success();\n            module.remove.error();\n            module.complete();\n            text = _settings.onLabelUpdate('warning', text, module.value, module.total);\n\n            if (text) {\n              module.set.label(text);\n            }\n\n            module.bind.transitionEnd(function () {\n              _settings.onWarning.call(element, module.value, module.total);\n            });\n          },\n          error: function error(text) {\n            text = text || _settings.text.error;\n            module.debug('Setting error state');\n            $module.addClass(className.error);\n            module.remove.active();\n            module.remove.success();\n            module.remove.warning();\n            module.complete();\n            text = _settings.onLabelUpdate('error', text, module.value, module.total);\n\n            if (text) {\n              module.set.label(text);\n            }\n\n            module.bind.transitionEnd(function () {\n              _settings.onError.call(element, module.value, module.total);\n            });\n          },\n          transitionEvent: function transitionEvent() {\n            transitionEnd = module.get.transitionEnd();\n          },\n          total: function total(totalValue) {\n            module.total = totalValue;\n          },\n          value: function value(_value) {\n            module.value = _value;\n          },\n          progress: function progress(value) {\n            if (!module.has.progressPoll()) {\n              module.debug('First update in progress update interval, immediately updating', value);\n              module.update.progress(value);\n              module.create.progressPoll();\n            } else {\n              module.debug('Updated within interval, setting next update to use new value', value);\n              module.set.nextValue(value);\n            }\n          },\n          nextValue: function nextValue(value) {\n            module.nextValue = value;\n          }\n        },\n        update: {\n          toNextValue: function toNextValue() {\n            var nextValue = module.nextValue;\n\n            if (nextValue) {\n              module.debug('Update interval complete using last updated value', nextValue);\n              module.update.progress(nextValue);\n              module.remove.nextValue();\n            }\n          },\n          progress: function progress(value) {\n            var percentComplete;\n            value = module.get.numericValue(value);\n\n            if (value === false) {\n              module.error(error.nonNumeric, value);\n            }\n\n            value = module.get.normalizedValue(value);\n\n            if (module.has.total()) {\n              module.set.value(value);\n              percentComplete = value / module.total * 100;\n              module.debug('Calculating percent complete from total', percentComplete);\n              module.set.percent(percentComplete);\n            } else {\n              percentComplete = value;\n              module.debug('Setting value to exact percentage value', percentComplete);\n              module.set.percent(percentComplete);\n            }\n          }\n        },\n        setting: function setting(name, value) {\n          module.debug('Changing setting', name, value);\n\n          if ($.isPlainObject(name)) {\n            $.extend(true, _settings, name);\n          } else if (value !== undefined) {\n            if ($.isPlainObject(_settings[name])) {\n              $.extend(true, _settings[name], value);\n            } else {\n              _settings[name] = value;\n            }\n          } else {\n            return _settings[name];\n          }\n        },\n        internal: function internal(name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, module, name);\n          } else if (value !== undefined) {\n            module[name] = value;\n          } else {\n            return module[name];\n          }\n        },\n        debug: function debug() {\n          if (!_settings.silent && _settings.debug) {\n            if (_settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, _settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function verbose() {\n          if (!_settings.silent && _settings.verbose && _settings.debug) {\n            if (_settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, _settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function error() {\n          if (!_settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, _settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function log(message) {\n            var currentTime, executionTime, previousTime;\n\n            if (_settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                'Element': element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 500);\n          },\n          display: function display() {\n            var title = _settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        invoke: function invoke(query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                module.error(error.method, query);\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found;\n        }\n      };\n\n      if (methodInvoked) {\n        if (instance === undefined) {\n          module.initialize();\n        }\n\n        module.invoke(query);\n      } else {\n        if (instance !== undefined) {\n          instance.invoke('destroy');\n        }\n\n        module.initialize();\n      }\n    });\n    return returnedValue !== undefined ? returnedValue : this;\n  };\n\n  $.fn.progress.settings = {\n    name: 'Progress',\n    namespace: 'progress',\n    silent: false,\n    debug: false,\n    verbose: false,\n    performance: true,\n    random: {\n      min: 2,\n      max: 5\n    },\n    duration: 300,\n    updateInterval: 'auto',\n    autoSuccess: true,\n    showActivity: true,\n    limitValues: true,\n    label: 'percent',\n    precision: 0,\n    framerate: 1000 / 30,\n    /// 30 fps\n    percent: false,\n    total: false,\n    value: false,\n    // delay in ms for fail safe animation callback\n    failSafeDelay: 100,\n    onLabelUpdate: function onLabelUpdate(state, text, value, total) {\n      return text;\n    },\n    onChange: function onChange(percent, value, total) {},\n    onSuccess: function onSuccess(total) {},\n    onActive: function onActive(value, total) {},\n    onError: function onError(value, total) {},\n    onWarning: function onWarning(value, total) {},\n    error: {\n      method: 'The method you called is not defined.',\n      nonNumeric: 'Progress value is non numeric',\n      tooHigh: 'Value specified is above 100%',\n      tooLow: 'Value specified is below 0%'\n    },\n    regExp: {\n      variable: /\\{\\$*[A-z0-9]+\\}/g\n    },\n    metadata: {\n      percent: 'percent',\n      total: 'total',\n      value: 'value'\n    },\n    selector: {\n      bar: '> .bar',\n      label: '> .label',\n      progress: '.bar > .progress'\n    },\n    text: {\n      active: false,\n      error: false,\n      success: false,\n      warning: false,\n      percent: '{percent}%',\n      ratio: '{value} of {total}'\n    },\n    className: {\n      active: 'active',\n      error: 'error',\n      success: 'success',\n      warning: 'warning'\n    }\n  };\n})(jQuery, window, document);","map":null,"metadata":{},"sourceType":"module"}