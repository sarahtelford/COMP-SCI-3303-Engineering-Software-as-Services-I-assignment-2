{"ast":null,"code":"/*!\n * # Semantic UI - Sidebar\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.fn.sidebar = function (parameters) {\n    var $allModules = $(this),\n        $window = $(window),\n        $document = $(document),\n        $html = $('html'),\n        $head = $('head'),\n        moduleSelector = $allModules.selector || '',\n        time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n      setTimeout(callback, 0);\n    },\n        returnedValue;\n\n    $allModules.each(function () {\n      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.sidebar.settings, parameters) : $.extend({}, $.fn.sidebar.settings),\n          selector = settings.selector,\n          className = settings.className,\n          namespace = settings.namespace,\n          regExp = settings.regExp,\n          error = settings.error,\n          eventNamespace = '.' + namespace,\n          moduleNamespace = 'module-' + namespace,\n          $module = $(this),\n          $context = $(settings.context),\n          $sidebars = $module.children(selector.sidebar),\n          $fixed = $context.children(selector.fixed),\n          $pusher = $context.children(selector.pusher),\n          $style,\n          element = this,\n          instance = $module.data(moduleNamespace),\n          elementNamespace,\n          _id,\n          currentScroll,\n          transitionEvent,\n          module;\n\n      module = {\n        initialize: function initialize() {\n          module.debug('Initializing sidebar', parameters);\n          module.create.id();\n          transitionEvent = module.get.transitionEvent(); // avoids locking rendering if initialized in onReady\n\n          if (settings.delaySetup) {\n            requestAnimationFrame(module.setup.layout);\n          } else {\n            module.setup.layout();\n          }\n\n          requestAnimationFrame(function () {\n            module.setup.cache();\n          });\n          module.instantiate();\n        },\n        instantiate: function instantiate() {\n          module.verbose('Storing instance of module', module);\n          instance = module;\n          $module.data(moduleNamespace, module);\n        },\n        create: {\n          id: function id() {\n            _id = (Math.random().toString(16) + '000000000').substr(2, 8);\n            elementNamespace = '.' + _id;\n            module.verbose('Creating unique id for element', _id);\n          }\n        },\n        destroy: function destroy() {\n          module.verbose('Destroying previous module for', $module);\n          $module.off(eventNamespace).removeData(moduleNamespace);\n\n          if (module.is.ios()) {\n            module.remove.ios();\n          } // bound by uuid\n\n\n          $context.off(elementNamespace);\n          $window.off(elementNamespace);\n          $document.off(elementNamespace);\n        },\n        event: {\n          clickaway: function clickaway(event) {\n            var clickedInPusher = $pusher.find(event.target).length > 0 || $pusher.is(event.target),\n                clickedContext = $context.is(event.target);\n\n            if (clickedInPusher) {\n              module.verbose('User clicked on dimmed page');\n              module.hide();\n            }\n\n            if (clickedContext) {\n              module.verbose('User clicked on dimmable context (scaled out page)');\n              module.hide();\n            }\n          },\n          touch: function touch(event) {//event.stopPropagation();\n          },\n          containScroll: function containScroll(event) {\n            if (element.scrollTop <= 0) {\n              element.scrollTop = 1;\n            }\n\n            if (element.scrollTop + element.offsetHeight >= element.scrollHeight) {\n              element.scrollTop = element.scrollHeight - element.offsetHeight - 1;\n            }\n          },\n          scroll: function scroll(event) {\n            if ($(event.target).closest(selector.sidebar).length === 0) {\n              event.preventDefault();\n            }\n          }\n        },\n        bind: {\n          clickaway: function clickaway() {\n            module.verbose('Adding clickaway events to context', $context);\n\n            if (settings.closable) {\n              $context.on('click' + elementNamespace, module.event.clickaway).on('touchend' + elementNamespace, module.event.clickaway);\n            }\n          },\n          scrollLock: function scrollLock() {\n            if (settings.scrollLock) {\n              module.debug('Disabling page scroll');\n              $window.on('DOMMouseScroll' + elementNamespace, module.event.scroll);\n            }\n\n            module.verbose('Adding events to contain sidebar scroll');\n            $document.on('touchmove' + elementNamespace, module.event.touch);\n            $module.on('scroll' + eventNamespace, module.event.containScroll);\n          }\n        },\n        unbind: {\n          clickaway: function clickaway() {\n            module.verbose('Removing clickaway events from context', $context);\n            $context.off(elementNamespace);\n          },\n          scrollLock: function scrollLock() {\n            module.verbose('Removing scroll lock from page');\n            $document.off(elementNamespace);\n            $window.off(elementNamespace);\n            $module.off('scroll' + eventNamespace);\n          }\n        },\n        add: {\n          inlineCSS: function inlineCSS() {\n            var width = module.cache.width || $module.outerWidth(),\n                height = module.cache.height || $module.outerHeight(),\n                isRTL = module.is.rtl(),\n                direction = module.get.direction(),\n                distance = {\n              left: width,\n              right: -width,\n              top: height,\n              bottom: -height\n            },\n                style;\n\n            if (isRTL) {\n              module.verbose('RTL detected, flipping widths');\n              distance.left = -width;\n              distance.right = width;\n            }\n\n            style = '<style>';\n\n            if (direction === 'left' || direction === 'right') {\n              module.debug('Adding CSS rules for animation distance', width);\n              style += '' + ' .ui.visible.' + direction + '.sidebar ~ .fixed,' + ' .ui.visible.' + direction + '.sidebar ~ .pusher {' + '   -webkit-transform: translate3d(' + distance[direction] + 'px, 0, 0);' + '           transform: translate3d(' + distance[direction] + 'px, 0, 0);' + ' }';\n            } else if (direction === 'top' || direction == 'bottom') {\n              style += '' + ' .ui.visible.' + direction + '.sidebar ~ .fixed,' + ' .ui.visible.' + direction + '.sidebar ~ .pusher {' + '   -webkit-transform: translate3d(0, ' + distance[direction] + 'px, 0);' + '           transform: translate3d(0, ' + distance[direction] + 'px, 0);' + ' }';\n            }\n            /* IE is only browser not to create context with transforms */\n\n            /* https://www.w3.org/Bugs/Public/show_bug.cgi?id=16328 */\n\n\n            if (module.is.ie()) {\n              if (direction === 'left' || direction === 'right') {\n                module.debug('Adding CSS rules for animation distance', width);\n                style += '' + ' body.pushable > .ui.visible.' + direction + '.sidebar ~ .pusher:after {' + '   -webkit-transform: translate3d(' + distance[direction] + 'px, 0, 0);' + '           transform: translate3d(' + distance[direction] + 'px, 0, 0);' + ' }';\n              } else if (direction === 'top' || direction == 'bottom') {\n                style += '' + ' body.pushable > .ui.visible.' + direction + '.sidebar ~ .pusher:after {' + '   -webkit-transform: translate3d(0, ' + distance[direction] + 'px, 0);' + '           transform: translate3d(0, ' + distance[direction] + 'px, 0);' + ' }';\n              }\n              /* opposite sides visible forces content overlay */\n\n\n              style += '' + ' body.pushable > .ui.visible.left.sidebar ~ .ui.visible.right.sidebar ~ .pusher:after,' + ' body.pushable > .ui.visible.right.sidebar ~ .ui.visible.left.sidebar ~ .pusher:after {' + '   -webkit-transform: translate3d(0px, 0, 0);' + '           transform: translate3d(0px, 0, 0);' + ' }';\n            }\n\n            style += '</style>';\n            $style = $(style).appendTo($head);\n            module.debug('Adding sizing css to head', $style);\n          }\n        },\n        refresh: function refresh() {\n          module.verbose('Refreshing selector cache');\n          $context = $(settings.context);\n          $sidebars = $context.children(selector.sidebar);\n          $pusher = $context.children(selector.pusher);\n          $fixed = $context.children(selector.fixed);\n          module.clear.cache();\n        },\n        refreshSidebars: function refreshSidebars() {\n          module.verbose('Refreshing other sidebars');\n          $sidebars = $context.children(selector.sidebar);\n        },\n        repaint: function repaint() {\n          module.verbose('Forcing repaint event');\n          element.style.display = 'none';\n          var ignored = element.offsetHeight;\n          element.scrollTop = element.scrollTop;\n          element.style.display = '';\n        },\n        setup: {\n          cache: function cache() {\n            module.cache = {\n              width: $module.outerWidth(),\n              height: $module.outerHeight(),\n              rtl: $module.css('direction') == 'rtl'\n            };\n          },\n          layout: function layout() {\n            if ($context.children(selector.pusher).length === 0) {\n              module.debug('Adding wrapper element for sidebar');\n              module.error(error.pusher);\n              $pusher = $('<div class=\"pusher\" />');\n              $context.children().not(selector.omitted).not($sidebars).wrapAll($pusher);\n              module.refresh();\n            }\n\n            if ($module.nextAll(selector.pusher).length === 0 || $module.nextAll(selector.pusher)[0] !== $pusher[0]) {\n              module.debug('Moved sidebar to correct parent element');\n              module.error(error.movedSidebar, element);\n              $module.detach().prependTo($context);\n              module.refresh();\n            }\n\n            module.clear.cache();\n            module.set.pushable();\n            module.set.direction();\n          }\n        },\n        attachEvents: function attachEvents(selector, event) {\n          var $toggle = $(selector);\n          event = $.isFunction(module[event]) ? module[event] : module.toggle;\n\n          if ($toggle.length > 0) {\n            module.debug('Attaching sidebar events to element', selector, event);\n            $toggle.on('click' + eventNamespace, event);\n          } else {\n            module.error(error.notFound, selector);\n          }\n        },\n        show: function show(callback) {\n          callback = $.isFunction(callback) ? callback : function () {};\n\n          if (module.is.hidden()) {\n            module.refreshSidebars();\n\n            if (settings.overlay) {\n              module.error(error.overlay);\n              settings.transition = 'overlay';\n            }\n\n            module.refresh();\n\n            if (module.othersActive()) {\n              module.debug('Other sidebars currently visible');\n\n              if (settings.exclusive) {\n                // if not overlay queue animation after hide\n                if (settings.transition != 'overlay') {\n                  module.hideOthers(module.show);\n                  return;\n                } else {\n                  module.hideOthers();\n                }\n              } else {\n                settings.transition = 'overlay';\n              }\n            }\n\n            module.pushPage(function () {\n              callback.call(element);\n              settings.onShow.call(element);\n            });\n            settings.onChange.call(element);\n            settings.onVisible.call(element);\n          } else {\n            module.debug('Sidebar is already visible');\n          }\n        },\n        hide: function hide(callback) {\n          callback = $.isFunction(callback) ? callback : function () {};\n\n          if (module.is.visible() || module.is.animating()) {\n            module.debug('Hiding sidebar', callback);\n            module.refreshSidebars();\n            module.pullPage(function () {\n              callback.call(element);\n              settings.onHidden.call(element);\n            });\n            settings.onChange.call(element);\n            settings.onHide.call(element);\n          }\n        },\n        othersAnimating: function othersAnimating() {\n          return $sidebars.not($module).filter('.' + className.animating).length > 0;\n        },\n        othersVisible: function othersVisible() {\n          return $sidebars.not($module).filter('.' + className.visible).length > 0;\n        },\n        othersActive: function othersActive() {\n          return module.othersVisible() || module.othersAnimating();\n        },\n        hideOthers: function hideOthers(callback) {\n          var $otherSidebars = $sidebars.not($module).filter('.' + className.visible),\n              sidebarCount = $otherSidebars.length,\n              callbackCount = 0;\n\n          callback = callback || function () {};\n\n          $otherSidebars.sidebar('hide', function () {\n            callbackCount++;\n\n            if (callbackCount == sidebarCount) {\n              callback();\n            }\n          });\n        },\n        toggle: function toggle() {\n          module.verbose('Determining toggled direction');\n\n          if (module.is.hidden()) {\n            module.show();\n          } else {\n            module.hide();\n          }\n        },\n        pushPage: function pushPage(callback) {\n          var transition = module.get.transition(),\n              $transition = transition === 'overlay' || module.othersActive() ? $module : $pusher,\n              animate,\n              dim,\n              _transitionEnd;\n\n          callback = $.isFunction(callback) ? callback : function () {};\n\n          if (settings.transition == 'scale down') {\n            module.scrollToTop();\n          }\n\n          module.set.transition(transition);\n          module.repaint();\n\n          animate = function animate() {\n            module.bind.clickaway();\n            module.add.inlineCSS();\n            module.set.animating();\n            module.set.visible();\n          };\n\n          dim = function dim() {\n            module.set.dimmed();\n          };\n\n          _transitionEnd = function transitionEnd(event) {\n            if (event.target == $transition[0]) {\n              $transition.off(transitionEvent + elementNamespace, _transitionEnd);\n              module.remove.animating();\n              module.bind.scrollLock();\n              callback.call(element);\n            }\n          };\n\n          $transition.off(transitionEvent + elementNamespace);\n          $transition.on(transitionEvent + elementNamespace, _transitionEnd);\n          requestAnimationFrame(animate);\n\n          if (settings.dimPage && !module.othersVisible()) {\n            requestAnimationFrame(dim);\n          }\n        },\n        pullPage: function pullPage(callback) {\n          var transition = module.get.transition(),\n              $transition = transition == 'overlay' || module.othersActive() ? $module : $pusher,\n              animate,\n              _transitionEnd2;\n\n          callback = $.isFunction(callback) ? callback : function () {};\n          module.verbose('Removing context push state', module.get.direction());\n          module.unbind.clickaway();\n          module.unbind.scrollLock();\n\n          animate = function animate() {\n            module.set.transition(transition);\n            module.set.animating();\n            module.remove.visible();\n\n            if (settings.dimPage && !module.othersVisible()) {\n              $pusher.removeClass(className.dimmed);\n            }\n          };\n\n          _transitionEnd2 = function transitionEnd(event) {\n            if (event.target == $transition[0]) {\n              $transition.off(transitionEvent + elementNamespace, _transitionEnd2);\n              module.remove.animating();\n              module.remove.transition();\n              module.remove.inlineCSS();\n\n              if (transition == 'scale down' || settings.returnScroll && module.is.mobile()) {\n                module.scrollBack();\n              }\n\n              callback.call(element);\n            }\n          };\n\n          $transition.off(transitionEvent + elementNamespace);\n          $transition.on(transitionEvent + elementNamespace, _transitionEnd2);\n          requestAnimationFrame(animate);\n        },\n        scrollToTop: function scrollToTop() {\n          module.verbose('Scrolling to top of page to avoid animation issues');\n          currentScroll = $(window).scrollTop();\n          $module.scrollTop(0);\n          window.scrollTo(0, 0);\n        },\n        scrollBack: function scrollBack() {\n          module.verbose('Scrolling back to original page position');\n          window.scrollTo(0, currentScroll);\n        },\n        clear: {\n          cache: function cache() {\n            module.verbose('Clearing cached dimensions');\n            module.cache = {};\n          }\n        },\n        set: {\n          // ios only (scroll on html not document). This prevent auto-resize canvas/scroll in ios\n          // (This is no longer necessary in latest iOS)\n          ios: function ios() {\n            $html.addClass(className.ios);\n          },\n          // container\n          pushed: function pushed() {\n            $context.addClass(className.pushed);\n          },\n          pushable: function pushable() {\n            $context.addClass(className.pushable);\n          },\n          // pusher\n          dimmed: function dimmed() {\n            $pusher.addClass(className.dimmed);\n          },\n          // sidebar\n          active: function active() {\n            $module.addClass(className.active);\n          },\n          animating: function animating() {\n            $module.addClass(className.animating);\n          },\n          transition: function transition(_transition) {\n            _transition = _transition || module.get.transition();\n            $module.addClass(_transition);\n          },\n          direction: function direction(_direction) {\n            _direction = _direction || module.get.direction();\n            $module.addClass(className[_direction]);\n          },\n          visible: function visible() {\n            $module.addClass(className.visible);\n          },\n          overlay: function overlay() {\n            $module.addClass(className.overlay);\n          }\n        },\n        remove: {\n          inlineCSS: function inlineCSS() {\n            module.debug('Removing inline css styles', $style);\n\n            if ($style && $style.length > 0) {\n              $style.remove();\n            }\n          },\n          // ios scroll on html not document\n          ios: function ios() {\n            $html.removeClass(className.ios);\n          },\n          // context\n          pushed: function pushed() {\n            $context.removeClass(className.pushed);\n          },\n          pushable: function pushable() {\n            $context.removeClass(className.pushable);\n          },\n          // sidebar\n          active: function active() {\n            $module.removeClass(className.active);\n          },\n          animating: function animating() {\n            $module.removeClass(className.animating);\n          },\n          transition: function transition(_transition2) {\n            _transition2 = _transition2 || module.get.transition();\n            $module.removeClass(_transition2);\n          },\n          direction: function direction(_direction2) {\n            _direction2 = _direction2 || module.get.direction();\n            $module.removeClass(className[_direction2]);\n          },\n          visible: function visible() {\n            $module.removeClass(className.visible);\n          },\n          overlay: function overlay() {\n            $module.removeClass(className.overlay);\n          }\n        },\n        get: {\n          direction: function direction() {\n            if ($module.hasClass(className.top)) {\n              return className.top;\n            } else if ($module.hasClass(className.right)) {\n              return className.right;\n            } else if ($module.hasClass(className.bottom)) {\n              return className.bottom;\n            }\n\n            return className.left;\n          },\n          transition: function transition() {\n            var direction = module.get.direction(),\n                transition;\n            transition = module.is.mobile() ? settings.mobileTransition == 'auto' ? settings.defaultTransition.mobile[direction] : settings.mobileTransition : settings.transition == 'auto' ? settings.defaultTransition.computer[direction] : settings.transition;\n            module.verbose('Determined transition', transition);\n            return transition;\n          },\n          transitionEvent: function transitionEvent() {\n            var element = document.createElement('element'),\n                transitions = {\n              'transition': 'transitionend',\n              'OTransition': 'oTransitionEnd',\n              'MozTransition': 'transitionend',\n              'WebkitTransition': 'webkitTransitionEnd'\n            },\n                transition;\n\n            for (transition in transitions) {\n              if (element.style[transition] !== undefined) {\n                return transitions[transition];\n              }\n            }\n          }\n        },\n        is: {\n          ie: function ie() {\n            var isIE11 = !window.ActiveXObject && 'ActiveXObject' in window,\n                isIE = ('ActiveXObject' in window);\n            return isIE11 || isIE;\n          },\n          ios: function ios() {\n            var userAgent = navigator.userAgent,\n                isIOS = userAgent.match(regExp.ios),\n                isMobileChrome = userAgent.match(regExp.mobileChrome);\n\n            if (isIOS && !isMobileChrome) {\n              module.verbose('Browser was found to be iOS', userAgent);\n              return true;\n            } else {\n              return false;\n            }\n          },\n          mobile: function mobile() {\n            var userAgent = navigator.userAgent,\n                isMobile = userAgent.match(regExp.mobile);\n\n            if (isMobile) {\n              module.verbose('Browser was found to be mobile', userAgent);\n              return true;\n            } else {\n              module.verbose('Browser is not mobile, using regular transition', userAgent);\n              return false;\n            }\n          },\n          hidden: function hidden() {\n            return !module.is.visible();\n          },\n          visible: function visible() {\n            return $module.hasClass(className.visible);\n          },\n          // alias\n          open: function open() {\n            return module.is.visible();\n          },\n          closed: function closed() {\n            return module.is.hidden();\n          },\n          vertical: function vertical() {\n            return $module.hasClass(className.top);\n          },\n          animating: function animating() {\n            return $context.hasClass(className.animating);\n          },\n          rtl: function rtl() {\n            if (module.cache.rtl === undefined) {\n              module.cache.rtl = $module.css('direction') == 'rtl';\n            }\n\n            return module.cache.rtl;\n          }\n        },\n        setting: function setting(name, value) {\n          module.debug('Changing setting', name, value);\n\n          if ($.isPlainObject(name)) {\n            $.extend(true, settings, name);\n          } else if (value !== undefined) {\n            if ($.isPlainObject(settings[name])) {\n              $.extend(true, settings[name], value);\n            } else {\n              settings[name] = value;\n            }\n          } else {\n            return settings[name];\n          }\n        },\n        internal: function internal(name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, module, name);\n          } else if (value !== undefined) {\n            module[name] = value;\n          } else {\n            return module[name];\n          }\n        },\n        debug: function debug() {\n          if (!settings.silent && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function verbose() {\n          if (!settings.silent && settings.verbose && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function error() {\n          if (!settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function log(message) {\n            var currentTime, executionTime, previousTime;\n\n            if (settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                'Element': element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 500);\n          },\n          display: function display() {\n            var title = settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        invoke: function invoke(query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                module.error(error.method, query);\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found;\n        }\n      };\n\n      if (methodInvoked) {\n        if (instance === undefined) {\n          module.initialize();\n        }\n\n        module.invoke(query);\n      } else {\n        if (instance !== undefined) {\n          module.invoke('destroy');\n        }\n\n        module.initialize();\n      }\n    });\n    return returnedValue !== undefined ? returnedValue : this;\n  };\n\n  $.fn.sidebar.settings = {\n    name: 'Sidebar',\n    namespace: 'sidebar',\n    silent: false,\n    debug: false,\n    verbose: false,\n    performance: true,\n    transition: 'auto',\n    mobileTransition: 'auto',\n    defaultTransition: {\n      computer: {\n        left: 'uncover',\n        right: 'uncover',\n        top: 'overlay',\n        bottom: 'overlay'\n      },\n      mobile: {\n        left: 'uncover',\n        right: 'uncover',\n        top: 'overlay',\n        bottom: 'overlay'\n      }\n    },\n    context: 'body',\n    exclusive: false,\n    closable: true,\n    dimPage: true,\n    scrollLock: false,\n    returnScroll: false,\n    delaySetup: false,\n    duration: 500,\n    onChange: function onChange() {},\n    onShow: function onShow() {},\n    onHide: function onHide() {},\n    onHidden: function onHidden() {},\n    onVisible: function onVisible() {},\n    className: {\n      active: 'active',\n      animating: 'animating',\n      dimmed: 'dimmed',\n      ios: 'ios',\n      pushable: 'pushable',\n      pushed: 'pushed',\n      right: 'right',\n      top: 'top',\n      left: 'left',\n      bottom: 'bottom',\n      visible: 'visible'\n    },\n    selector: {\n      fixed: '.fixed',\n      omitted: 'script, link, style, .ui.modal, .ui.dimmer, .ui.nag, .ui.fixed',\n      pusher: '.pusher',\n      sidebar: '.ui.sidebar'\n    },\n    regExp: {\n      ios: /(iPad|iPhone|iPod)/g,\n      mobileChrome: /(CriOS)/g,\n      mobile: /Mobile|iP(hone|od|ad)|Android|BlackBerry|IEMobile|Kindle|NetFront|Silk-Accelerated|(hpw|web)OS|Fennec|Minimo|Opera M(obi|ini)|Blazer|Dolfin|Dolphin|Skyfire|Zune/g\n    },\n    error: {\n      method: 'The method you called is not defined.',\n      pusher: 'Had to add pusher element. For optimal performance make sure body content is inside a pusher element',\n      movedSidebar: 'Had to move sidebar. For optimal performance make sure sidebar and pusher are direct children of your body tag',\n      overlay: 'The overlay setting is no longer supported, use animation: overlay',\n      notFound: 'There were no elements that matched the specified selector'\n    }\n  };\n})(jQuery, window, document);","map":null,"metadata":{},"sourceType":"module"}