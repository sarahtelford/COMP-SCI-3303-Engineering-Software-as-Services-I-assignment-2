{"ast":null,"code":"/*!\n * # Semantic UI - Visit\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n;\n\n(function ($, window, document, undefined) {\n  \"use strict\";\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.visit = $.fn.visit = function (parameters) {\n    var $allModules = $.isFunction(this) ? $(window) : $(this),\n        moduleSelector = $allModules.selector || '',\n        time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        returnedValue;\n    $allModules.each(function () {\n      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.visit.settings, parameters) : $.extend({}, $.fn.visit.settings),\n          error = settings.error,\n          namespace = settings.namespace,\n          eventNamespace = '.' + namespace,\n          moduleNamespace = namespace + '-module',\n          $module = $(this),\n          $displays = $(),\n          element = this,\n          instance = $module.data(moduleNamespace),\n          module;\n      module = {\n        initialize: function initialize() {\n          if (settings.count) {\n            module.store(settings.key.count, settings.count);\n          } else if (settings.id) {\n            module.add.id(settings.id);\n          } else if (settings.increment && methodInvoked !== 'increment') {\n            module.increment();\n          }\n\n          module.add.display($module);\n          module.instantiate();\n        },\n        instantiate: function instantiate() {\n          module.verbose('Storing instance of visit module', module);\n          instance = module;\n          $module.data(moduleNamespace, module);\n        },\n        destroy: function destroy() {\n          module.verbose('Destroying instance');\n          $module.removeData(moduleNamespace);\n        },\n        increment: function increment(id) {\n          var currentValue = module.get.count(),\n              newValue = +currentValue + 1;\n\n          if (id) {\n            module.add.id(id);\n          } else {\n            if (newValue > settings.limit && !settings.surpass) {\n              newValue = settings.limit;\n            }\n\n            module.debug('Incrementing visits', newValue);\n            module.store(settings.key.count, newValue);\n          }\n        },\n        decrement: function decrement(id) {\n          var currentValue = module.get.count(),\n              newValue = +currentValue - 1;\n\n          if (id) {\n            module.remove.id(id);\n          } else {\n            module.debug('Removing visit');\n            module.store(settings.key.count, newValue);\n          }\n        },\n        get: {\n          count: function count() {\n            return +module.retrieve(settings.key.count) || 0;\n          },\n          idCount: function idCount(ids) {\n            ids = ids || module.get.ids();\n            return ids.length;\n          },\n          ids: function ids(delimitedIDs) {\n            var idArray = [];\n            delimitedIDs = delimitedIDs || module.retrieve(settings.key.ids);\n\n            if (typeof delimitedIDs === 'string') {\n              idArray = delimitedIDs.split(settings.delimiter);\n            }\n\n            module.verbose('Found visited ID list', idArray);\n            return idArray;\n          },\n          storageOptions: function storageOptions(data) {\n            var options = {};\n\n            if (settings.expires) {\n              options.expires = settings.expires;\n            }\n\n            if (settings.domain) {\n              options.domain = settings.domain;\n            }\n\n            if (settings.path) {\n              options.path = settings.path;\n            }\n\n            return options;\n          }\n        },\n        has: {\n          visited: function visited(id, ids) {\n            var visited = false;\n            ids = ids || module.get.ids();\n\n            if (id !== undefined && ids) {\n              $.each(ids, function (index, value) {\n                if (value == id) {\n                  visited = true;\n                }\n              });\n            }\n\n            return visited;\n          }\n        },\n        set: {\n          count: function count(value) {\n            module.store(settings.key.count, value);\n          },\n          ids: function ids(value) {\n            module.store(settings.key.ids, value);\n          }\n        },\n        reset: function reset() {\n          module.store(settings.key.count, 0);\n          module.store(settings.key.ids, null);\n        },\n        add: {\n          id: function id(_id) {\n            var currentIDs = module.retrieve(settings.key.ids),\n                newIDs = currentIDs === undefined || currentIDs === '' ? _id : currentIDs + settings.delimiter + _id;\n\n            if (module.has.visited(_id)) {\n              module.debug('Unique content already visited, not adding visit', _id, currentIDs);\n            } else if (_id === undefined) {\n              module.debug('ID is not defined');\n            } else {\n              module.debug('Adding visit to unique content', _id);\n              module.store(settings.key.ids, newIDs);\n            }\n\n            module.set.count(module.get.idCount());\n          },\n          display: function display(selector) {\n            var $element = $(selector);\n\n            if ($element.length > 0 && !$.isWindow($element[0])) {\n              module.debug('Updating visit count for element', $element);\n              $displays = $displays.length > 0 ? $displays.add($element) : $element;\n            }\n          }\n        },\n        remove: {\n          id: function id(_id2) {\n            var currentIDs = module.get.ids(),\n                newIDs = [];\n\n            if (_id2 !== undefined && currentIDs !== undefined) {\n              module.debug('Removing visit to unique content', _id2, currentIDs);\n              $.each(currentIDs, function (index, value) {\n                if (value !== _id2) {\n                  newIDs.push(value);\n                }\n              });\n              newIDs = newIDs.join(settings.delimiter);\n              module.store(settings.key.ids, newIDs);\n            }\n\n            module.set.count(module.get.idCount());\n          }\n        },\n        check: {\n          limit: function limit(value) {\n            value = value || module.get.count();\n\n            if (settings.limit) {\n              if (value >= settings.limit) {\n                module.debug('Pages viewed exceeded limit, firing callback', value, settings.limit);\n                settings.onLimit.call(element, value);\n              }\n\n              module.debug('Limit not reached', value, settings.limit);\n              settings.onChange.call(element, value);\n            }\n\n            module.update.display(value);\n          }\n        },\n        update: {\n          display: function display(value) {\n            value = value || module.get.count();\n\n            if ($displays.length > 0) {\n              module.debug('Updating displayed view count', $displays);\n              $displays.html(value);\n            }\n          }\n        },\n        store: function store(key, value) {\n          var options = module.get.storageOptions(value);\n\n          if (settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {\n            window.localStorage.setItem(key, value);\n            module.debug('Value stored using local storage', key, value);\n          } else if ($.cookie !== undefined) {\n            $.cookie(key, value, options);\n            module.debug('Value stored using cookie', key, value, options);\n          } else {\n            module.error(error.noCookieStorage);\n            return;\n          }\n\n          if (key == settings.key.count) {\n            module.check.limit(value);\n          }\n        },\n        retrieve: function retrieve(key, value) {\n          var storedValue;\n\n          if (settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {\n            storedValue = window.localStorage.getItem(key);\n          } // get by cookie\n          else if ($.cookie !== undefined) {\n              storedValue = $.cookie(key);\n            } else {\n              module.error(error.noCookieStorage);\n            }\n\n          if (storedValue == 'undefined' || storedValue == 'null' || storedValue === undefined || storedValue === null) {\n            storedValue = undefined;\n          }\n\n          return storedValue;\n        },\n        setting: function setting(name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, settings, name);\n          } else if (value !== undefined) {\n            settings[name] = value;\n          } else {\n            return settings[name];\n          }\n        },\n        internal: function internal(name, value) {\n          module.debug('Changing internal', name, value);\n\n          if (value !== undefined) {\n            if ($.isPlainObject(name)) {\n              $.extend(true, module, name);\n            } else {\n              module[name] = value;\n            }\n          } else {\n            return module[name];\n          }\n        },\n        debug: function debug() {\n          if (!settings.silent && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function verbose() {\n          if (!settings.silent && settings.verbose && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function error() {\n          if (!settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function log(message) {\n            var currentTime, executionTime, previousTime;\n\n            if (settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                'Element': element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 500);\n          },\n          display: function display() {\n            var title = settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ($allModules.length > 1) {\n              title += ' ' + '(' + $allModules.length + ')';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        invoke: function invoke(query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found;\n        }\n      };\n\n      if (methodInvoked) {\n        if (instance === undefined) {\n          module.initialize();\n        }\n\n        module.invoke(query);\n      } else {\n        if (instance !== undefined) {\n          instance.invoke('destroy');\n        }\n\n        module.initialize();\n      }\n    });\n    return returnedValue !== undefined ? returnedValue : this;\n  };\n\n  $.fn.visit.settings = {\n    name: 'Visit',\n    debug: false,\n    verbose: false,\n    performance: true,\n    namespace: 'visit',\n    increment: false,\n    surpass: false,\n    count: false,\n    limit: false,\n    delimiter: '&',\n    storageMethod: 'localstorage',\n    key: {\n      count: 'visit-count',\n      ids: 'visit-ids'\n    },\n    expires: 30,\n    domain: false,\n    path: '/',\n    onLimit: function onLimit() {},\n    onChange: function onChange() {},\n    error: {\n      method: 'The method you called is not defined',\n      missingPersist: 'Using the persist setting requires the inclusion of PersistJS',\n      noCookieStorage: 'The default storage cookie requires $.cookie to be included.'\n    }\n  };\n})(jQuery, window, document);","map":null,"metadata":{},"sourceType":"module"}