{"ast":null,"code":"/*!\n * # Semantic UI - State\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n;\n\n(function ($, window, document, undefined) {\n  \"use strict\";\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.fn.state = function (parameters) {\n    var $allModules = $(this),\n        moduleSelector = $allModules.selector || '',\n        hasTouch = ('ontouchstart' in document.documentElement),\n        time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        returnedValue;\n    $allModules.each(function () {\n      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.state.settings, parameters) : $.extend({}, $.fn.state.settings),\n          error = settings.error,\n          metadata = settings.metadata,\n          className = settings.className,\n          namespace = settings.namespace,\n          states = settings.states,\n          _text = settings.text,\n          eventNamespace = '.' + namespace,\n          moduleNamespace = namespace + '-module',\n          $module = $(this),\n          element = this,\n          instance = $module.data(moduleNamespace),\n          module;\n      module = {\n        initialize: function initialize() {\n          module.verbose('Initializing module'); // allow module to guess desired state based on element\n\n          if (settings.automatic) {\n            module.add.defaults();\n          } // bind events with delegated events\n\n\n          if (settings.context && moduleSelector !== '') {\n            $(settings.context).on(moduleSelector, 'mouseenter' + eventNamespace, module.change.text).on(moduleSelector, 'mouseleave' + eventNamespace, module.reset.text).on(moduleSelector, 'click' + eventNamespace, module.toggle.state);\n          } else {\n            $module.on('mouseenter' + eventNamespace, module.change.text).on('mouseleave' + eventNamespace, module.reset.text).on('click' + eventNamespace, module.toggle.state);\n          }\n\n          module.instantiate();\n        },\n        instantiate: function instantiate() {\n          module.verbose('Storing instance of module', module);\n          instance = module;\n          $module.data(moduleNamespace, module);\n        },\n        destroy: function destroy() {\n          module.verbose('Destroying previous module', instance);\n          $module.off(eventNamespace).removeData(moduleNamespace);\n        },\n        refresh: function refresh() {\n          module.verbose('Refreshing selector cache');\n          $module = $(element);\n        },\n        add: {\n          defaults: function defaults() {\n            var userStates = parameters && $.isPlainObject(parameters.states) ? parameters.states : {};\n            $.each(settings.defaults, function (type, typeStates) {\n              if (module.is[type] !== undefined && module.is[type]()) {\n                module.verbose('Adding default states', type, element);\n                $.extend(settings.states, typeStates, userStates);\n              }\n            });\n          }\n        },\n        is: {\n          active: function active() {\n            return $module.hasClass(className.active);\n          },\n          loading: function loading() {\n            return $module.hasClass(className.loading);\n          },\n          inactive: function inactive() {\n            return !$module.hasClass(className.active);\n          },\n          state: function state(_state) {\n            if (className[_state] === undefined) {\n              return false;\n            }\n\n            return $module.hasClass(className[_state]);\n          },\n          enabled: function enabled() {\n            return !$module.is(settings.filter.active);\n          },\n          disabled: function disabled() {\n            return $module.is(settings.filter.active);\n          },\n          textEnabled: function textEnabled() {\n            return !$module.is(settings.filter.text);\n          },\n          // definitions for automatic type detection\n          button: function button() {\n            return $module.is('.button:not(a, .submit)');\n          },\n          input: function input() {\n            return $module.is('input');\n          },\n          progress: function progress() {\n            return $module.is('.ui.progress');\n          }\n        },\n        allow: function allow(state) {\n          module.debug('Now allowing state', state);\n          states[state] = true;\n        },\n        disallow: function disallow(state) {\n          module.debug('No longer allowing', state);\n          states[state] = false;\n        },\n        allows: function allows(state) {\n          return states[state] || false;\n        },\n        enable: function enable() {\n          $module.removeClass(className.disabled);\n        },\n        disable: function disable() {\n          $module.addClass(className.disabled);\n        },\n        setState: function setState(state) {\n          if (module.allows(state)) {\n            $module.addClass(className[state]);\n          }\n        },\n        removeState: function removeState(state) {\n          if (module.allows(state)) {\n            $module.removeClass(className[state]);\n          }\n        },\n        toggle: {\n          state: function state() {\n            var apiRequest, requestCancelled;\n\n            if (module.allows('active') && module.is.enabled()) {\n              module.refresh();\n\n              if ($.fn.api !== undefined) {\n                apiRequest = $module.api('get request');\n                requestCancelled = $module.api('was cancelled');\n\n                if (requestCancelled) {\n                  module.debug('API Request cancelled by beforesend');\n\n                  settings.activateTest = function () {\n                    return false;\n                  };\n\n                  settings.deactivateTest = function () {\n                    return false;\n                  };\n                } else if (apiRequest) {\n                  module.listenTo(apiRequest);\n                  return;\n                }\n              }\n\n              module.change.state();\n            }\n          }\n        },\n        listenTo: function listenTo(apiRequest) {\n          module.debug('API request detected, waiting for state signal', apiRequest);\n\n          if (apiRequest) {\n            if (_text.loading) {\n              module.update.text(_text.loading);\n            }\n\n            $.when(apiRequest).then(function () {\n              if (apiRequest.state() == 'resolved') {\n                module.debug('API request succeeded');\n\n                settings.activateTest = function () {\n                  return true;\n                };\n\n                settings.deactivateTest = function () {\n                  return true;\n                };\n              } else {\n                module.debug('API request failed');\n\n                settings.activateTest = function () {\n                  return false;\n                };\n\n                settings.deactivateTest = function () {\n                  return false;\n                };\n              }\n\n              module.change.state();\n            });\n          }\n        },\n        // checks whether active/inactive state can be given\n        change: {\n          state: function state() {\n            module.debug('Determining state change direction'); // inactive to active change\n\n            if (module.is.inactive()) {\n              module.activate();\n            } else {\n              module.deactivate();\n            }\n\n            if (settings.sync) {\n              module.sync();\n            }\n\n            settings.onChange.call(element);\n          },\n          text: function text() {\n            if (module.is.textEnabled()) {\n              if (module.is.disabled()) {\n                module.verbose('Changing text to disabled text', _text.hover);\n                module.update.text(_text.disabled);\n              } else if (module.is.active()) {\n                if (_text.hover) {\n                  module.verbose('Changing text to hover text', _text.hover);\n                  module.update.text(_text.hover);\n                } else if (_text.deactivate) {\n                  module.verbose('Changing text to deactivating text', _text.deactivate);\n                  module.update.text(_text.deactivate);\n                }\n              } else {\n                if (_text.hover) {\n                  module.verbose('Changing text to hover text', _text.hover);\n                  module.update.text(_text.hover);\n                } else if (_text.activate) {\n                  module.verbose('Changing text to activating text', _text.activate);\n                  module.update.text(_text.activate);\n                }\n              }\n            }\n          }\n        },\n        activate: function activate() {\n          if (settings.activateTest.call(element)) {\n            module.debug('Setting state to active');\n            $module.addClass(className.active);\n            module.update.text(_text.active);\n            settings.onActivate.call(element);\n          }\n        },\n        deactivate: function deactivate() {\n          if (settings.deactivateTest.call(element)) {\n            module.debug('Setting state to inactive');\n            $module.removeClass(className.active);\n            module.update.text(_text.inactive);\n            settings.onDeactivate.call(element);\n          }\n        },\n        sync: function sync() {\n          module.verbose('Syncing other buttons to current state');\n\n          if (module.is.active()) {\n            $allModules.not($module).state('activate');\n          } else {\n            $allModules.not($module).state('deactivate');\n          }\n        },\n        get: {\n          text: function text() {\n            return settings.selector.text ? $module.find(settings.selector.text).text() : $module.html();\n          },\n          textFor: function textFor(state) {\n            return _text[state] || false;\n          }\n        },\n        flash: {\n          text: function text(_text2, duration, callback) {\n            var previousText = module.get.text();\n            module.debug('Flashing text message', _text2, duration);\n            _text2 = _text2 || settings.text.flash;\n            duration = duration || settings.flashDuration;\n\n            callback = callback || function () {};\n\n            module.update.text(_text2);\n            setTimeout(function () {\n              module.update.text(previousText);\n              callback.call(element);\n            }, duration);\n          }\n        },\n        reset: {\n          // on mouseout sets text to previous value\n          text: function text() {\n            var activeText = _text.active || $module.data(metadata.storedText),\n                inactiveText = _text.inactive || $module.data(metadata.storedText);\n\n            if (module.is.textEnabled()) {\n              if (module.is.active() && activeText) {\n                module.verbose('Resetting active text', activeText);\n                module.update.text(activeText);\n              } else if (inactiveText) {\n                module.verbose('Resetting inactive text', activeText);\n                module.update.text(inactiveText);\n              }\n            }\n          }\n        },\n        update: {\n          text: function text(_text3) {\n            var currentText = module.get.text();\n\n            if (_text3 && _text3 !== currentText) {\n              module.debug('Updating text', _text3);\n\n              if (settings.selector.text) {\n                $module.data(metadata.storedText, _text3).find(settings.selector.text).text(_text3);\n              } else {\n                $module.data(metadata.storedText, _text3).html(_text3);\n              }\n            } else {\n              module.debug('Text is already set, ignoring update', _text3);\n            }\n          }\n        },\n        setting: function setting(name, value) {\n          module.debug('Changing setting', name, value);\n\n          if ($.isPlainObject(name)) {\n            $.extend(true, settings, name);\n          } else if (value !== undefined) {\n            if ($.isPlainObject(settings[name])) {\n              $.extend(true, settings[name], value);\n            } else {\n              settings[name] = value;\n            }\n          } else {\n            return settings[name];\n          }\n        },\n        internal: function internal(name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, module, name);\n          } else if (value !== undefined) {\n            module[name] = value;\n          } else {\n            return module[name];\n          }\n        },\n        debug: function debug() {\n          if (!settings.silent && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function verbose() {\n          if (!settings.silent && settings.verbose && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function error() {\n          if (!settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function log(message) {\n            var currentTime, executionTime, previousTime;\n\n            if (settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                'Element': element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 500);\n          },\n          display: function display() {\n            var title = settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        invoke: function invoke(query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                module.error(error.method, query);\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found;\n        }\n      };\n\n      if (methodInvoked) {\n        if (instance === undefined) {\n          module.initialize();\n        }\n\n        module.invoke(query);\n      } else {\n        if (instance !== undefined) {\n          instance.invoke('destroy');\n        }\n\n        module.initialize();\n      }\n    });\n    return returnedValue !== undefined ? returnedValue : this;\n  };\n\n  $.fn.state.settings = {\n    // module info\n    name: 'State',\n    // debug output\n    debug: false,\n    // verbose debug output\n    verbose: false,\n    // namespace for events\n    namespace: 'state',\n    // debug data includes performance\n    performance: true,\n    // callback occurs on state change\n    onActivate: function onActivate() {},\n    onDeactivate: function onDeactivate() {},\n    onChange: function onChange() {},\n    // state test functions\n    activateTest: function activateTest() {\n      return true;\n    },\n    deactivateTest: function deactivateTest() {\n      return true;\n    },\n    // whether to automatically map default states\n    automatic: true,\n    // activate / deactivate changes all elements instantiated at same time\n    sync: false,\n    // default flash text duration, used for temporarily changing text of an element\n    flashDuration: 1000,\n    // selector filter\n    filter: {\n      text: '.loading, .disabled',\n      active: '.disabled'\n    },\n    context: false,\n    // error\n    error: {\n      beforeSend: 'The before send function has cancelled state change',\n      method: 'The method you called is not defined.'\n    },\n    // metadata\n    metadata: {\n      promise: 'promise',\n      storedText: 'stored-text'\n    },\n    // change class on state\n    className: {\n      active: 'active',\n      disabled: 'disabled',\n      error: 'error',\n      loading: 'loading',\n      success: 'success',\n      warning: 'warning'\n    },\n    selector: {\n      // selector for text node\n      text: false\n    },\n    defaults: {\n      input: {\n        disabled: true,\n        loading: true,\n        active: true\n      },\n      button: {\n        disabled: true,\n        loading: true,\n        active: true\n      },\n      progress: {\n        active: true,\n        success: true,\n        warning: true,\n        error: true\n      }\n    },\n    states: {\n      active: true,\n      disabled: true,\n      error: true,\n      loading: true,\n      success: true,\n      warning: true\n    },\n    text: {\n      disabled: false,\n      flash: false,\n      hover: false,\n      active: false,\n      inactive: false,\n      activate: false,\n      deactivate: false\n    }\n  };\n})(jQuery, window, document);","map":null,"metadata":{},"sourceType":"module"}