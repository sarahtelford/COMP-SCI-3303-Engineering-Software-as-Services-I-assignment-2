{"ast":null,"code":"/*!\n * # Semantic UI - Tab\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.fn.tab = function (parameters) {\n    var // use window context if none specified\n    $allModules = $.isFunction(this) ? $(window) : $(this),\n        moduleSelector = $allModules.selector || '',\n        time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        initializedHistory = false,\n        returnedValue;\n    $allModules.each(function () {\n      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.tab.settings, parameters) : $.extend({}, $.fn.tab.settings),\n          className = settings.className,\n          metadata = settings.metadata,\n          selector = settings.selector,\n          error = settings.error,\n          eventNamespace = '.' + settings.namespace,\n          moduleNamespace = 'module-' + settings.namespace,\n          $module = $(this),\n          $context,\n          $tabs,\n          cache = {},\n          firstLoad = true,\n          recursionDepth = 0,\n          element = this,\n          instance = $module.data(moduleNamespace),\n          activeTabPath,\n          parameterArray,\n          module,\n          historyEvent;\n      module = {\n        initialize: function initialize() {\n          module.debug('Initializing tab menu item', $module);\n          module.fix.callbacks();\n          module.determineTabs();\n          module.debug('Determining tabs', settings.context, $tabs); // set up automatic routing\n\n          if (settings.auto) {\n            module.set.auto();\n          }\n\n          module.bind.events();\n\n          if (settings.history && !initializedHistory) {\n            module.initializeHistory();\n            initializedHistory = true;\n          }\n\n          module.instantiate();\n        },\n        instantiate: function instantiate() {\n          module.verbose('Storing instance of module', module);\n          instance = module;\n          $module.data(moduleNamespace, module);\n        },\n        destroy: function destroy() {\n          module.debug('Destroying tabs', $module);\n          $module.removeData(moduleNamespace).off(eventNamespace);\n        },\n        bind: {\n          events: function events() {\n            // if using $.tab don't add events\n            if (!$.isWindow(element)) {\n              module.debug('Attaching tab activation events to element', $module);\n              $module.on('click' + eventNamespace, module.event.click);\n            }\n          }\n        },\n        determineTabs: function determineTabs() {\n          var $reference; // determine tab context\n\n          if (settings.context === 'parent') {\n            if ($module.closest(selector.ui).length > 0) {\n              $reference = $module.closest(selector.ui);\n              module.verbose('Using closest UI element as parent', $reference);\n            } else {\n              $reference = $module;\n            }\n\n            $context = $reference.parent();\n            module.verbose('Determined parent element for creating context', $context);\n          } else if (settings.context) {\n            $context = $(settings.context);\n            module.verbose('Using selector for tab context', settings.context, $context);\n          } else {\n            $context = $('body');\n          } // find tabs\n\n\n          if (settings.childrenOnly) {\n            $tabs = $context.children(selector.tabs);\n            module.debug('Searching tab context children for tabs', $context, $tabs);\n          } else {\n            $tabs = $context.find(selector.tabs);\n            module.debug('Searching tab context for tabs', $context, $tabs);\n          }\n        },\n        fix: {\n          callbacks: function callbacks() {\n            if ($.isPlainObject(parameters) && (parameters.onTabLoad || parameters.onTabInit)) {\n              if (parameters.onTabLoad) {\n                parameters.onLoad = parameters.onTabLoad;\n                delete parameters.onTabLoad;\n                module.error(error.legacyLoad, parameters.onLoad);\n              }\n\n              if (parameters.onTabInit) {\n                parameters.onFirstLoad = parameters.onTabInit;\n                delete parameters.onTabInit;\n                module.error(error.legacyInit, parameters.onFirstLoad);\n              }\n\n              settings = $.extend(true, {}, $.fn.tab.settings, parameters);\n            }\n          }\n        },\n        initializeHistory: function initializeHistory() {\n          module.debug('Initializing page state');\n\n          if ($.address === undefined) {\n            module.error(error.state);\n            return false;\n          } else {\n            if (settings.historyType == 'state') {\n              module.debug('Using HTML5 to manage state');\n\n              if (settings.path !== false) {\n                $.address.history(true).state(settings.path);\n              } else {\n                module.error(error.path);\n                return false;\n              }\n            }\n\n            $.address.bind('change', module.event.history.change);\n          }\n        },\n        event: {\n          click: function click(event) {\n            var tabPath = $(this).data(metadata.tab);\n\n            if (tabPath !== undefined) {\n              if (settings.history) {\n                module.verbose('Updating page state', event);\n                $.address.value(tabPath);\n              } else {\n                module.verbose('Changing tab', event);\n                module.changeTab(tabPath);\n              }\n\n              event.preventDefault();\n            } else {\n              module.debug('No tab specified');\n            }\n          },\n          history: {\n            change: function change(event) {\n              var tabPath = event.pathNames.join('/') || module.get.initialPath(),\n                  pageTitle = settings.templates.determineTitle(tabPath) || false;\n              module.performance.display();\n              module.debug('History change event', tabPath, event);\n              historyEvent = event;\n\n              if (tabPath !== undefined) {\n                module.changeTab(tabPath);\n              }\n\n              if (pageTitle) {\n                $.address.title(pageTitle);\n              }\n            }\n          }\n        },\n        refresh: function refresh() {\n          if (activeTabPath) {\n            module.debug('Refreshing tab', activeTabPath);\n            module.changeTab(activeTabPath);\n          }\n        },\n        cache: {\n          read: function read(cacheKey) {\n            return cacheKey !== undefined ? cache[cacheKey] : false;\n          },\n          add: function add(cacheKey, content) {\n            cacheKey = cacheKey || activeTabPath;\n            module.debug('Adding cached content for', cacheKey);\n            cache[cacheKey] = content;\n          },\n          remove: function remove(cacheKey) {\n            cacheKey = cacheKey || activeTabPath;\n            module.debug('Removing cached content for', cacheKey);\n            delete cache[cacheKey];\n          }\n        },\n        set: {\n          auto: function auto() {\n            var url = typeof settings.path == 'string' ? settings.path.replace(/\\/$/, '') + '/{$tab}' : '/{$tab}';\n            module.verbose('Setting up automatic tab retrieval from server', url);\n\n            if ($.isPlainObject(settings.apiSettings)) {\n              settings.apiSettings.url = url;\n            } else {\n              settings.apiSettings = {\n                url: url\n              };\n            }\n          },\n          loading: function loading(tabPath) {\n            var $tab = module.get.tabElement(tabPath),\n                isLoading = $tab.hasClass(className.loading);\n\n            if (!isLoading) {\n              module.verbose('Setting loading state for', $tab);\n              $tab.addClass(className.loading).siblings($tabs).removeClass(className.active + ' ' + className.loading);\n\n              if ($tab.length > 0) {\n                settings.onRequest.call($tab[0], tabPath);\n              }\n            }\n          },\n          state: function state(_state) {\n            $.address.value(_state);\n          }\n        },\n        changeTab: function changeTab(tabPath) {\n          var pushStateAvailable = window.history && window.history.pushState,\n              shouldIgnoreLoad = pushStateAvailable && settings.ignoreFirstLoad && firstLoad,\n              remoteContent = settings.auto || $.isPlainObject(settings.apiSettings),\n              // only add default path if not remote content\n          pathArray = remoteContent && !shouldIgnoreLoad ? module.utilities.pathToArray(tabPath) : module.get.defaultPathArray(tabPath);\n          tabPath = module.utilities.arrayToPath(pathArray);\n          $.each(pathArray, function (index, tab) {\n            var currentPathArray = pathArray.slice(0, index + 1),\n                currentPath = module.utilities.arrayToPath(currentPathArray),\n                isTab = module.is.tab(currentPath),\n                isLastIndex = index + 1 == pathArray.length,\n                $tab = module.get.tabElement(currentPath),\n                $anchor,\n                nextPathArray,\n                nextPath,\n                isLastTab;\n            module.verbose('Looking for tab', tab);\n\n            if (isTab) {\n              module.verbose('Tab was found', tab); // scope up\n\n              activeTabPath = currentPath;\n              parameterArray = module.utilities.filterArray(pathArray, currentPathArray);\n\n              if (isLastIndex) {\n                isLastTab = true;\n              } else {\n                nextPathArray = pathArray.slice(0, index + 2);\n                nextPath = module.utilities.arrayToPath(nextPathArray);\n                isLastTab = !module.is.tab(nextPath);\n\n                if (isLastTab) {\n                  module.verbose('Tab parameters found', nextPathArray);\n                }\n              }\n\n              if (isLastTab && remoteContent) {\n                if (!shouldIgnoreLoad) {\n                  module.activate.navigation(currentPath);\n                  module.fetch.content(currentPath, tabPath);\n                } else {\n                  module.debug('Ignoring remote content on first tab load', currentPath);\n                  firstLoad = false;\n                  module.cache.add(tabPath, $tab.html());\n                  module.activate.all(currentPath);\n                  settings.onFirstLoad.call($tab[0], currentPath, parameterArray, historyEvent);\n                  settings.onLoad.call($tab[0], currentPath, parameterArray, historyEvent);\n                }\n\n                return false;\n              } else {\n                module.debug('Opened local tab', currentPath);\n                module.activate.all(currentPath);\n\n                if (!module.cache.read(currentPath)) {\n                  module.cache.add(currentPath, true);\n                  module.debug('First time tab loaded calling tab init');\n                  settings.onFirstLoad.call($tab[0], currentPath, parameterArray, historyEvent);\n                }\n\n                settings.onLoad.call($tab[0], currentPath, parameterArray, historyEvent);\n              }\n            } else if (tabPath.search('/') == -1 && tabPath !== '') {\n              // look for in page anchor\n              $anchor = $('#' + tabPath + ', a[name=\"' + tabPath + '\"]');\n              currentPath = $anchor.closest('[data-tab]').data(metadata.tab);\n              $tab = module.get.tabElement(currentPath); // if anchor exists use parent tab\n\n              if ($anchor && $anchor.length > 0 && currentPath) {\n                module.debug('Anchor link used, opening parent tab', $tab, $anchor);\n\n                if (!$tab.hasClass(className.active)) {\n                  setTimeout(function () {\n                    module.scrollTo($anchor);\n                  }, 0);\n                }\n\n                module.activate.all(currentPath);\n\n                if (!module.cache.read(currentPath)) {\n                  module.cache.add(currentPath, true);\n                  module.debug('First time tab loaded calling tab init');\n                  settings.onFirstLoad.call($tab[0], currentPath, parameterArray, historyEvent);\n                }\n\n                settings.onLoad.call($tab[0], currentPath, parameterArray, historyEvent);\n                return false;\n              }\n            } else {\n              module.error(error.missingTab, $module, $context, currentPath);\n              return false;\n            }\n          });\n        },\n        scrollTo: function scrollTo($element) {\n          var scrollOffset = $element && $element.length > 0 ? $element.offset().top : false;\n\n          if (scrollOffset !== false) {\n            module.debug('Forcing scroll to an in-page link in a hidden tab', scrollOffset, $element);\n            $(document).scrollTop(scrollOffset);\n          }\n        },\n        update: {\n          content: function content(tabPath, html, evaluateScripts) {\n            var $tab = module.get.tabElement(tabPath),\n                tab = $tab[0];\n            evaluateScripts = evaluateScripts !== undefined ? evaluateScripts : settings.evaluateScripts;\n\n            if (typeof settings.cacheType == 'string' && settings.cacheType.toLowerCase() == 'dom' && typeof html !== 'string') {\n              $tab.empty().append($(html).clone(true));\n            } else {\n              if (evaluateScripts) {\n                module.debug('Updating HTML and evaluating inline scripts', tabPath, html);\n                $tab.html(html);\n              } else {\n                module.debug('Updating HTML', tabPath, html);\n                tab.innerHTML = html;\n              }\n            }\n          }\n        },\n        fetch: {\n          content: function content(tabPath, fullTabPath) {\n            var $tab = module.get.tabElement(tabPath),\n                apiSettings = {\n              dataType: 'html',\n              encodeParameters: false,\n              on: 'now',\n              cache: settings.alwaysRefresh,\n              headers: {\n                'X-Remote': true\n              },\n              onSuccess: function onSuccess(response) {\n                if (settings.cacheType == 'response') {\n                  module.cache.add(fullTabPath, response);\n                }\n\n                module.update.content(tabPath, response);\n\n                if (tabPath == activeTabPath) {\n                  module.debug('Content loaded', tabPath);\n                  module.activate.tab(tabPath);\n                } else {\n                  module.debug('Content loaded in background', tabPath);\n                }\n\n                settings.onFirstLoad.call($tab[0], tabPath, parameterArray, historyEvent);\n                settings.onLoad.call($tab[0], tabPath, parameterArray, historyEvent);\n\n                if (settings.loadOnce) {\n                  module.cache.add(fullTabPath, true);\n                } else if (typeof settings.cacheType == 'string' && settings.cacheType.toLowerCase() == 'dom' && $tab.children().length > 0) {\n                  setTimeout(function () {\n                    var $clone = $tab.children().clone(true);\n                    $clone = $clone.not('script');\n                    module.cache.add(fullTabPath, $clone);\n                  }, 0);\n                } else {\n                  module.cache.add(fullTabPath, $tab.html());\n                }\n              },\n              urlData: {\n                tab: fullTabPath\n              }\n            },\n                request = $tab.api('get request') || false,\n                existingRequest = request && request.state() === 'pending',\n                requestSettings,\n                cachedContent;\n            fullTabPath = fullTabPath || tabPath;\n            cachedContent = module.cache.read(fullTabPath);\n\n            if (settings.cache && cachedContent) {\n              module.activate.tab(tabPath);\n              module.debug('Adding cached content', fullTabPath);\n\n              if (!settings.loadOnce) {\n                if (settings.evaluateScripts == 'once') {\n                  module.update.content(tabPath, cachedContent, false);\n                } else {\n                  module.update.content(tabPath, cachedContent);\n                }\n              }\n\n              settings.onLoad.call($tab[0], tabPath, parameterArray, historyEvent);\n            } else if (existingRequest) {\n              module.set.loading(tabPath);\n              module.debug('Content is already loading', fullTabPath);\n            } else if ($.api !== undefined) {\n              requestSettings = $.extend(true, {}, settings.apiSettings, apiSettings);\n              module.debug('Retrieving remote content', fullTabPath, requestSettings);\n              module.set.loading(tabPath);\n              $tab.api(requestSettings);\n            } else {\n              module.error(error.api);\n            }\n          }\n        },\n        activate: {\n          all: function all(tabPath) {\n            module.activate.tab(tabPath);\n            module.activate.navigation(tabPath);\n          },\n          tab: function tab(tabPath) {\n            var $tab = module.get.tabElement(tabPath),\n                $deactiveTabs = settings.deactivate == 'siblings' ? $tab.siblings($tabs) : $tabs.not($tab),\n                isActive = $tab.hasClass(className.active);\n            module.verbose('Showing tab content for', $tab);\n\n            if (!isActive) {\n              $tab.addClass(className.active);\n              $deactiveTabs.removeClass(className.active + ' ' + className.loading);\n\n              if ($tab.length > 0) {\n                settings.onVisible.call($tab[0], tabPath);\n              }\n            }\n          },\n          navigation: function navigation(tabPath) {\n            var $navigation = module.get.navElement(tabPath),\n                $deactiveNavigation = settings.deactivate == 'siblings' ? $navigation.siblings($allModules) : $allModules.not($navigation),\n                isActive = $navigation.hasClass(className.active);\n            module.verbose('Activating tab navigation for', $navigation, tabPath);\n\n            if (!isActive) {\n              $navigation.addClass(className.active);\n              $deactiveNavigation.removeClass(className.active + ' ' + className.loading);\n            }\n          }\n        },\n        deactivate: {\n          all: function all() {\n            module.deactivate.navigation();\n            module.deactivate.tabs();\n          },\n          navigation: function navigation() {\n            $allModules.removeClass(className.active);\n          },\n          tabs: function tabs() {\n            $tabs.removeClass(className.active + ' ' + className.loading);\n          }\n        },\n        is: {\n          tab: function tab(tabName) {\n            return tabName !== undefined ? module.get.tabElement(tabName).length > 0 : false;\n          }\n        },\n        get: {\n          initialPath: function initialPath() {\n            return $allModules.eq(0).data(metadata.tab) || $tabs.eq(0).data(metadata.tab);\n          },\n          path: function path() {\n            return $.address.value();\n          },\n          // adds default tabs to tab path\n          defaultPathArray: function defaultPathArray(tabPath) {\n            return module.utilities.pathToArray(module.get.defaultPath(tabPath));\n          },\n          defaultPath: function defaultPath(tabPath) {\n            var $defaultNav = $allModules.filter('[data-' + metadata.tab + '^=\"' + tabPath + '/\"]').eq(0),\n                defaultTab = $defaultNav.data(metadata.tab) || false;\n\n            if (defaultTab) {\n              module.debug('Found default tab', defaultTab);\n\n              if (recursionDepth < settings.maxDepth) {\n                recursionDepth++;\n                return module.get.defaultPath(defaultTab);\n              }\n\n              module.error(error.recursion);\n            } else {\n              module.debug('No default tabs found for', tabPath, $tabs);\n            }\n\n            recursionDepth = 0;\n            return tabPath;\n          },\n          navElement: function navElement(tabPath) {\n            tabPath = tabPath || activeTabPath;\n            return $allModules.filter('[data-' + metadata.tab + '=\"' + tabPath + '\"]');\n          },\n          tabElement: function tabElement(tabPath) {\n            var $fullPathTab, $simplePathTab, tabPathArray, lastTab;\n            tabPath = tabPath || activeTabPath;\n            tabPathArray = module.utilities.pathToArray(tabPath);\n            lastTab = module.utilities.last(tabPathArray);\n            $fullPathTab = $tabs.filter('[data-' + metadata.tab + '=\"' + tabPath + '\"]');\n            $simplePathTab = $tabs.filter('[data-' + metadata.tab + '=\"' + lastTab + '\"]');\n            return $fullPathTab.length > 0 ? $fullPathTab : $simplePathTab;\n          },\n          tab: function tab() {\n            return activeTabPath;\n          }\n        },\n        utilities: {\n          filterArray: function filterArray(keepArray, removeArray) {\n            return $.grep(keepArray, function (keepValue) {\n              return $.inArray(keepValue, removeArray) == -1;\n            });\n          },\n          last: function last(array) {\n            return $.isArray(array) ? array[array.length - 1] : false;\n          },\n          pathToArray: function pathToArray(pathName) {\n            if (pathName === undefined) {\n              pathName = activeTabPath;\n            }\n\n            return typeof pathName == 'string' ? pathName.split('/') : [pathName];\n          },\n          arrayToPath: function arrayToPath(pathArray) {\n            return $.isArray(pathArray) ? pathArray.join('/') : false;\n          }\n        },\n        setting: function setting(name, value) {\n          module.debug('Changing setting', name, value);\n\n          if ($.isPlainObject(name)) {\n            $.extend(true, settings, name);\n          } else if (value !== undefined) {\n            if ($.isPlainObject(settings[name])) {\n              $.extend(true, settings[name], value);\n            } else {\n              settings[name] = value;\n            }\n          } else {\n            return settings[name];\n          }\n        },\n        internal: function internal(name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, module, name);\n          } else if (value !== undefined) {\n            module[name] = value;\n          } else {\n            return module[name];\n          }\n        },\n        debug: function debug() {\n          if (!settings.silent && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function verbose() {\n          if (!settings.silent && settings.verbose && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function error() {\n          if (!settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function log(message) {\n            var currentTime, executionTime, previousTime;\n\n            if (settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                'Element': element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 500);\n          },\n          display: function display() {\n            var title = settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        invoke: function invoke(query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                module.error(error.method, query);\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found;\n        }\n      };\n\n      if (methodInvoked) {\n        if (instance === undefined) {\n          module.initialize();\n        }\n\n        module.invoke(query);\n      } else {\n        if (instance !== undefined) {\n          instance.invoke('destroy');\n        }\n\n        module.initialize();\n      }\n    });\n    return returnedValue !== undefined ? returnedValue : this;\n  }; // shortcut for tabbed content with no defined navigation\n\n\n  $.tab = function () {\n    $(window).tab.apply(this, arguments);\n  };\n\n  $.fn.tab.settings = {\n    name: 'Tab',\n    namespace: 'tab',\n    silent: false,\n    debug: false,\n    verbose: false,\n    performance: true,\n    auto: false,\n    // uses pjax style endpoints fetching content from same url with remote-content headers\n    history: false,\n    // use browser history\n    historyType: 'hash',\n    // #/ or html5 state\n    path: false,\n    // base path of url\n    context: false,\n    // specify a context that tabs must appear inside\n    childrenOnly: false,\n    // use only tabs that are children of context\n    maxDepth: 25,\n    // max depth a tab can be nested\n    deactivate: 'siblings',\n    // whether tabs should deactivate sibling menu elements or all elements initialized together\n    alwaysRefresh: false,\n    // load tab content new every tab click\n    cache: true,\n    // cache the content requests to pull locally\n    loadOnce: false,\n    // Whether tab data should only be loaded once when using remote content\n    cacheType: 'response',\n    // Whether to cache exact response, or to html cache contents after scripts execute\n    ignoreFirstLoad: false,\n    // don't load remote content on first load\n    apiSettings: false,\n    // settings for api call\n    evaluateScripts: 'once',\n    // whether inline scripts should be parsed (true/false/once). Once will not re-evaluate on cached content\n    onFirstLoad: function onFirstLoad(tabPath, parameterArray, historyEvent) {},\n    // called first time loaded\n    onLoad: function onLoad(tabPath, parameterArray, historyEvent) {},\n    // called on every load\n    onVisible: function onVisible(tabPath, parameterArray, historyEvent) {},\n    // called every time tab visible\n    onRequest: function onRequest(tabPath, parameterArray, historyEvent) {},\n    // called ever time a tab beings loading remote content\n    templates: {\n      determineTitle: function determineTitle(tabArray) {} // returns page title for path\n\n    },\n    error: {\n      api: 'You attempted to load content without API module',\n      method: 'The method you called is not defined',\n      missingTab: 'Activated tab cannot be found. Tabs are case-sensitive.',\n      noContent: 'The tab you specified is missing a content url.',\n      path: 'History enabled, but no path was specified',\n      recursion: 'Max recursive depth reached',\n      legacyInit: 'onTabInit has been renamed to onFirstLoad in 2.0, please adjust your code.',\n      legacyLoad: 'onTabLoad has been renamed to onLoad in 2.0. Please adjust your code',\n      state: 'History requires Asual\\'s Address library <https://github.com/asual/jquery-address>'\n    },\n    metadata: {\n      tab: 'tab',\n      loaded: 'loaded',\n      promise: 'promise'\n    },\n    className: {\n      loading: 'loading',\n      active: 'active'\n    },\n    selector: {\n      tabs: '.ui.tab',\n      ui: '.ui'\n    }\n  };\n})(jQuery, window, document);","map":null,"metadata":{},"sourceType":"module"}