{"ast":null,"code":"/*!\n * # Semantic UI - API\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n\n  var window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.api = $.fn.api = function (parameters) {\n    var // use window context if none specified\n    $allModules = $.isFunction(this) ? $(window) : $(this),\n        moduleSelector = $allModules.selector || '',\n        time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        returnedValue;\n    $allModules.each(function () {\n      var _settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.api.settings, parameters) : $.extend({}, $.fn.api.settings),\n          // internal aliases\n      namespace = _settings.namespace,\n          metadata = _settings.metadata,\n          selector = _settings.selector,\n          error = _settings.error,\n          className = _settings.className,\n          // define namespaces for modules\n      eventNamespace = '.' + namespace,\n          moduleNamespace = 'module-' + namespace,\n          // element that creates request\n      $module = $(this),\n          $form = $module.closest(selector.form),\n          // context used for state\n      $context = _settings.stateContext ? $(_settings.stateContext) : $module,\n          // request details\n      ajaxSettings,\n          requestSettings,\n          url,\n          data,\n          requestStartTime,\n          // standard module\n      element = this,\n          context = $context[0],\n          instance = $module.data(moduleNamespace),\n          module;\n\n      module = {\n        initialize: function initialize() {\n          if (!methodInvoked) {\n            module.bind.events();\n          }\n\n          module.instantiate();\n        },\n        instantiate: function instantiate() {\n          module.verbose('Storing instance of module', module);\n          instance = module;\n          $module.data(moduleNamespace, instance);\n        },\n        destroy: function destroy() {\n          module.verbose('Destroying previous module for', element);\n          $module.removeData(moduleNamespace).off(eventNamespace);\n        },\n        bind: {\n          events: function events() {\n            var triggerEvent = module.get.event();\n\n            if (triggerEvent) {\n              module.verbose('Attaching API events to element', triggerEvent);\n              $module.on(triggerEvent + eventNamespace, module.event.trigger);\n            } else if (_settings.on == 'now') {\n              module.debug('Querying API endpoint immediately');\n              module.query();\n            }\n          }\n        },\n        decode: {\n          json: function json(response) {\n            if (response !== undefined && typeof response == 'string') {\n              try {\n                response = JSON.parse(response);\n              } catch (e) {// isnt json string\n              }\n            }\n\n            return response;\n          }\n        },\n        read: {\n          cachedResponse: function cachedResponse(url) {\n            var response;\n\n            if (window.Storage === undefined) {\n              module.error(error.noStorage);\n              return;\n            }\n\n            response = sessionStorage.getItem(url);\n            module.debug('Using cached response', url, response);\n            response = module.decode.json(response);\n            return response;\n          }\n        },\n        write: {\n          cachedResponse: function cachedResponse(url, response) {\n            if (response && response === '') {\n              module.debug('Response empty, not caching', response);\n              return;\n            }\n\n            if (window.Storage === undefined) {\n              module.error(error.noStorage);\n              return;\n            }\n\n            if ($.isPlainObject(response)) {\n              response = JSON.stringify(response);\n            }\n\n            sessionStorage.setItem(url, response);\n            module.verbose('Storing cached response for url', url, response);\n          }\n        },\n        query: function query() {\n          if (module.is.disabled()) {\n            module.debug('Element is disabled API request aborted');\n            return;\n          }\n\n          if (module.is.loading()) {\n            if (_settings.interruptRequests) {\n              module.debug('Interrupting previous request');\n              module.abort();\n            } else {\n              module.debug('Cancelling request, previous request is still pending');\n              return;\n            }\n          } // pass element metadata to url (value, text)\n\n\n          if (_settings.defaultData) {\n            $.extend(true, _settings.urlData, module.get.defaultData());\n          } // Add form content\n\n\n          if (_settings.serializeForm) {\n            _settings.data = module.add.formData(_settings.data);\n          } // call beforesend and get any settings changes\n\n\n          requestSettings = module.get.settings(); // check if before send cancelled request\n\n          if (requestSettings === false) {\n            module.cancelled = true;\n            module.error(error.beforeSend);\n            return;\n          } else {\n            module.cancelled = false;\n          } // get url\n\n\n          url = module.get.templatedURL();\n\n          if (!url && !module.is.mocked()) {\n            module.error(error.missingURL);\n            return;\n          } // replace variables\n\n\n          url = module.add.urlData(url); // missing url parameters\n\n          if (!url && !module.is.mocked()) {\n            return;\n          }\n\n          requestSettings.url = _settings.base + url; // look for jQuery ajax parameters in settings\n\n          ajaxSettings = $.extend(true, {}, _settings, {\n            type: _settings.method || _settings.type,\n            data: data,\n            url: _settings.base + url,\n            beforeSend: _settings.beforeXHR,\n            success: function success() {},\n            failure: function failure() {},\n            complete: function complete() {}\n          });\n          module.debug('Querying URL', ajaxSettings.url);\n          module.verbose('Using AJAX settings', ajaxSettings);\n\n          if (_settings.cache === 'local' && module.read.cachedResponse(url)) {\n            module.debug('Response returned from local cache');\n            module.request = module.create.request();\n            module.request.resolveWith(context, [module.read.cachedResponse(url)]);\n            return;\n          }\n\n          if (!_settings.throttle) {\n            module.debug('Sending request', data, ajaxSettings.method);\n            module.send.request();\n          } else {\n            if (!_settings.throttleFirstRequest && !module.timer) {\n              module.debug('Sending request', data, ajaxSettings.method);\n              module.send.request();\n              module.timer = setTimeout(function () {}, _settings.throttle);\n            } else {\n              module.debug('Throttling request', _settings.throttle);\n              clearTimeout(module.timer);\n              module.timer = setTimeout(function () {\n                if (module.timer) {\n                  delete module.timer;\n                }\n\n                module.debug('Sending throttled request', data, ajaxSettings.method);\n                module.send.request();\n              }, _settings.throttle);\n            }\n          }\n        },\n        should: {\n          removeError: function removeError() {\n            return _settings.hideError === true || _settings.hideError === 'auto' && !module.is.form();\n          }\n        },\n        is: {\n          disabled: function disabled() {\n            return $module.filter(selector.disabled).length > 0;\n          },\n          expectingJSON: function expectingJSON() {\n            return _settings.dataType === 'json' || _settings.dataType === 'jsonp';\n          },\n          form: function form() {\n            return $module.is('form') || $context.is('form');\n          },\n          mocked: function mocked() {\n            return _settings.mockResponse || _settings.mockResponseAsync || _settings.response || _settings.responseAsync;\n          },\n          input: function input() {\n            return $module.is('input');\n          },\n          loading: function loading() {\n            return module.request ? module.request.state() == 'pending' : false;\n          },\n          abortedRequest: function abortedRequest(xhr) {\n            if (xhr && xhr.readyState !== undefined && xhr.readyState === 0) {\n              module.verbose('XHR request determined to be aborted');\n              return true;\n            } else {\n              module.verbose('XHR request was not aborted');\n              return false;\n            }\n          },\n          validResponse: function validResponse(response) {\n            if (!module.is.expectingJSON() || !$.isFunction(_settings.successTest)) {\n              module.verbose('Response is not JSON, skipping validation', _settings.successTest, response);\n              return true;\n            }\n\n            module.debug('Checking JSON returned success', _settings.successTest, response);\n\n            if (_settings.successTest(response)) {\n              module.debug('Response passed success test', response);\n              return true;\n            } else {\n              module.debug('Response failed success test', response);\n              return false;\n            }\n          }\n        },\n        was: {\n          cancelled: function cancelled() {\n            return module.cancelled || false;\n          },\n          succesful: function succesful() {\n            return module.request && module.request.state() == 'resolved';\n          },\n          failure: function failure() {\n            return module.request && module.request.state() == 'rejected';\n          },\n          complete: function complete() {\n            return module.request && (module.request.state() == 'resolved' || module.request.state() == 'rejected');\n          }\n        },\n        add: {\n          urlData: function urlData(url, _urlData) {\n            var requiredVariables, optionalVariables;\n\n            if (url) {\n              requiredVariables = url.match(_settings.regExp.required);\n              optionalVariables = url.match(_settings.regExp.optional);\n              _urlData = _urlData || _settings.urlData;\n\n              if (requiredVariables) {\n                module.debug('Looking for required URL variables', requiredVariables);\n                $.each(requiredVariables, function (index, templatedString) {\n                  var // allow legacy {$var} style\n                  variable = templatedString.indexOf('$') !== -1 ? templatedString.substr(2, templatedString.length - 3) : templatedString.substr(1, templatedString.length - 2),\n                      value = $.isPlainObject(_urlData) && _urlData[variable] !== undefined ? _urlData[variable] : $module.data(variable) !== undefined ? $module.data(variable) : $context.data(variable) !== undefined ? $context.data(variable) : _urlData[variable]; // remove value\n\n                  if (value === undefined) {\n                    module.error(error.requiredParameter, variable, url);\n                    url = false;\n                    return false;\n                  } else {\n                    module.verbose('Found required variable', variable, value);\n                    value = _settings.encodeParameters ? module.get.urlEncodedValue(value) : value;\n                    url = url.replace(templatedString, value);\n                  }\n                });\n              }\n\n              if (optionalVariables) {\n                module.debug('Looking for optional URL variables', requiredVariables);\n                $.each(optionalVariables, function (index, templatedString) {\n                  var // allow legacy {/$var} style\n                  variable = templatedString.indexOf('$') !== -1 ? templatedString.substr(3, templatedString.length - 4) : templatedString.substr(2, templatedString.length - 3),\n                      value = $.isPlainObject(_urlData) && _urlData[variable] !== undefined ? _urlData[variable] : $module.data(variable) !== undefined ? $module.data(variable) : $context.data(variable) !== undefined ? $context.data(variable) : _urlData[variable]; // optional replacement\n\n                  if (value !== undefined) {\n                    module.verbose('Optional variable Found', variable, value);\n                    url = url.replace(templatedString, value);\n                  } else {\n                    module.verbose('Optional variable not found', variable); // remove preceding slash if set\n\n                    if (url.indexOf('/' + templatedString) !== -1) {\n                      url = url.replace('/' + templatedString, '');\n                    } else {\n                      url = url.replace(templatedString, '');\n                    }\n                  }\n                });\n              }\n            }\n\n            return url;\n          },\n          formData: function formData(data) {\n            var canSerialize = $.fn.serializeObject !== undefined,\n                formData = canSerialize ? $form.serializeObject() : $form.serialize(),\n                hasOtherData;\n            data = data || _settings.data;\n            hasOtherData = $.isPlainObject(data);\n\n            if (hasOtherData) {\n              if (canSerialize) {\n                module.debug('Extending existing data with form data', data, formData);\n                data = $.extend(true, {}, data, formData);\n              } else {\n                module.error(error.missingSerialize);\n                module.debug('Cant extend data. Replacing data with form data', data, formData);\n                data = formData;\n              }\n            } else {\n              module.debug('Adding form data', formData);\n              data = formData;\n            }\n\n            return data;\n          }\n        },\n        send: {\n          request: function request() {\n            module.set.loading();\n            module.request = module.create.request();\n\n            if (module.is.mocked()) {\n              module.mockedXHR = module.create.mockedXHR();\n            } else {\n              module.xhr = module.create.xhr();\n            }\n\n            _settings.onRequest.call(context, module.request, module.xhr);\n          }\n        },\n        event: {\n          trigger: function trigger(event) {\n            module.query();\n\n            if (event.type == 'submit' || event.type == 'click') {\n              event.preventDefault();\n            }\n          },\n          xhr: {\n            always: function always() {// nothing special\n            },\n            done: function done(response, textStatus, xhr) {\n              var context = this,\n                  elapsedTime = new Date().getTime() - requestStartTime,\n                  timeLeft = _settings.loadingDuration - elapsedTime,\n                  translatedResponse = $.isFunction(_settings.onResponse) ? module.is.expectingJSON() ? _settings.onResponse.call(context, $.extend(true, {}, response)) : _settings.onResponse.call(context, response) : false;\n              timeLeft = timeLeft > 0 ? timeLeft : 0;\n\n              if (translatedResponse) {\n                module.debug('Modified API response in onResponse callback', _settings.onResponse, translatedResponse, response);\n                response = translatedResponse;\n              }\n\n              if (timeLeft > 0) {\n                module.debug('Response completed early delaying state change by', timeLeft);\n              }\n\n              setTimeout(function () {\n                if (module.is.validResponse(response)) {\n                  module.request.resolveWith(context, [response, xhr]);\n                } else {\n                  module.request.rejectWith(context, [xhr, 'invalid']);\n                }\n              }, timeLeft);\n            },\n            fail: function fail(xhr, status, httpMessage) {\n              var context = this,\n                  elapsedTime = new Date().getTime() - requestStartTime,\n                  timeLeft = _settings.loadingDuration - elapsedTime;\n              timeLeft = timeLeft > 0 ? timeLeft : 0;\n\n              if (timeLeft > 0) {\n                module.debug('Response completed early delaying state change by', timeLeft);\n              }\n\n              setTimeout(function () {\n                if (module.is.abortedRequest(xhr)) {\n                  module.request.rejectWith(context, [xhr, 'aborted', httpMessage]);\n                } else {\n                  module.request.rejectWith(context, [xhr, 'error', status, httpMessage]);\n                }\n              }, timeLeft);\n            }\n          },\n          request: {\n            done: function done(response, xhr) {\n              module.debug('Successful API Response', response);\n\n              if (_settings.cache === 'local' && url) {\n                module.write.cachedResponse(url, response);\n                module.debug('Saving server response locally', module.cache);\n              }\n\n              _settings.onSuccess.call(context, response, $module, xhr);\n            },\n            complete: function complete(firstParameter, secondParameter) {\n              var xhr, response; // have to guess callback parameters based on request success\n\n              if (module.was.succesful()) {\n                response = firstParameter;\n                xhr = secondParameter;\n              } else {\n                xhr = firstParameter;\n                response = module.get.responseFromXHR(xhr);\n              }\n\n              module.remove.loading();\n\n              _settings.onComplete.call(context, response, $module, xhr);\n            },\n            fail: function fail(xhr, status, httpMessage) {\n              var // pull response from xhr if available\n              response = module.get.responseFromXHR(xhr),\n                  errorMessage = module.get.errorFromRequest(response, status, httpMessage);\n\n              if (status == 'aborted') {\n                module.debug('XHR Aborted (Most likely caused by page navigation or CORS Policy)', status, httpMessage);\n\n                _settings.onAbort.call(context, status, $module, xhr);\n\n                return true;\n              } else if (status == 'invalid') {\n                module.debug('JSON did not pass success test. A server-side error has most likely occurred', response);\n              } else if (status == 'error') {\n                if (xhr !== undefined) {\n                  module.debug('XHR produced a server error', status, httpMessage); // make sure we have an error to display to console\n\n                  if (xhr.status != 200 && httpMessage !== undefined && httpMessage !== '') {\n                    module.error(error.statusMessage + httpMessage, ajaxSettings.url);\n                  }\n\n                  _settings.onError.call(context, errorMessage, $module, xhr);\n                }\n              }\n\n              if (_settings.errorDuration && status !== 'aborted') {\n                module.debug('Adding error state');\n                module.set.error();\n\n                if (module.should.removeError()) {\n                  setTimeout(module.remove.error, _settings.errorDuration);\n                }\n              }\n\n              module.debug('API Request failed', errorMessage, xhr);\n\n              _settings.onFailure.call(context, response, $module, xhr);\n            }\n          }\n        },\n        create: {\n          request: function request() {\n            // api request promise\n            return $.Deferred().always(module.event.request.complete).done(module.event.request.done).fail(module.event.request.fail);\n          },\n          mockedXHR: function mockedXHR() {\n            var // xhr does not simulate these properties of xhr but must return them\n            textStatus = false,\n                status = false,\n                httpMessage = false,\n                responder = _settings.mockResponse || _settings.response,\n                asyncResponder = _settings.mockResponseAsync || _settings.responseAsync,\n                asyncCallback,\n                response,\n                mockedXHR;\n            mockedXHR = $.Deferred().always(module.event.xhr.complete).done(module.event.xhr.done).fail(module.event.xhr.fail);\n\n            if (responder) {\n              if ($.isFunction(responder)) {\n                module.debug('Using specified synchronous callback', responder);\n                response = responder.call(context, requestSettings);\n              } else {\n                module.debug('Using settings specified response', responder);\n                response = responder;\n              } // simulating response\n\n\n              mockedXHR.resolveWith(context, [response, textStatus, {\n                responseText: response\n              }]);\n            } else if ($.isFunction(asyncResponder)) {\n              asyncCallback = function asyncCallback(response) {\n                module.debug('Async callback returned response', response);\n\n                if (response) {\n                  mockedXHR.resolveWith(context, [response, textStatus, {\n                    responseText: response\n                  }]);\n                } else {\n                  mockedXHR.rejectWith(context, [{\n                    responseText: response\n                  }, status, httpMessage]);\n                }\n              };\n\n              module.debug('Using specified async response callback', asyncResponder);\n              asyncResponder.call(context, requestSettings, asyncCallback);\n            }\n\n            return mockedXHR;\n          },\n          xhr: function xhr() {\n            var xhr; // ajax request promise\n\n            xhr = $.ajax(ajaxSettings).always(module.event.xhr.always).done(module.event.xhr.done).fail(module.event.xhr.fail);\n            module.verbose('Created server request', xhr, ajaxSettings);\n            return xhr;\n          }\n        },\n        set: {\n          error: function error() {\n            module.verbose('Adding error state to element', $context);\n            $context.addClass(className.error);\n          },\n          loading: function loading() {\n            module.verbose('Adding loading state to element', $context);\n            $context.addClass(className.loading);\n            requestStartTime = new Date().getTime();\n          }\n        },\n        remove: {\n          error: function error() {\n            module.verbose('Removing error state from element', $context);\n            $context.removeClass(className.error);\n          },\n          loading: function loading() {\n            module.verbose('Removing loading state from element', $context);\n            $context.removeClass(className.loading);\n          }\n        },\n        get: {\n          responseFromXHR: function responseFromXHR(xhr) {\n            return $.isPlainObject(xhr) ? module.is.expectingJSON() ? module.decode.json(xhr.responseText) : xhr.responseText : false;\n          },\n          errorFromRequest: function errorFromRequest(response, status, httpMessage) {\n            return $.isPlainObject(response) && response.error !== undefined ? response.error // use json error message\n            : _settings.error[status] !== undefined ? // use server error message\n            _settings.error[status] : httpMessage;\n          },\n          request: function request() {\n            return module.request || false;\n          },\n          xhr: function xhr() {\n            return module.xhr || false;\n          },\n          settings: function settings() {\n            var runSettings;\n            runSettings = _settings.beforeSend.call(context, _settings);\n\n            if (runSettings) {\n              if (runSettings.success !== undefined) {\n                module.debug('Legacy success callback detected', runSettings);\n                module.error(error.legacyParameters, runSettings.success);\n                runSettings.onSuccess = runSettings.success;\n              }\n\n              if (runSettings.failure !== undefined) {\n                module.debug('Legacy failure callback detected', runSettings);\n                module.error(error.legacyParameters, runSettings.failure);\n                runSettings.onFailure = runSettings.failure;\n              }\n\n              if (runSettings.complete !== undefined) {\n                module.debug('Legacy complete callback detected', runSettings);\n                module.error(error.legacyParameters, runSettings.complete);\n                runSettings.onComplete = runSettings.complete;\n              }\n            }\n\n            if (runSettings === undefined) {\n              module.error(error.noReturnedValue);\n            }\n\n            if (runSettings === false) {\n              return runSettings;\n            }\n\n            return runSettings !== undefined ? $.extend(true, {}, runSettings) : $.extend(true, {}, _settings);\n          },\n          urlEncodedValue: function urlEncodedValue(value) {\n            var decodedValue = window.decodeURIComponent(value),\n                encodedValue = window.encodeURIComponent(value),\n                alreadyEncoded = decodedValue !== value;\n\n            if (alreadyEncoded) {\n              module.debug('URL value is already encoded, avoiding double encoding', value);\n              return value;\n            }\n\n            module.verbose('Encoding value using encodeURIComponent', value, encodedValue);\n            return encodedValue;\n          },\n          defaultData: function defaultData() {\n            var data = {};\n\n            if (!$.isWindow(element)) {\n              if (module.is.input()) {\n                data.value = $module.val();\n              } else if (module.is.form()) {} else {\n                data.text = $module.text();\n              }\n            }\n\n            return data;\n          },\n          event: function event() {\n            if ($.isWindow(element) || _settings.on == 'now') {\n              module.debug('API called without element, no events attached');\n              return false;\n            } else if (_settings.on == 'auto') {\n              if ($module.is('input')) {\n                return element.oninput !== undefined ? 'input' : element.onpropertychange !== undefined ? 'propertychange' : 'keyup';\n              } else if ($module.is('form')) {\n                return 'submit';\n              } else {\n                return 'click';\n              }\n            } else {\n              return _settings.on;\n            }\n          },\n          templatedURL: function templatedURL(action) {\n            action = action || $module.data(metadata.action) || _settings.action || false;\n            url = $module.data(metadata.url) || _settings.url || false;\n\n            if (url) {\n              module.debug('Using specified url', url);\n              return url;\n            }\n\n            if (action) {\n              module.debug('Looking up url for action', action, _settings.api);\n\n              if (_settings.api[action] === undefined && !module.is.mocked()) {\n                module.error(error.missingAction, _settings.action, _settings.api);\n                return;\n              }\n\n              url = _settings.api[action];\n            } else if (module.is.form()) {\n              url = $module.attr('action') || $context.attr('action') || false;\n              module.debug('No url or action specified, defaulting to form action', url);\n            }\n\n            return url;\n          }\n        },\n        abort: function abort() {\n          var xhr = module.get.xhr();\n\n          if (xhr && xhr.state() !== 'resolved') {\n            module.debug('Cancelling API request');\n            xhr.abort();\n          }\n        },\n        // reset state\n        reset: function reset() {\n          module.remove.error();\n          module.remove.loading();\n        },\n        setting: function setting(name, value) {\n          module.debug('Changing setting', name, value);\n\n          if ($.isPlainObject(name)) {\n            $.extend(true, _settings, name);\n          } else if (value !== undefined) {\n            if ($.isPlainObject(_settings[name])) {\n              $.extend(true, _settings[name], value);\n            } else {\n              _settings[name] = value;\n            }\n          } else {\n            return _settings[name];\n          }\n        },\n        internal: function internal(name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, module, name);\n          } else if (value !== undefined) {\n            module[name] = value;\n          } else {\n            return module[name];\n          }\n        },\n        debug: function debug() {\n          if (!_settings.silent && _settings.debug) {\n            if (_settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, _settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function verbose() {\n          if (!_settings.silent && _settings.verbose && _settings.debug) {\n            if (_settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, _settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function error() {\n          if (!_settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, _settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function log(message) {\n            var currentTime, executionTime, previousTime;\n\n            if (_settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                //'Element'        : element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 500);\n          },\n          display: function display() {\n            var title = _settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        invoke: function invoke(query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                module.error(error.method, query);\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found;\n        }\n      };\n\n      if (methodInvoked) {\n        if (instance === undefined) {\n          module.initialize();\n        }\n\n        module.invoke(query);\n      } else {\n        if (instance !== undefined) {\n          instance.invoke('destroy');\n        }\n\n        module.initialize();\n      }\n    });\n    return returnedValue !== undefined ? returnedValue : this;\n  };\n\n  $.api.settings = {\n    name: 'API',\n    namespace: 'api',\n    debug: false,\n    verbose: false,\n    performance: true,\n    // object containing all templates endpoints\n    api: {},\n    // whether to cache responses\n    cache: true,\n    // whether new requests should abort previous requests\n    interruptRequests: true,\n    // event binding\n    on: 'auto',\n    // context for applying state classes\n    stateContext: false,\n    // duration for loading state\n    loadingDuration: 0,\n    // whether to hide errors after a period of time\n    hideError: 'auto',\n    // duration for error state\n    errorDuration: 2000,\n    // whether parameters should be encoded with encodeURIComponent\n    encodeParameters: true,\n    // API action to use\n    action: false,\n    // templated URL to use\n    url: false,\n    // base URL to apply to all endpoints\n    base: '',\n    // data that will\n    urlData: {},\n    // whether to add default data to url data\n    defaultData: true,\n    // whether to serialize closest form\n    serializeForm: false,\n    // how long to wait before request should occur\n    throttle: 0,\n    // whether to throttle first request or only repeated\n    throttleFirstRequest: true,\n    // standard ajax settings\n    method: 'get',\n    data: {},\n    dataType: 'json',\n    // mock response\n    mockResponse: false,\n    mockResponseAsync: false,\n    // aliases for mock\n    response: false,\n    responseAsync: false,\n    // callbacks before request\n    beforeSend: function beforeSend(settings) {\n      return settings;\n    },\n    beforeXHR: function beforeXHR(xhr) {},\n    onRequest: function onRequest(promise, xhr) {},\n    // after request\n    onResponse: false,\n    // function(response) { },\n    // response was successful, if JSON passed validation\n    onSuccess: function onSuccess(response, $module) {},\n    // request finished without aborting\n    onComplete: function onComplete(response, $module) {},\n    // failed JSON success test\n    onFailure: function onFailure(response, $module) {},\n    // server error\n    onError: function onError(errorMessage, $module) {},\n    // request aborted\n    onAbort: function onAbort(errorMessage, $module) {},\n    successTest: false,\n    // errors\n    error: {\n      beforeSend: 'The before send function has aborted the request',\n      error: 'There was an error with your request',\n      exitConditions: 'API Request Aborted. Exit conditions met',\n      JSONParse: 'JSON could not be parsed during error handling',\n      legacyParameters: 'You are using legacy API success callback names',\n      method: 'The method you called is not defined',\n      missingAction: 'API action used but no url was defined',\n      missingSerialize: 'jquery-serialize-object is required to add form data to an existing data object',\n      missingURL: 'No URL specified for api event',\n      noReturnedValue: 'The beforeSend callback must return a settings object, beforeSend ignored.',\n      noStorage: 'Caching responses locally requires session storage',\n      parseError: 'There was an error parsing your request',\n      requiredParameter: 'Missing a required URL parameter: ',\n      statusMessage: 'Server gave an error: ',\n      timeout: 'Your request timed out'\n    },\n    regExp: {\n      required: /\\{\\$*[A-z0-9]+\\}/g,\n      optional: /\\{\\/\\$*[A-z0-9]+\\}/g\n    },\n    className: {\n      loading: 'loading',\n      error: 'error'\n    },\n    selector: {\n      disabled: '.disabled',\n      form: 'form'\n    },\n    metadata: {\n      action: 'action',\n      url: 'url'\n    }\n  };\n})(jQuery, window, document);","map":null,"metadata":{},"sourceType":"module"}