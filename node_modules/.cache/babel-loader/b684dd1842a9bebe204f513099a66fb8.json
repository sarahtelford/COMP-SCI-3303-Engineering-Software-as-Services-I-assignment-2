{"ast":null,"code":"/*!\n * # Semantic UI - Visibility\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.fn.visibility = function (parameters) {\n    var $allModules = $(this),\n        moduleSelector = $allModules.selector || '',\n        time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        returnedValue,\n        moduleCount = $allModules.length,\n        loadedCount = 0;\n    $allModules.each(function () {\n      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.visibility.settings, parameters) : $.extend({}, $.fn.visibility.settings),\n          className = settings.className,\n          namespace = settings.namespace,\n          error = settings.error,\n          metadata = settings.metadata,\n          eventNamespace = '.' + namespace,\n          moduleNamespace = 'module-' + namespace,\n          $window = $(window),\n          $module = $(this),\n          $context = $(settings.context),\n          $placeholder,\n          selector = $module.selector || '',\n          instance = $module.data(moduleNamespace),\n          requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n        setTimeout(callback, 0);\n      },\n          element = this,\n          disabled = false,\n          contextObserver,\n          observer,\n          module;\n\n      module = {\n        initialize: function initialize() {\n          module.debug('Initializing', settings);\n          module.setup.cache();\n\n          if (module.should.trackChanges()) {\n            if (settings.type == 'image') {\n              module.setup.image();\n            }\n\n            if (settings.type == 'fixed') {\n              module.setup.fixed();\n            }\n\n            if (settings.observeChanges) {\n              module.observeChanges();\n            }\n\n            module.bind.events();\n          }\n\n          module.save.position();\n\n          if (!module.is.visible()) {\n            module.error(error.visible, $module);\n          }\n\n          if (settings.initialCheck) {\n            module.checkVisibility();\n          }\n\n          module.instantiate();\n        },\n        instantiate: function instantiate() {\n          module.debug('Storing instance', module);\n          $module.data(moduleNamespace, module);\n          instance = module;\n        },\n        destroy: function destroy() {\n          module.verbose('Destroying previous module');\n\n          if (observer) {\n            observer.disconnect();\n          }\n\n          if (contextObserver) {\n            contextObserver.disconnect();\n          }\n\n          $window.off('load' + eventNamespace, module.event.load).off('resize' + eventNamespace, module.event.resize);\n          $context.off('scroll' + eventNamespace, module.event.scroll).off('scrollchange' + eventNamespace, module.event.scrollchange);\n\n          if (settings.type == 'fixed') {\n            module.resetFixed();\n            module.remove.placeholder();\n          }\n\n          $module.off(eventNamespace).removeData(moduleNamespace);\n        },\n        observeChanges: function observeChanges() {\n          if ('MutationObserver' in window) {\n            contextObserver = new MutationObserver(module.event.contextChanged);\n            observer = new MutationObserver(module.event.changed);\n            contextObserver.observe(document, {\n              childList: true,\n              subtree: true\n            });\n            observer.observe(element, {\n              childList: true,\n              subtree: true\n            });\n            module.debug('Setting up mutation observer', observer);\n          }\n        },\n        bind: {\n          events: function events() {\n            module.verbose('Binding visibility events to scroll and resize');\n\n            if (settings.refreshOnLoad) {\n              $window.on('load' + eventNamespace, module.event.load);\n            }\n\n            $window.on('resize' + eventNamespace, module.event.resize); // pub/sub pattern\n\n            $context.off('scroll' + eventNamespace).on('scroll' + eventNamespace, module.event.scroll).on('scrollchange' + eventNamespace, module.event.scrollchange);\n          }\n        },\n        event: {\n          changed: function changed(mutations) {\n            module.verbose('DOM tree modified, updating visibility calculations');\n            module.timer = setTimeout(function () {\n              module.verbose('DOM tree modified, updating sticky menu');\n              module.refresh();\n            }, 100);\n          },\n          contextChanged: function contextChanged(mutations) {\n            [].forEach.call(mutations, function (mutation) {\n              if (mutation.removedNodes) {\n                [].forEach.call(mutation.removedNodes, function (node) {\n                  if (node == element || $(node).find(element).length > 0) {\n                    module.debug('Element removed from DOM, tearing down events');\n                    module.destroy();\n                  }\n                });\n              }\n            });\n          },\n          resize: function resize() {\n            module.debug('Window resized');\n\n            if (settings.refreshOnResize) {\n              requestAnimationFrame(module.refresh);\n            }\n          },\n          load: function load() {\n            module.debug('Page finished loading');\n            requestAnimationFrame(module.refresh);\n          },\n          // publishes scrollchange event on one scroll\n          scroll: function scroll() {\n            if (settings.throttle) {\n              clearTimeout(module.timer);\n              module.timer = setTimeout(function () {\n                $context.triggerHandler('scrollchange' + eventNamespace, [$context.scrollTop()]);\n              }, settings.throttle);\n            } else {\n              requestAnimationFrame(function () {\n                $context.triggerHandler('scrollchange' + eventNamespace, [$context.scrollTop()]);\n              });\n            }\n          },\n          // subscribes to scrollchange\n          scrollchange: function scrollchange(event, scrollPosition) {\n            module.checkVisibility(scrollPosition);\n          }\n        },\n        precache: function precache(images, callback) {\n          if (!(images instanceof Array)) {\n            images = [images];\n          }\n\n          var imagesLength = images.length,\n              loadedCounter = 0,\n              cache = [],\n              cacheImage = document.createElement('img'),\n              handleLoad = function handleLoad() {\n            loadedCounter++;\n\n            if (loadedCounter >= images.length) {\n              if ($.isFunction(callback)) {\n                callback();\n              }\n            }\n          };\n\n          while (imagesLength--) {\n            cacheImage = document.createElement('img');\n            cacheImage.onload = handleLoad;\n            cacheImage.onerror = handleLoad;\n            cacheImage.src = images[imagesLength];\n            cache.push(cacheImage);\n          }\n        },\n        enableCallbacks: function enableCallbacks() {\n          module.debug('Allowing callbacks to occur');\n          disabled = false;\n        },\n        disableCallbacks: function disableCallbacks() {\n          module.debug('Disabling all callbacks temporarily');\n          disabled = true;\n        },\n        should: {\n          trackChanges: function trackChanges() {\n            if (methodInvoked) {\n              module.debug('One time query, no need to bind events');\n              return false;\n            }\n\n            module.debug('Callbacks being attached');\n            return true;\n          }\n        },\n        setup: {\n          cache: function cache() {\n            module.cache = {\n              occurred: {},\n              screen: {},\n              element: {}\n            };\n          },\n          image: function image() {\n            var src = $module.data(metadata.src);\n\n            if (src) {\n              module.verbose('Lazy loading image', src);\n              settings.once = true;\n              settings.observeChanges = false; // show when top visible\n\n              settings.onOnScreen = function () {\n                module.debug('Image on screen', element);\n                module.precache(src, function () {\n                  module.set.image(src, function () {\n                    loadedCount++;\n\n                    if (loadedCount == moduleCount) {\n                      settings.onAllLoaded.call(this);\n                    }\n\n                    settings.onLoad.call(this);\n                  });\n                });\n              };\n            }\n          },\n          fixed: function fixed() {\n            module.debug('Setting up fixed');\n            settings.once = false;\n            settings.observeChanges = false;\n            settings.initialCheck = true;\n            settings.refreshOnLoad = true;\n\n            if (!parameters.transition) {\n              settings.transition = false;\n            }\n\n            module.create.placeholder();\n            module.debug('Added placeholder', $placeholder);\n\n            settings.onTopPassed = function () {\n              module.debug('Element passed, adding fixed position', $module);\n              module.show.placeholder();\n              module.set.fixed();\n\n              if (settings.transition) {\n                if ($.fn.transition !== undefined) {\n                  $module.transition(settings.transition, settings.duration);\n                }\n              }\n            };\n\n            settings.onTopPassedReverse = function () {\n              module.debug('Element returned to position, removing fixed', $module);\n              module.hide.placeholder();\n              module.remove.fixed();\n            };\n          }\n        },\n        create: {\n          placeholder: function placeholder() {\n            module.verbose('Creating fixed position placeholder');\n            $placeholder = $module.clone(false).css('display', 'none').addClass(className.placeholder).insertAfter($module);\n          }\n        },\n        show: {\n          placeholder: function placeholder() {\n            module.verbose('Showing placeholder');\n            $placeholder.css('display', 'block').css('visibility', 'hidden');\n          }\n        },\n        hide: {\n          placeholder: function placeholder() {\n            module.verbose('Hiding placeholder');\n            $placeholder.css('display', 'none').css('visibility', '');\n          }\n        },\n        set: {\n          fixed: function fixed() {\n            module.verbose('Setting element to fixed position');\n            $module.addClass(className.fixed).css({\n              position: 'fixed',\n              top: settings.offset + 'px',\n              left: 'auto',\n              zIndex: settings.zIndex\n            });\n            settings.onFixed.call(element);\n          },\n          image: function image(src, callback) {\n            $module.attr('src', src);\n\n            if (settings.transition) {\n              if ($.fn.transition !== undefined) {\n                if ($module.hasClass(className.visible)) {\n                  module.debug('Transition already occurred on this image, skipping animation');\n                  return;\n                }\n\n                $module.transition(settings.transition, settings.duration, callback);\n              } else {\n                $module.fadeIn(settings.duration, callback);\n              }\n            } else {\n              $module.show();\n            }\n          }\n        },\n        is: {\n          onScreen: function onScreen() {\n            var calculations = module.get.elementCalculations();\n            return calculations.onScreen;\n          },\n          offScreen: function offScreen() {\n            var calculations = module.get.elementCalculations();\n            return calculations.offScreen;\n          },\n          visible: function visible() {\n            if (module.cache && module.cache.element) {\n              return !(module.cache.element.width === 0 && module.cache.element.offset.top === 0);\n            }\n\n            return false;\n          },\n          verticallyScrollableContext: function verticallyScrollableContext() {\n            var overflowY = $context.get(0) !== window ? $context.css('overflow-y') : false;\n            return overflowY == 'auto' || overflowY == 'scroll';\n          },\n          horizontallyScrollableContext: function horizontallyScrollableContext() {\n            var overflowX = $context.get(0) !== window ? $context.css('overflow-x') : false;\n            return overflowX == 'auto' || overflowX == 'scroll';\n          }\n        },\n        refresh: function refresh() {\n          module.debug('Refreshing constants (width/height)');\n\n          if (settings.type == 'fixed') {\n            module.resetFixed();\n          }\n\n          module.reset();\n          module.save.position();\n\n          if (settings.checkOnRefresh) {\n            module.checkVisibility();\n          }\n\n          settings.onRefresh.call(element);\n        },\n        resetFixed: function resetFixed() {\n          module.remove.fixed();\n          module.remove.occurred();\n        },\n        reset: function reset() {\n          module.verbose('Resetting all cached values');\n\n          if ($.isPlainObject(module.cache)) {\n            module.cache.screen = {};\n            module.cache.element = {};\n          }\n        },\n        checkVisibility: function checkVisibility(scroll) {\n          module.verbose('Checking visibility of element', module.cache.element);\n\n          if (!disabled && module.is.visible()) {\n            // save scroll position\n            module.save.scroll(scroll); // update calculations derived from scroll\n\n            module.save.calculations(); // percentage\n\n            module.passed(); // reverse (must be first)\n\n            module.passingReverse();\n            module.topVisibleReverse();\n            module.bottomVisibleReverse();\n            module.topPassedReverse();\n            module.bottomPassedReverse(); // one time\n\n            module.onScreen();\n            module.offScreen();\n            module.passing();\n            module.topVisible();\n            module.bottomVisible();\n            module.topPassed();\n            module.bottomPassed(); // on update callback\n\n            if (settings.onUpdate) {\n              settings.onUpdate.call(element, module.get.elementCalculations());\n            }\n          }\n        },\n        passed: function passed(amount, newCallback) {\n          var calculations = module.get.elementCalculations(),\n              amountInPixels; // assign callback\n\n          if (amount && newCallback) {\n            settings.onPassed[amount] = newCallback;\n          } else if (amount !== undefined) {\n            return module.get.pixelsPassed(amount) > calculations.pixelsPassed;\n          } else if (calculations.passing) {\n            $.each(settings.onPassed, function (amount, callback) {\n              if (calculations.bottomVisible || calculations.pixelsPassed > module.get.pixelsPassed(amount)) {\n                module.execute(callback, amount);\n              } else if (!settings.once) {\n                module.remove.occurred(callback);\n              }\n            });\n          }\n        },\n        onScreen: function onScreen(newCallback) {\n          var calculations = module.get.elementCalculations(),\n              callback = newCallback || settings.onOnScreen,\n              callbackName = 'onScreen';\n\n          if (newCallback) {\n            module.debug('Adding callback for onScreen', newCallback);\n            settings.onOnScreen = newCallback;\n          }\n\n          if (calculations.onScreen) {\n            module.execute(callback, callbackName);\n          } else if (!settings.once) {\n            module.remove.occurred(callbackName);\n          }\n\n          if (newCallback !== undefined) {\n            return calculations.onOnScreen;\n          }\n        },\n        offScreen: function offScreen(newCallback) {\n          var calculations = module.get.elementCalculations(),\n              callback = newCallback || settings.onOffScreen,\n              callbackName = 'offScreen';\n\n          if (newCallback) {\n            module.debug('Adding callback for offScreen', newCallback);\n            settings.onOffScreen = newCallback;\n          }\n\n          if (calculations.offScreen) {\n            module.execute(callback, callbackName);\n          } else if (!settings.once) {\n            module.remove.occurred(callbackName);\n          }\n\n          if (newCallback !== undefined) {\n            return calculations.onOffScreen;\n          }\n        },\n        passing: function passing(newCallback) {\n          var calculations = module.get.elementCalculations(),\n              callback = newCallback || settings.onPassing,\n              callbackName = 'passing';\n\n          if (newCallback) {\n            module.debug('Adding callback for passing', newCallback);\n            settings.onPassing = newCallback;\n          }\n\n          if (calculations.passing) {\n            module.execute(callback, callbackName);\n          } else if (!settings.once) {\n            module.remove.occurred(callbackName);\n          }\n\n          if (newCallback !== undefined) {\n            return calculations.passing;\n          }\n        },\n        topVisible: function topVisible(newCallback) {\n          var calculations = module.get.elementCalculations(),\n              callback = newCallback || settings.onTopVisible,\n              callbackName = 'topVisible';\n\n          if (newCallback) {\n            module.debug('Adding callback for top visible', newCallback);\n            settings.onTopVisible = newCallback;\n          }\n\n          if (calculations.topVisible) {\n            module.execute(callback, callbackName);\n          } else if (!settings.once) {\n            module.remove.occurred(callbackName);\n          }\n\n          if (newCallback === undefined) {\n            return calculations.topVisible;\n          }\n        },\n        bottomVisible: function bottomVisible(newCallback) {\n          var calculations = module.get.elementCalculations(),\n              callback = newCallback || settings.onBottomVisible,\n              callbackName = 'bottomVisible';\n\n          if (newCallback) {\n            module.debug('Adding callback for bottom visible', newCallback);\n            settings.onBottomVisible = newCallback;\n          }\n\n          if (calculations.bottomVisible) {\n            module.execute(callback, callbackName);\n          } else if (!settings.once) {\n            module.remove.occurred(callbackName);\n          }\n\n          if (newCallback === undefined) {\n            return calculations.bottomVisible;\n          }\n        },\n        topPassed: function topPassed(newCallback) {\n          var calculations = module.get.elementCalculations(),\n              callback = newCallback || settings.onTopPassed,\n              callbackName = 'topPassed';\n\n          if (newCallback) {\n            module.debug('Adding callback for top passed', newCallback);\n            settings.onTopPassed = newCallback;\n          }\n\n          if (calculations.topPassed) {\n            module.execute(callback, callbackName);\n          } else if (!settings.once) {\n            module.remove.occurred(callbackName);\n          }\n\n          if (newCallback === undefined) {\n            return calculations.topPassed;\n          }\n        },\n        bottomPassed: function bottomPassed(newCallback) {\n          var calculations = module.get.elementCalculations(),\n              callback = newCallback || settings.onBottomPassed,\n              callbackName = 'bottomPassed';\n\n          if (newCallback) {\n            module.debug('Adding callback for bottom passed', newCallback);\n            settings.onBottomPassed = newCallback;\n          }\n\n          if (calculations.bottomPassed) {\n            module.execute(callback, callbackName);\n          } else if (!settings.once) {\n            module.remove.occurred(callbackName);\n          }\n\n          if (newCallback === undefined) {\n            return calculations.bottomPassed;\n          }\n        },\n        passingReverse: function passingReverse(newCallback) {\n          var calculations = module.get.elementCalculations(),\n              callback = newCallback || settings.onPassingReverse,\n              callbackName = 'passingReverse';\n\n          if (newCallback) {\n            module.debug('Adding callback for passing reverse', newCallback);\n            settings.onPassingReverse = newCallback;\n          }\n\n          if (!calculations.passing) {\n            if (module.get.occurred('passing')) {\n              module.execute(callback, callbackName);\n            }\n          } else if (!settings.once) {\n            module.remove.occurred(callbackName);\n          }\n\n          if (newCallback !== undefined) {\n            return !calculations.passing;\n          }\n        },\n        topVisibleReverse: function topVisibleReverse(newCallback) {\n          var calculations = module.get.elementCalculations(),\n              callback = newCallback || settings.onTopVisibleReverse,\n              callbackName = 'topVisibleReverse';\n\n          if (newCallback) {\n            module.debug('Adding callback for top visible reverse', newCallback);\n            settings.onTopVisibleReverse = newCallback;\n          }\n\n          if (!calculations.topVisible) {\n            if (module.get.occurred('topVisible')) {\n              module.execute(callback, callbackName);\n            }\n          } else if (!settings.once) {\n            module.remove.occurred(callbackName);\n          }\n\n          if (newCallback === undefined) {\n            return !calculations.topVisible;\n          }\n        },\n        bottomVisibleReverse: function bottomVisibleReverse(newCallback) {\n          var calculations = module.get.elementCalculations(),\n              callback = newCallback || settings.onBottomVisibleReverse,\n              callbackName = 'bottomVisibleReverse';\n\n          if (newCallback) {\n            module.debug('Adding callback for bottom visible reverse', newCallback);\n            settings.onBottomVisibleReverse = newCallback;\n          }\n\n          if (!calculations.bottomVisible) {\n            if (module.get.occurred('bottomVisible')) {\n              module.execute(callback, callbackName);\n            }\n          } else if (!settings.once) {\n            module.remove.occurred(callbackName);\n          }\n\n          if (newCallback === undefined) {\n            return !calculations.bottomVisible;\n          }\n        },\n        topPassedReverse: function topPassedReverse(newCallback) {\n          var calculations = module.get.elementCalculations(),\n              callback = newCallback || settings.onTopPassedReverse,\n              callbackName = 'topPassedReverse';\n\n          if (newCallback) {\n            module.debug('Adding callback for top passed reverse', newCallback);\n            settings.onTopPassedReverse = newCallback;\n          }\n\n          if (!calculations.topPassed) {\n            if (module.get.occurred('topPassed')) {\n              module.execute(callback, callbackName);\n            }\n          } else if (!settings.once) {\n            module.remove.occurred(callbackName);\n          }\n\n          if (newCallback === undefined) {\n            return !calculations.onTopPassed;\n          }\n        },\n        bottomPassedReverse: function bottomPassedReverse(newCallback) {\n          var calculations = module.get.elementCalculations(),\n              callback = newCallback || settings.onBottomPassedReverse,\n              callbackName = 'bottomPassedReverse';\n\n          if (newCallback) {\n            module.debug('Adding callback for bottom passed reverse', newCallback);\n            settings.onBottomPassedReverse = newCallback;\n          }\n\n          if (!calculations.bottomPassed) {\n            if (module.get.occurred('bottomPassed')) {\n              module.execute(callback, callbackName);\n            }\n          } else if (!settings.once) {\n            module.remove.occurred(callbackName);\n          }\n\n          if (newCallback === undefined) {\n            return !calculations.bottomPassed;\n          }\n        },\n        execute: function execute(callback, callbackName) {\n          var calculations = module.get.elementCalculations(),\n              screen = module.get.screenCalculations();\n          callback = callback || false;\n\n          if (callback) {\n            if (settings.continuous) {\n              module.debug('Callback being called continuously', callbackName, calculations);\n              callback.call(element, calculations, screen);\n            } else if (!module.get.occurred(callbackName)) {\n              module.debug('Conditions met', callbackName, calculations);\n              callback.call(element, calculations, screen);\n            }\n          }\n\n          module.save.occurred(callbackName);\n        },\n        remove: {\n          fixed: function fixed() {\n            module.debug('Removing fixed position');\n            $module.removeClass(className.fixed).css({\n              position: '',\n              top: '',\n              left: '',\n              zIndex: ''\n            });\n            settings.onUnfixed.call(element);\n          },\n          placeholder: function placeholder() {\n            module.debug('Removing placeholder content');\n\n            if ($placeholder) {\n              $placeholder.remove();\n            }\n          },\n          occurred: function occurred(callback) {\n            if (callback) {\n              var occurred = module.cache.occurred;\n\n              if (occurred[callback] !== undefined && occurred[callback] === true) {\n                module.debug('Callback can now be called again', callback);\n                module.cache.occurred[callback] = false;\n              }\n            } else {\n              module.cache.occurred = {};\n            }\n          }\n        },\n        save: {\n          calculations: function calculations() {\n            module.verbose('Saving all calculations necessary to determine positioning');\n            module.save.direction();\n            module.save.screenCalculations();\n            module.save.elementCalculations();\n          },\n          occurred: function occurred(callback) {\n            if (callback) {\n              if (module.cache.occurred[callback] === undefined || module.cache.occurred[callback] !== true) {\n                module.verbose('Saving callback occurred', callback);\n                module.cache.occurred[callback] = true;\n              }\n            }\n          },\n          scroll: function scroll(scrollPosition) {\n            scrollPosition = scrollPosition + settings.offset || $context.scrollTop() + settings.offset;\n            module.cache.scroll = scrollPosition;\n          },\n          direction: function direction() {\n            var scroll = module.get.scroll(),\n                lastScroll = module.get.lastScroll(),\n                direction;\n\n            if (scroll > lastScroll && lastScroll) {\n              direction = 'down';\n            } else if (scroll < lastScroll && lastScroll) {\n              direction = 'up';\n            } else {\n              direction = 'static';\n            }\n\n            module.cache.direction = direction;\n            return module.cache.direction;\n          },\n          elementPosition: function elementPosition() {\n            var element = module.cache.element,\n                screen = module.get.screenSize();\n            module.verbose('Saving element position'); // (quicker than $.extend)\n\n            element.fits = element.height < screen.height;\n            element.offset = $module.offset();\n            element.width = $module.outerWidth();\n            element.height = $module.outerHeight(); // compensate for scroll in context\n\n            if (module.is.verticallyScrollableContext()) {\n              element.offset.top += $context.scrollTop() - $context.offset().top;\n            }\n\n            if (module.is.horizontallyScrollableContext()) {\n              element.offset.left += $context.scrollLeft - $context.offset().left;\n            } // store\n\n\n            module.cache.element = element;\n            return element;\n          },\n          elementCalculations: function elementCalculations() {\n            var screen = module.get.screenCalculations(),\n                element = module.get.elementPosition(); // offset\n\n            if (settings.includeMargin) {\n              element.margin = {};\n              element.margin.top = parseInt($module.css('margin-top'), 10);\n              element.margin.bottom = parseInt($module.css('margin-bottom'), 10);\n              element.top = element.offset.top - element.margin.top;\n              element.bottom = element.offset.top + element.height + element.margin.bottom;\n            } else {\n              element.top = element.offset.top;\n              element.bottom = element.offset.top + element.height;\n            } // visibility\n\n\n            element.topPassed = screen.top >= element.top;\n            element.bottomPassed = screen.top >= element.bottom;\n            element.topVisible = screen.bottom >= element.top && !element.topPassed;\n            element.bottomVisible = screen.bottom >= element.bottom && !element.bottomPassed;\n            element.pixelsPassed = 0;\n            element.percentagePassed = 0; // meta calculations\n\n            element.onScreen = (element.topVisible || element.passing) && !element.bottomPassed;\n            element.passing = element.topPassed && !element.bottomPassed;\n            element.offScreen = !element.onScreen; // passing calculations\n\n            if (element.passing) {\n              element.pixelsPassed = screen.top - element.top;\n              element.percentagePassed = (screen.top - element.top) / element.height;\n            }\n\n            module.cache.element = element;\n            module.verbose('Updated element calculations', element);\n            return element;\n          },\n          screenCalculations: function screenCalculations() {\n            var scroll = module.get.scroll();\n            module.save.direction();\n            module.cache.screen.top = scroll;\n            module.cache.screen.bottom = scroll + module.cache.screen.height;\n            return module.cache.screen;\n          },\n          screenSize: function screenSize() {\n            module.verbose('Saving window position');\n            module.cache.screen = {\n              height: $context.height()\n            };\n          },\n          position: function position() {\n            module.save.screenSize();\n            module.save.elementPosition();\n          }\n        },\n        get: {\n          pixelsPassed: function pixelsPassed(amount) {\n            var element = module.get.elementCalculations();\n\n            if (amount.search('%') > -1) {\n              return element.height * (parseInt(amount, 10) / 100);\n            }\n\n            return parseInt(amount, 10);\n          },\n          occurred: function occurred(callback) {\n            return module.cache.occurred !== undefined ? module.cache.occurred[callback] || false : false;\n          },\n          direction: function direction() {\n            if (module.cache.direction === undefined) {\n              module.save.direction();\n            }\n\n            return module.cache.direction;\n          },\n          elementPosition: function elementPosition() {\n            if (module.cache.element === undefined) {\n              module.save.elementPosition();\n            }\n\n            return module.cache.element;\n          },\n          elementCalculations: function elementCalculations() {\n            if (module.cache.element === undefined) {\n              module.save.elementCalculations();\n            }\n\n            return module.cache.element;\n          },\n          screenCalculations: function screenCalculations() {\n            if (module.cache.screen === undefined) {\n              module.save.screenCalculations();\n            }\n\n            return module.cache.screen;\n          },\n          screenSize: function screenSize() {\n            if (module.cache.screen === undefined) {\n              module.save.screenSize();\n            }\n\n            return module.cache.screen;\n          },\n          scroll: function scroll() {\n            if (module.cache.scroll === undefined) {\n              module.save.scroll();\n            }\n\n            return module.cache.scroll;\n          },\n          lastScroll: function lastScroll() {\n            if (module.cache.screen === undefined) {\n              module.debug('First scroll event, no last scroll could be found');\n              return false;\n            }\n\n            return module.cache.screen.top;\n          }\n        },\n        setting: function setting(name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, settings, name);\n          } else if (value !== undefined) {\n            settings[name] = value;\n          } else {\n            return settings[name];\n          }\n        },\n        internal: function internal(name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, module, name);\n          } else if (value !== undefined) {\n            module[name] = value;\n          } else {\n            return module[name];\n          }\n        },\n        debug: function debug() {\n          if (!settings.silent && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function verbose() {\n          if (!settings.silent && settings.verbose && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function error() {\n          if (!settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function log(message) {\n            var currentTime, executionTime, previousTime;\n\n            if (settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                'Element': element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 500);\n          },\n          display: function display() {\n            var title = settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        invoke: function invoke(query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                module.error(error.method, query);\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found;\n        }\n      };\n\n      if (methodInvoked) {\n        if (instance === undefined) {\n          module.initialize();\n        }\n\n        instance.save.scroll();\n        instance.save.calculations();\n        module.invoke(query);\n      } else {\n        if (instance !== undefined) {\n          instance.invoke('destroy');\n        }\n\n        module.initialize();\n      }\n    });\n    return returnedValue !== undefined ? returnedValue : this;\n  };\n\n  $.fn.visibility.settings = {\n    name: 'Visibility',\n    namespace: 'visibility',\n    debug: false,\n    verbose: false,\n    performance: true,\n    // whether to use mutation observers to follow changes\n    observeChanges: true,\n    // check position immediately on init\n    initialCheck: true,\n    // whether to refresh calculations after all page images load\n    refreshOnLoad: true,\n    // whether to refresh calculations after page resize event\n    refreshOnResize: true,\n    // should call callbacks on refresh event (resize, etc)\n    checkOnRefresh: true,\n    // callback should only occur one time\n    once: true,\n    // callback should fire continuously whe evaluates to true\n    continuous: false,\n    // offset to use with scroll top\n    offset: 0,\n    // whether to include margin in elements position\n    includeMargin: false,\n    // scroll context for visibility checks\n    context: window,\n    // visibility check delay in ms (defaults to animationFrame)\n    throttle: false,\n    // special visibility type (image, fixed)\n    type: false,\n    // z-index to use with visibility 'fixed'\n    zIndex: '10',\n    // image only animation settings\n    transition: 'fade in',\n    duration: 1000,\n    // array of callbacks for percentage\n    onPassed: {},\n    // standard callbacks\n    onOnScreen: false,\n    onOffScreen: false,\n    onPassing: false,\n    onTopVisible: false,\n    onBottomVisible: false,\n    onTopPassed: false,\n    onBottomPassed: false,\n    // reverse callbacks\n    onPassingReverse: false,\n    onTopVisibleReverse: false,\n    onBottomVisibleReverse: false,\n    onTopPassedReverse: false,\n    onBottomPassedReverse: false,\n    // special callbacks for image\n    onLoad: function onLoad() {},\n    onAllLoaded: function onAllLoaded() {},\n    // special callbacks for fixed position\n    onFixed: function onFixed() {},\n    onUnfixed: function onUnfixed() {},\n    // utility callbacks\n    onUpdate: false,\n    // disabled by default for performance\n    onRefresh: function onRefresh() {},\n    metadata: {\n      src: 'src'\n    },\n    className: {\n      fixed: 'fixed',\n      placeholder: 'placeholder',\n      visible: 'visible'\n    },\n    error: {\n      method: 'The method you called is not defined.',\n      visible: 'Element is hidden, you must call refresh after element becomes visible'\n    }\n  };\n})(jQuery, window, document);","map":null,"metadata":{},"sourceType":"module"}