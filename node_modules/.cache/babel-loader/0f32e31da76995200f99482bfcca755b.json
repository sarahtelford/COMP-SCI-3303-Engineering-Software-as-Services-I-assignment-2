{"ast":null,"code":"/*!\n * # Semantic UI - Nag\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.fn.nag = function (parameters) {\n    var $allModules = $(this),\n        moduleSelector = $allModules.selector || '',\n        time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        returnedValue;\n    $allModules.each(function () {\n      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.nag.settings, parameters) : $.extend({}, $.fn.nag.settings),\n          className = settings.className,\n          selector = settings.selector,\n          error = settings.error,\n          namespace = settings.namespace,\n          eventNamespace = '.' + namespace,\n          moduleNamespace = namespace + '-module',\n          $module = $(this),\n          $close = $module.find(selector.close),\n          $context = settings.context ? $(settings.context) : $('body'),\n          element = this,\n          instance = $module.data(moduleNamespace),\n          moduleOffset,\n          moduleHeight,\n          contextWidth,\n          contextHeight,\n          contextOffset,\n          yOffset,\n          yPosition,\n          timer,\n          module,\n          requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n        setTimeout(callback, 0);\n      };\n\n      module = {\n        initialize: function initialize() {\n          module.verbose('Initializing element');\n          $module.on('click' + eventNamespace, selector.close, module.dismiss).data(moduleNamespace, module);\n\n          if (settings.detachable && $module.parent()[0] !== $context[0]) {\n            $module.detach().prependTo($context);\n          }\n\n          if (settings.displayTime > 0) {\n            setTimeout(module.hide, settings.displayTime);\n          }\n\n          module.show();\n        },\n        destroy: function destroy() {\n          module.verbose('Destroying instance');\n          $module.removeData(moduleNamespace).off(eventNamespace);\n        },\n        show: function show() {\n          if (module.should.show() && !$module.is(':visible')) {\n            module.debug('Showing nag', settings.animation.show);\n\n            if (settings.animation.show == 'fade') {\n              $module.fadeIn(settings.duration, settings.easing);\n            } else {\n              $module.slideDown(settings.duration, settings.easing);\n            }\n          }\n        },\n        hide: function hide() {\n          module.debug('Showing nag', settings.animation.hide);\n\n          if (settings.animation.show == 'fade') {\n            $module.fadeIn(settings.duration, settings.easing);\n          } else {\n            $module.slideUp(settings.duration, settings.easing);\n          }\n        },\n        onHide: function onHide() {\n          module.debug('Removing nag', settings.animation.hide);\n          $module.remove();\n\n          if (settings.onHide) {\n            settings.onHide();\n          }\n        },\n        dismiss: function dismiss(event) {\n          if (settings.storageMethod) {\n            module.storage.set(settings.key, settings.value);\n          }\n\n          module.hide();\n          event.stopImmediatePropagation();\n          event.preventDefault();\n        },\n        should: {\n          show: function show() {\n            if (settings.persist) {\n              module.debug('Persistent nag is set, can show nag');\n              return true;\n            }\n\n            if (module.storage.get(settings.key) != settings.value.toString()) {\n              module.debug('Stored value is not set, can show nag', module.storage.get(settings.key));\n              return true;\n            }\n\n            module.debug('Stored value is set, cannot show nag', module.storage.get(settings.key));\n            return false;\n          }\n        },\n        get: {\n          storageOptions: function storageOptions() {\n            var options = {};\n\n            if (settings.expires) {\n              options.expires = settings.expires;\n            }\n\n            if (settings.domain) {\n              options.domain = settings.domain;\n            }\n\n            if (settings.path) {\n              options.path = settings.path;\n            }\n\n            return options;\n          }\n        },\n        clear: function clear() {\n          module.storage.remove(settings.key);\n        },\n        storage: {\n          set: function set(key, value) {\n            var options = module.get.storageOptions();\n\n            if (settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {\n              window.localStorage.setItem(key, value);\n              module.debug('Value stored using local storage', key, value);\n            } else if (settings.storageMethod == 'sessionstorage' && window.sessionStorage !== undefined) {\n              window.sessionStorage.setItem(key, value);\n              module.debug('Value stored using session storage', key, value);\n            } else if ($.cookie !== undefined) {\n              $.cookie(key, value, options);\n              module.debug('Value stored using cookie', key, value, options);\n            } else {\n              module.error(error.noCookieStorage);\n              return;\n            }\n          },\n          get: function get(key, value) {\n            var storedValue;\n\n            if (settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {\n              storedValue = window.localStorage.getItem(key);\n            } else if (settings.storageMethod == 'sessionstorage' && window.sessionStorage !== undefined) {\n              storedValue = window.sessionStorage.getItem(key);\n            } // get by cookie\n            else if ($.cookie !== undefined) {\n                storedValue = $.cookie(key);\n              } else {\n                module.error(error.noCookieStorage);\n              }\n\n            if (storedValue == 'undefined' || storedValue == 'null' || storedValue === undefined || storedValue === null) {\n              storedValue = undefined;\n            }\n\n            return storedValue;\n          },\n          remove: function remove(key) {\n            var options = module.get.storageOptions();\n\n            if (settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {\n              window.localStorage.removeItem(key);\n            } else if (settings.storageMethod == 'sessionstorage' && window.sessionStorage !== undefined) {\n              window.sessionStorage.removeItem(key);\n            } // store by cookie\n            else if ($.cookie !== undefined) {\n                $.removeCookie(key, options);\n              } else {\n                module.error(error.noStorage);\n              }\n          }\n        },\n        setting: function setting(name, value) {\n          module.debug('Changing setting', name, value);\n\n          if ($.isPlainObject(name)) {\n            $.extend(true, settings, name);\n          } else if (value !== undefined) {\n            if ($.isPlainObject(settings[name])) {\n              $.extend(true, settings[name], value);\n            } else {\n              settings[name] = value;\n            }\n          } else {\n            return settings[name];\n          }\n        },\n        internal: function internal(name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, module, name);\n          } else if (value !== undefined) {\n            module[name] = value;\n          } else {\n            return module[name];\n          }\n        },\n        debug: function debug() {\n          if (!settings.silent && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function verbose() {\n          if (!settings.silent && settings.verbose && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function error() {\n          if (!settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function log(message) {\n            var currentTime, executionTime, previousTime;\n\n            if (settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                'Element': element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 500);\n          },\n          display: function display() {\n            var title = settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        invoke: function invoke(query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                module.error(error.method, query);\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found;\n        }\n      };\n\n      if (methodInvoked) {\n        if (instance === undefined) {\n          module.initialize();\n        }\n\n        module.invoke(query);\n      } else {\n        if (instance !== undefined) {\n          instance.invoke('destroy');\n        }\n\n        module.initialize();\n      }\n    });\n    return returnedValue !== undefined ? returnedValue : this;\n  };\n\n  $.fn.nag.settings = {\n    name: 'Nag',\n    silent: false,\n    debug: false,\n    verbose: false,\n    performance: true,\n    namespace: 'Nag',\n    // allows cookie to be overridden\n    persist: false,\n    // set to zero to require manually dismissal, otherwise hides on its own\n    displayTime: 0,\n    animation: {\n      show: 'slide',\n      hide: 'slide'\n    },\n    context: false,\n    detachable: false,\n    expires: 30,\n    domain: false,\n    path: '/',\n    // type of storage to use\n    storageMethod: 'cookie',\n    // value to store in dismissed localstorage/cookie\n    key: 'nag',\n    value: 'dismiss',\n    error: {\n      noCookieStorage: '$.cookie is not included. A storage solution is required.',\n      noStorage: 'Neither $.cookie or store is defined. A storage solution is required for storing state',\n      method: 'The method you called is not defined.'\n    },\n    className: {\n      bottom: 'bottom',\n      fixed: 'fixed'\n    },\n    selector: {\n      close: '.close.icon'\n    },\n    speed: 500,\n    easing: 'easeOutQuad',\n    onHide: function onHide() {}\n  }; // Adds easing\n\n  $.extend($.easing, {\n    easeOutQuad: function easeOutQuad(x, t, b, c, d) {\n      return -c * (t /= d) * (t - 2) + b;\n    }\n  });\n})(jQuery, window, document);","map":null,"metadata":{},"sourceType":"module"}