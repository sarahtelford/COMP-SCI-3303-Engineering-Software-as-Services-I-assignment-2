{"ast":null,"code":"/*!\n * # Semantic UI - Site\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n;\n\n(function ($, window, document, undefined) {\n  $.site = $.fn.site = function (parameters) {\n    var time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        _settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.site.settings, parameters) : $.extend({}, $.site.settings),\n        namespace = _settings.namespace,\n        error = _settings.error,\n        eventNamespace = '.' + namespace,\n        moduleNamespace = 'module-' + namespace,\n        $document = $(document),\n        $module = $document,\n        element = this,\n        instance = $module.data(moduleNamespace),\n        module,\n        returnedValue;\n\n    module = {\n      initialize: function initialize() {\n        module.instantiate();\n      },\n      instantiate: function instantiate() {\n        module.verbose('Storing instance of site', module);\n        instance = module;\n        $module.data(moduleNamespace, module);\n      },\n      normalize: function normalize() {\n        module.fix.console();\n        module.fix.requestAnimationFrame();\n      },\n      fix: {\n        console: function (_console) {\n          function console() {\n            return _console.apply(this, arguments);\n          }\n\n          console.toString = function () {\n            return _console.toString();\n          };\n\n          return console;\n        }(function () {\n          module.debug('Normalizing window.console');\n\n          if (console === undefined || console.log === undefined) {\n            module.verbose('Console not available, normalizing events');\n            module.disable.console();\n          }\n\n          if (typeof console.group == 'undefined' || typeof console.groupEnd == 'undefined' || typeof console.groupCollapsed == 'undefined') {\n            module.verbose('Console group not available, normalizing events');\n\n            window.console.group = function () {};\n\n            window.console.groupEnd = function () {};\n\n            window.console.groupCollapsed = function () {};\n          }\n\n          if (typeof console.markTimeline == 'undefined') {\n            module.verbose('Mark timeline not available, normalizing events');\n\n            window.console.markTimeline = function () {};\n          }\n        }),\n        consoleClear: function consoleClear() {\n          module.debug('Disabling programmatic console clearing');\n\n          window.console.clear = function () {};\n        },\n        requestAnimationFrame: function requestAnimationFrame() {\n          module.debug('Normalizing requestAnimationFrame');\n\n          if (window.requestAnimationFrame === undefined) {\n            module.debug('RequestAnimationFrame not available, normalizing event');\n\n            window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n              setTimeout(callback, 0);\n            };\n          }\n        }\n      },\n      moduleExists: function moduleExists(name) {\n        return $.fn[name] !== undefined && $.fn[name].settings !== undefined;\n      },\n      enabled: {\n        modules: function modules(_modules) {\n          var enabledModules = [];\n          _modules = _modules || _settings.modules;\n          $.each(_modules, function (index, name) {\n            if (module.moduleExists(name)) {\n              enabledModules.push(name);\n            }\n          });\n          return enabledModules;\n        }\n      },\n      disabled: {\n        modules: function modules(_modules2) {\n          var disabledModules = [];\n          _modules2 = _modules2 || _settings.modules;\n          $.each(_modules2, function (index, name) {\n            if (!module.moduleExists(name)) {\n              disabledModules.push(name);\n            }\n          });\n          return disabledModules;\n        }\n      },\n      change: {\n        setting: function setting(_setting, value, modules, modifyExisting) {\n          modules = typeof modules === 'string' ? modules === 'all' ? _settings.modules : [modules] : modules || _settings.modules;\n          modifyExisting = modifyExisting !== undefined ? modifyExisting : true;\n          $.each(modules, function (index, name) {\n            var namespace = module.moduleExists(name) ? $.fn[name].settings.namespace || false : true,\n                $existingModules;\n\n            if (module.moduleExists(name)) {\n              module.verbose('Changing default setting', _setting, value, name);\n              $.fn[name].settings[_setting] = value;\n\n              if (modifyExisting && namespace) {\n                $existingModules = $(':data(module-' + namespace + ')');\n\n                if ($existingModules.length > 0) {\n                  module.verbose('Modifying existing settings', $existingModules);\n                  $existingModules[name]('setting', _setting, value);\n                }\n              }\n            }\n          });\n        },\n        settings: function settings(newSettings, modules, modifyExisting) {\n          modules = typeof modules === 'string' ? [modules] : modules || _settings.modules;\n          modifyExisting = modifyExisting !== undefined ? modifyExisting : true;\n          $.each(modules, function (index, name) {\n            var $existingModules;\n\n            if (module.moduleExists(name)) {\n              module.verbose('Changing default setting', newSettings, name);\n              $.extend(true, $.fn[name].settings, newSettings);\n\n              if (modifyExisting && namespace) {\n                $existingModules = $(':data(module-' + namespace + ')');\n\n                if ($existingModules.length > 0) {\n                  module.verbose('Modifying existing settings', $existingModules);\n                  $existingModules[name]('setting', newSettings);\n                }\n              }\n            }\n          });\n        }\n      },\n      enable: {\n        console: function console() {\n          module.console(true);\n        },\n        debug: function debug(modules, modifyExisting) {\n          modules = modules || _settings.modules;\n          module.debug('Enabling debug for modules', modules);\n          module.change.setting('debug', true, modules, modifyExisting);\n        },\n        verbose: function verbose(modules, modifyExisting) {\n          modules = modules || _settings.modules;\n          module.debug('Enabling verbose debug for modules', modules);\n          module.change.setting('verbose', true, modules, modifyExisting);\n        }\n      },\n      disable: {\n        console: function console() {\n          module.console(false);\n        },\n        debug: function debug(modules, modifyExisting) {\n          modules = modules || _settings.modules;\n          module.debug('Disabling debug for modules', modules);\n          module.change.setting('debug', false, modules, modifyExisting);\n        },\n        verbose: function verbose(modules, modifyExisting) {\n          modules = modules || _settings.modules;\n          module.debug('Disabling verbose debug for modules', modules);\n          module.change.setting('verbose', false, modules, modifyExisting);\n        }\n      },\n      console: function console(enable) {\n        if (enable) {\n          if (instance.cache.console === undefined) {\n            module.error(error.console);\n            return;\n          }\n\n          module.debug('Restoring console function');\n          window.console = instance.cache.console;\n        } else {\n          module.debug('Disabling console function');\n          instance.cache.console = window.console;\n          window.console = {\n            clear: function clear() {},\n            error: function error() {},\n            group: function group() {},\n            groupCollapsed: function groupCollapsed() {},\n            groupEnd: function groupEnd() {},\n            info: function info() {},\n            log: function log() {},\n            markTimeline: function markTimeline() {},\n            warn: function warn() {}\n          };\n        }\n      },\n      destroy: function destroy() {\n        module.verbose('Destroying previous site for', $module);\n        $module.removeData(moduleNamespace);\n      },\n      cache: {},\n      setting: function setting(name, value) {\n        if ($.isPlainObject(name)) {\n          $.extend(true, _settings, name);\n        } else if (value !== undefined) {\n          _settings[name] = value;\n        } else {\n          return _settings[name];\n        }\n      },\n      internal: function internal(name, value) {\n        if ($.isPlainObject(name)) {\n          $.extend(true, module, name);\n        } else if (value !== undefined) {\n          module[name] = value;\n        } else {\n          return module[name];\n        }\n      },\n      debug: function debug() {\n        if (_settings.debug) {\n          if (_settings.performance) {\n            module.performance.log(arguments);\n          } else {\n            module.debug = Function.prototype.bind.call(console.info, console, _settings.name + ':');\n            module.debug.apply(console, arguments);\n          }\n        }\n      },\n      verbose: function verbose() {\n        if (_settings.verbose && _settings.debug) {\n          if (_settings.performance) {\n            module.performance.log(arguments);\n          } else {\n            module.verbose = Function.prototype.bind.call(console.info, console, _settings.name + ':');\n            module.verbose.apply(console, arguments);\n          }\n        }\n      },\n      error: function error() {\n        module.error = Function.prototype.bind.call(console.error, console, _settings.name + ':');\n        module.error.apply(console, arguments);\n      },\n      performance: {\n        log: function log(message) {\n          var currentTime, executionTime, previousTime;\n\n          if (_settings.performance) {\n            currentTime = new Date().getTime();\n            previousTime = time || currentTime;\n            executionTime = currentTime - previousTime;\n            time = currentTime;\n            performance.push({\n              'Element': element,\n              'Name': message[0],\n              'Arguments': [].slice.call(message, 1) || '',\n              'Execution Time': executionTime\n            });\n          }\n\n          clearTimeout(module.performance.timer);\n          module.performance.timer = setTimeout(module.performance.display, 500);\n        },\n        display: function display() {\n          var title = _settings.name + ':',\n              totalTime = 0;\n          time = false;\n          clearTimeout(module.performance.timer);\n          $.each(performance, function (index, data) {\n            totalTime += data['Execution Time'];\n          });\n          title += ' ' + totalTime + 'ms';\n\n          if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n            console.groupCollapsed(title);\n\n            if (console.table) {\n              console.table(performance);\n            } else {\n              $.each(performance, function (index, data) {\n                console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n              });\n            }\n\n            console.groupEnd();\n          }\n\n          performance = [];\n        }\n      },\n      invoke: function invoke(query, passedArguments, context) {\n        var object = instance,\n            maxDepth,\n            found,\n            response;\n        passedArguments = passedArguments || queryArguments;\n        context = element || context;\n\n        if (typeof query == 'string' && object !== undefined) {\n          query = query.split(/[\\. ]/);\n          maxDepth = query.length - 1;\n          $.each(query, function (depth, value) {\n            var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n            if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n              object = object[camelCaseValue];\n            } else if (object[camelCaseValue] !== undefined) {\n              found = object[camelCaseValue];\n              return false;\n            } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n              object = object[value];\n            } else if (object[value] !== undefined) {\n              found = object[value];\n              return false;\n            } else {\n              module.error(error.method, query);\n              return false;\n            }\n          });\n        }\n\n        if ($.isFunction(found)) {\n          response = found.apply(context, passedArguments);\n        } else if (found !== undefined) {\n          response = found;\n        }\n\n        if ($.isArray(returnedValue)) {\n          returnedValue.push(response);\n        } else if (returnedValue !== undefined) {\n          returnedValue = [returnedValue, response];\n        } else if (response !== undefined) {\n          returnedValue = response;\n        }\n\n        return found;\n      }\n    };\n\n    if (methodInvoked) {\n      if (instance === undefined) {\n        module.initialize();\n      }\n\n      module.invoke(query);\n    } else {\n      if (instance !== undefined) {\n        module.destroy();\n      }\n\n      module.initialize();\n    }\n\n    return returnedValue !== undefined ? returnedValue : this;\n  };\n\n  $.site.settings = {\n    name: 'Site',\n    namespace: 'site',\n    error: {\n      console: 'Console cannot be restored, most likely it was overwritten outside of module',\n      method: 'The method you called is not defined.'\n    },\n    debug: false,\n    verbose: false,\n    performance: true,\n    modules: ['accordion', 'api', 'checkbox', 'dimmer', 'dropdown', 'embed', 'form', 'modal', 'nag', 'popup', 'rating', 'shape', 'sidebar', 'state', 'sticky', 'tab', 'transition', 'visit', 'visibility'],\n    siteNamespace: 'site',\n    namespaceStub: {\n      cache: {},\n      config: {},\n      sections: {},\n      section: {},\n      utilities: {}\n    }\n  }; // allows for selection of elements with data attributes\n\n  $.extend($.expr[\":\"], {\n    data: $.expr.createPseudo ? $.expr.createPseudo(function (dataName) {\n      return function (elem) {\n        return !!$.data(elem, dataName);\n      };\n    }) : function (elem, i, match) {\n      // support: jQuery < 1.8\n      return !!$.data(elem, match[3]);\n    }\n  });\n})(jQuery, window, document);","map":null,"metadata":{},"sourceType":"module"}