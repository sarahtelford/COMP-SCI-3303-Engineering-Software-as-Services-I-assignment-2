{"ast":null,"code":"/*!\n * # Semantic UI - Sticky\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\n  $.fn.sticky = function (parameters) {\n    var $allModules = $(this),\n        moduleSelector = $allModules.selector || '',\n        time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        returnedValue;\n    $allModules.each(function () {\n      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.sticky.settings, parameters) : $.extend({}, $.fn.sticky.settings),\n          className = settings.className,\n          namespace = settings.namespace,\n          error = settings.error,\n          eventNamespace = '.' + namespace,\n          moduleNamespace = 'module-' + namespace,\n          $module = $(this),\n          $window = $(window),\n          $scroll = $(settings.scrollContext),\n          $container,\n          $context,\n          selector = $module.selector || '',\n          instance = $module.data(moduleNamespace),\n          requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n        setTimeout(callback, 0);\n      },\n          element = this,\n          documentObserver,\n          observer,\n          module;\n\n      module = {\n        initialize: function initialize() {\n          module.determineContainer();\n          module.determineContext();\n          module.verbose('Initializing sticky', settings, $container);\n          module.save.positions();\n          module.checkErrors();\n          module.bind.events();\n\n          if (settings.observeChanges) {\n            module.observeChanges();\n          }\n\n          module.instantiate();\n        },\n        instantiate: function instantiate() {\n          module.verbose('Storing instance of module', module);\n          instance = module;\n          $module.data(moduleNamespace, module);\n        },\n        destroy: function destroy() {\n          module.verbose('Destroying previous instance');\n          module.reset();\n\n          if (documentObserver) {\n            documentObserver.disconnect();\n          }\n\n          if (observer) {\n            observer.disconnect();\n          }\n\n          $window.off('load' + eventNamespace, module.event.load).off('resize' + eventNamespace, module.event.resize);\n          $scroll.off('scrollchange' + eventNamespace, module.event.scrollchange);\n          $module.removeData(moduleNamespace);\n        },\n        observeChanges: function observeChanges() {\n          if ('MutationObserver' in window) {\n            documentObserver = new MutationObserver(module.event.documentChanged);\n            observer = new MutationObserver(module.event.changed);\n            documentObserver.observe(document, {\n              childList: true,\n              subtree: true\n            });\n            observer.observe(element, {\n              childList: true,\n              subtree: true\n            });\n            observer.observe($context[0], {\n              childList: true,\n              subtree: true\n            });\n            module.debug('Setting up mutation observer', observer);\n          }\n        },\n        determineContainer: function determineContainer() {\n          if (settings.container) {\n            $container = $(settings.container);\n          } else {\n            $container = $module.offsetParent();\n          }\n        },\n        determineContext: function determineContext() {\n          if (settings.context) {\n            $context = $(settings.context);\n          } else {\n            $context = $container;\n          }\n\n          if ($context.length === 0) {\n            module.error(error.invalidContext, settings.context, $module);\n            return;\n          }\n        },\n        checkErrors: function checkErrors() {\n          if (module.is.hidden()) {\n            module.error(error.visible, $module);\n          }\n\n          if (module.cache.element.height > module.cache.context.height) {\n            module.reset();\n            module.error(error.elementSize, $module);\n            return;\n          }\n        },\n        bind: {\n          events: function events() {\n            $window.on('load' + eventNamespace, module.event.load).on('resize' + eventNamespace, module.event.resize); // pub/sub pattern\n\n            $scroll.off('scroll' + eventNamespace).on('scroll' + eventNamespace, module.event.scroll).on('scrollchange' + eventNamespace, module.event.scrollchange);\n          }\n        },\n        event: {\n          changed: function changed(mutations) {\n            clearTimeout(module.timer);\n            module.timer = setTimeout(function () {\n              module.verbose('DOM tree modified, updating sticky menu', mutations);\n              module.refresh();\n            }, 100);\n          },\n          documentChanged: function documentChanged(mutations) {\n            [].forEach.call(mutations, function (mutation) {\n              if (mutation.removedNodes) {\n                [].forEach.call(mutation.removedNodes, function (node) {\n                  if (node == element || $(node).find(element).length > 0) {\n                    module.debug('Element removed from DOM, tearing down events');\n                    module.destroy();\n                  }\n                });\n              }\n            });\n          },\n          load: function load() {\n            module.verbose('Page contents finished loading');\n            requestAnimationFrame(module.refresh);\n          },\n          resize: function resize() {\n            module.verbose('Window resized');\n            requestAnimationFrame(module.refresh);\n          },\n          scroll: function scroll() {\n            requestAnimationFrame(function () {\n              $scroll.triggerHandler('scrollchange' + eventNamespace, $scroll.scrollTop());\n            });\n          },\n          scrollchange: function scrollchange(event, scrollPosition) {\n            module.stick(scrollPosition);\n            settings.onScroll.call(element);\n          }\n        },\n        refresh: function refresh(hardRefresh) {\n          module.reset();\n\n          if (!settings.context) {\n            module.determineContext();\n          }\n\n          if (hardRefresh) {\n            module.determineContainer();\n          }\n\n          module.save.positions();\n          module.stick();\n          settings.onReposition.call(element);\n        },\n        supports: {\n          sticky: function sticky() {\n            var $element = $('<div/>'),\n                element = $element[0];\n            $element.addClass(className.supported);\n            return $element.css('position').match('sticky');\n          }\n        },\n        save: {\n          lastScroll: function lastScroll(scroll) {\n            module.lastScroll = scroll;\n          },\n          elementScroll: function elementScroll(scroll) {\n            module.elementScroll = scroll;\n          },\n          positions: function positions() {\n            var scrollContext = {\n              height: $scroll.height()\n            },\n                element = {\n              margin: {\n                top: parseInt($module.css('margin-top'), 10),\n                bottom: parseInt($module.css('margin-bottom'), 10)\n              },\n              offset: $module.offset(),\n              width: $module.outerWidth(),\n              height: $module.outerHeight()\n            },\n                context = {\n              offset: $context.offset(),\n              height: $context.outerHeight()\n            },\n                container = {\n              height: $container.outerHeight()\n            };\n\n            if (!module.is.standardScroll()) {\n              module.debug('Non-standard scroll. Removing scroll offset from element offset');\n              scrollContext.top = $scroll.scrollTop();\n              scrollContext.left = $scroll.scrollLeft();\n              element.offset.top += scrollContext.top;\n              context.offset.top += scrollContext.top;\n              element.offset.left += scrollContext.left;\n              context.offset.left += scrollContext.left;\n            }\n\n            module.cache = {\n              fits: element.height + settings.offset <= scrollContext.height,\n              sameHeight: element.height == context.height,\n              scrollContext: {\n                height: scrollContext.height\n              },\n              element: {\n                margin: element.margin,\n                top: element.offset.top - element.margin.top,\n                left: element.offset.left,\n                width: element.width,\n                height: element.height,\n                bottom: element.offset.top + element.height\n              },\n              context: {\n                top: context.offset.top,\n                height: context.height,\n                bottom: context.offset.top + context.height\n              }\n            };\n            module.set.containerSize();\n            module.stick();\n            module.debug('Caching element positions', module.cache);\n          }\n        },\n        get: {\n          direction: function direction(scroll) {\n            var direction = 'down';\n            scroll = scroll || $scroll.scrollTop();\n\n            if (module.lastScroll !== undefined) {\n              if (module.lastScroll < scroll) {\n                direction = 'down';\n              } else if (module.lastScroll > scroll) {\n                direction = 'up';\n              }\n            }\n\n            return direction;\n          },\n          scrollChange: function scrollChange(scroll) {\n            scroll = scroll || $scroll.scrollTop();\n            return module.lastScroll ? scroll - module.lastScroll : 0;\n          },\n          currentElementScroll: function currentElementScroll() {\n            if (module.elementScroll) {\n              return module.elementScroll;\n            }\n\n            return module.is.top() ? Math.abs(parseInt($module.css('top'), 10)) || 0 : Math.abs(parseInt($module.css('bottom'), 10)) || 0;\n          },\n          elementScroll: function elementScroll(scroll) {\n            scroll = scroll || $scroll.scrollTop();\n            var element = module.cache.element,\n                scrollContext = module.cache.scrollContext,\n                delta = module.get.scrollChange(scroll),\n                maxScroll = element.height - scrollContext.height + settings.offset,\n                elementScroll = module.get.currentElementScroll(),\n                possibleScroll = elementScroll + delta;\n\n            if (module.cache.fits || possibleScroll < 0) {\n              elementScroll = 0;\n            } else if (possibleScroll > maxScroll) {\n              elementScroll = maxScroll;\n            } else {\n              elementScroll = possibleScroll;\n            }\n\n            return elementScroll;\n          }\n        },\n        remove: {\n          lastScroll: function lastScroll() {\n            delete module.lastScroll;\n          },\n          elementScroll: function elementScroll(scroll) {\n            delete module.elementScroll;\n          },\n          minimumSize: function minimumSize() {\n            $container.css('min-height', '');\n          },\n          offset: function offset() {\n            $module.css('margin-top', '');\n          }\n        },\n        set: {\n          offset: function offset() {\n            module.verbose('Setting offset on element', settings.offset);\n            $module.css('margin-top', settings.offset);\n          },\n          containerSize: function containerSize() {\n            var tagName = $container.get(0).tagName;\n\n            if (tagName === 'HTML' || tagName == 'body') {\n              // this can trigger for too many reasons\n              //module.error(error.container, tagName, $module);\n              module.determineContainer();\n            } else {\n              if (Math.abs($container.outerHeight() - module.cache.context.height) > settings.jitter) {\n                module.debug('Context has padding, specifying exact height for container', module.cache.context.height);\n                $container.css({\n                  height: module.cache.context.height\n                });\n              }\n            }\n          },\n          minimumSize: function minimumSize() {\n            var element = module.cache.element;\n            $container.css('min-height', element.height);\n          },\n          scroll: function scroll(_scroll) {\n            module.debug('Setting scroll on element', _scroll);\n\n            if (module.elementScroll == _scroll) {\n              return;\n            }\n\n            if (module.is.top()) {\n              $module.css('bottom', '').css('top', -_scroll);\n            }\n\n            if (module.is.bottom()) {\n              $module.css('top', '').css('bottom', _scroll);\n            }\n          },\n          size: function size() {\n            if (module.cache.element.height !== 0 && module.cache.element.width !== 0) {\n              element.style.setProperty('width', module.cache.element.width + 'px', 'important');\n              element.style.setProperty('height', module.cache.element.height + 'px', 'important');\n            }\n          }\n        },\n        is: {\n          standardScroll: function standardScroll() {\n            return $scroll[0] == window;\n          },\n          top: function top() {\n            return $module.hasClass(className.top);\n          },\n          bottom: function bottom() {\n            return $module.hasClass(className.bottom);\n          },\n          initialPosition: function initialPosition() {\n            return !module.is.fixed() && !module.is.bound();\n          },\n          hidden: function hidden() {\n            return !$module.is(':visible');\n          },\n          bound: function bound() {\n            return $module.hasClass(className.bound);\n          },\n          fixed: function fixed() {\n            return $module.hasClass(className.fixed);\n          }\n        },\n        stick: function stick(scroll) {\n          var cachedPosition = scroll || $scroll.scrollTop(),\n              cache = module.cache,\n              fits = cache.fits,\n              sameHeight = cache.sameHeight,\n              element = cache.element,\n              scrollContext = cache.scrollContext,\n              context = cache.context,\n              offset = module.is.bottom() && settings.pushing ? settings.bottomOffset : settings.offset,\n              scroll = {\n            top: cachedPosition + offset,\n            bottom: cachedPosition + offset + scrollContext.height\n          },\n              direction = module.get.direction(scroll.top),\n              elementScroll = fits ? 0 : module.get.elementScroll(scroll.top),\n              // shorthand\n          doesntFit = !fits,\n              elementVisible = element.height !== 0;\n\n          if (elementVisible && !sameHeight) {\n            if (module.is.initialPosition()) {\n              if (scroll.top >= context.bottom) {\n                module.debug('Initial element position is bottom of container');\n                module.bindBottom();\n              } else if (scroll.top > element.top) {\n                if (element.height + scroll.top - elementScroll >= context.bottom) {\n                  module.debug('Initial element position is bottom of container');\n                  module.bindBottom();\n                } else {\n                  module.debug('Initial element position is fixed');\n                  module.fixTop();\n                }\n              }\n            } else if (module.is.fixed()) {\n              // currently fixed top\n              if (module.is.top()) {\n                if (scroll.top <= element.top) {\n                  module.debug('Fixed element reached top of container');\n                  module.setInitialPosition();\n                } else if (element.height + scroll.top - elementScroll >= context.bottom) {\n                  module.debug('Fixed element reached bottom of container');\n                  module.bindBottom();\n                } // scroll element if larger than screen\n                else if (doesntFit) {\n                    module.set.scroll(elementScroll);\n                    module.save.lastScroll(scroll.top);\n                    module.save.elementScroll(elementScroll);\n                  }\n              } // currently fixed bottom\n              else if (module.is.bottom()) {\n                  // top edge\n                  if (scroll.bottom - element.height <= element.top) {\n                    module.debug('Bottom fixed rail has reached top of container');\n                    module.setInitialPosition();\n                  } // bottom edge\n                  else if (scroll.bottom >= context.bottom) {\n                      module.debug('Bottom fixed rail has reached bottom of container');\n                      module.bindBottom();\n                    } // scroll element if larger than screen\n                    else if (doesntFit) {\n                        module.set.scroll(elementScroll);\n                        module.save.lastScroll(scroll.top);\n                        module.save.elementScroll(elementScroll);\n                      }\n                }\n            } else if (module.is.bottom()) {\n              if (scroll.top <= element.top) {\n                module.debug('Jumped from bottom fixed to top fixed, most likely used home/end button');\n                module.setInitialPosition();\n              } else {\n                if (settings.pushing) {\n                  if (module.is.bound() && scroll.bottom <= context.bottom) {\n                    module.debug('Fixing bottom attached element to bottom of browser.');\n                    module.fixBottom();\n                  }\n                } else {\n                  if (module.is.bound() && scroll.top <= context.bottom - element.height) {\n                    module.debug('Fixing bottom attached element to top of browser.');\n                    module.fixTop();\n                  }\n                }\n              }\n            }\n          }\n        },\n        bindTop: function bindTop() {\n          module.debug('Binding element to top of parent container');\n          module.remove.offset();\n          $module.css({\n            left: '',\n            top: '',\n            marginBottom: ''\n          }).removeClass(className.fixed).removeClass(className.bottom).addClass(className.bound).addClass(className.top);\n          settings.onTop.call(element);\n          settings.onUnstick.call(element);\n        },\n        bindBottom: function bindBottom() {\n          module.debug('Binding element to bottom of parent container');\n          module.remove.offset();\n          $module.css({\n            left: '',\n            top: ''\n          }).removeClass(className.fixed).removeClass(className.top).addClass(className.bound).addClass(className.bottom);\n          settings.onBottom.call(element);\n          settings.onUnstick.call(element);\n        },\n        setInitialPosition: function setInitialPosition() {\n          module.debug('Returning to initial position');\n          module.unfix();\n          module.unbind();\n        },\n        fixTop: function fixTop() {\n          module.debug('Fixing element to top of page');\n\n          if (settings.setSize) {\n            module.set.size();\n          }\n\n          module.set.minimumSize();\n          module.set.offset();\n          $module.css({\n            left: module.cache.element.left,\n            bottom: '',\n            marginBottom: ''\n          }).removeClass(className.bound).removeClass(className.bottom).addClass(className.fixed).addClass(className.top);\n          settings.onStick.call(element);\n        },\n        fixBottom: function fixBottom() {\n          module.debug('Sticking element to bottom of page');\n\n          if (settings.setSize) {\n            module.set.size();\n          }\n\n          module.set.minimumSize();\n          module.set.offset();\n          $module.css({\n            left: module.cache.element.left,\n            bottom: '',\n            marginBottom: ''\n          }).removeClass(className.bound).removeClass(className.top).addClass(className.fixed).addClass(className.bottom);\n          settings.onStick.call(element);\n        },\n        unbind: function unbind() {\n          if (module.is.bound()) {\n            module.debug('Removing container bound position on element');\n            module.remove.offset();\n            $module.removeClass(className.bound).removeClass(className.top).removeClass(className.bottom);\n          }\n        },\n        unfix: function unfix() {\n          if (module.is.fixed()) {\n            module.debug('Removing fixed position on element');\n            module.remove.minimumSize();\n            module.remove.offset();\n            $module.removeClass(className.fixed).removeClass(className.top).removeClass(className.bottom);\n            settings.onUnstick.call(element);\n          }\n        },\n        reset: function reset() {\n          module.debug('Resetting elements position');\n          module.unbind();\n          module.unfix();\n          module.resetCSS();\n          module.remove.offset();\n          module.remove.lastScroll();\n        },\n        resetCSS: function resetCSS() {\n          $module.css({\n            width: '',\n            height: ''\n          });\n          $container.css({\n            height: ''\n          });\n        },\n        setting: function setting(name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, settings, name);\n          } else if (value !== undefined) {\n            settings[name] = value;\n          } else {\n            return settings[name];\n          }\n        },\n        internal: function internal(name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, module, name);\n          } else if (value !== undefined) {\n            module[name] = value;\n          } else {\n            return module[name];\n          }\n        },\n        debug: function debug() {\n          if (!settings.silent && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function verbose() {\n          if (!settings.silent && settings.verbose && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function error() {\n          if (!settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function log(message) {\n            var currentTime, executionTime, previousTime;\n\n            if (settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                'Element': element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 0);\n          },\n          display: function display() {\n            var title = settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        invoke: function invoke(query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found;\n        }\n      };\n\n      if (methodInvoked) {\n        if (instance === undefined) {\n          module.initialize();\n        }\n\n        module.invoke(query);\n      } else {\n        if (instance !== undefined) {\n          instance.invoke('destroy');\n        }\n\n        module.initialize();\n      }\n    });\n    return returnedValue !== undefined ? returnedValue : this;\n  };\n\n  $.fn.sticky.settings = {\n    name: 'Sticky',\n    namespace: 'sticky',\n    silent: false,\n    debug: false,\n    verbose: true,\n    performance: true,\n    // whether to stick in the opposite direction on scroll up\n    pushing: false,\n    context: false,\n    container: false,\n    // Context to watch scroll events\n    scrollContext: window,\n    // Offset to adjust scroll\n    offset: 0,\n    // Offset to adjust scroll when attached to bottom of screen\n    bottomOffset: 0,\n    // will only set container height if difference between context and container is larger than this number\n    jitter: 5,\n    // set width of sticky element when it is fixed to page (used to make sure 100% width is maintained if no fixed size set)\n    setSize: true,\n    // Whether to automatically observe changes with Mutation Observers\n    observeChanges: false,\n    // Called when position is recalculated\n    onReposition: function onReposition() {},\n    // Called on each scroll\n    onScroll: function onScroll() {},\n    // Called when element is stuck to viewport\n    onStick: function onStick() {},\n    // Called when element is unstuck from viewport\n    onUnstick: function onUnstick() {},\n    // Called when element reaches top of context\n    onTop: function onTop() {},\n    // Called when element reaches bottom of context\n    onBottom: function onBottom() {},\n    error: {\n      container: 'Sticky element must be inside a relative container',\n      visible: 'Element is hidden, you must call refresh after element becomes visible. Use silent setting to surpress this warning in production.',\n      method: 'The method you called is not defined.',\n      invalidContext: 'Context specified does not exist',\n      elementSize: 'Sticky element is larger than its container, cannot create sticky.'\n    },\n    className: {\n      bound: 'bound',\n      fixed: 'fixed',\n      supported: 'native',\n      top: 'top',\n      bottom: 'bottom'\n    }\n  };\n})(jQuery, window, document);","map":null,"metadata":{},"sourceType":"module"}